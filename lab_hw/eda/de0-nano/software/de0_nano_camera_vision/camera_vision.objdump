
camera_vision.elf:     file format elf32-littlenios2
camera_vision.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02010020

Program Header:
    LOAD off    0x00001000 vaddr 0x02010000 paddr 0x02010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02010020 paddr 0x02010020 align 2**12
         filesz 0x000066a0 memsz 0x000066a0 flags r-x
    LOAD off    0x000076c0 vaddr 0x020166c0 paddr 0x020170f0 align 2**12
         filesz 0x00000a30 memsz 0x00000a30 flags rw-
    LOAD off    0x00008b20 vaddr 0x02017b20 paddr 0x02017b20 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02010000  02010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02010020  02010020  000080f0  2**0
                  CONTENTS
  2 .text         00005eac  02010020  02010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007f4  02015ecc  02015ecc  00006ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a30  020166c0  020170f0  000076c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  02017b20  02017b20  00008b20  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000000  00000000  000080f0  2**0
                  CONTENTS
  7 .onchip_memory 00000000  02017b64  02017b64  000080f0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000080f0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000618  00000000  00000000  00008118  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00012bd1  00000000  00000000  00008730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000045b8  00000000  00000000  0001b301  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000054f5  00000000  00000000  0001f8b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001040  00000000  00000000  00024db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b99  00000000  00000000  00025df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000050ba  00000000  00000000  00027989  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0002ca44  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006b8  00000000  00000000  0002ca88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0002f62a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  0002f62d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0002f637  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002f638  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0002f639  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0002f63d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0002f641  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0002f645  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0002f64e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0002f657  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  0002f660  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000022  00000000  00000000  0002f664  2**0
                  CONTENTS, READONLY
 30 .jdi          00004dbd  00000000  00000000  0002f686  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00078a7a  00000000  00000000  00034443  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02010000 l    d  .entry	00000000 .entry
02010020 l    d  .exceptions	00000000 .exceptions
02010020 l    d  .text	00000000 .text
02015ecc l    d  .rodata	00000000 .rodata
020166c0 l    d  .rwdata	00000000 .rwdata
02017b20 l    d  .bss	00000000 .bss
00000000 l    d  .sdram	00000000 .sdram
02017b64 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../de0_nano_camera_vision_bsp/obj/HAL/src/crt0.o
02010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 bit_helper.c
00000000 l    df *ABS*	00000000 camera_vision.c
00000000 l    df *ABS*	00000000 mipi_bridge_config.c
00000000 l    df *ABS*	00000000 mipi_camera_config.c
00000000 l    df *ABS*	00000000 stdio_ext.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
02011e04 l     F .text	00000008 __fp_unlock
02011e18 l     F .text	0000019c __sinit.part.1
02011fb4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
020166c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
02014988 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020170ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02017094 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 refill.c
02015cc8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 alt_exit.c
02014874 g     F .text	00000054 _isatty_r
02014c98 g     F .text	00000050 alt_main
02011c98 g     F .text	000000c0 _puts_r
0201459c g     F .text	00000060 _lseek_r
020103b4 g     F .text	00000068 ACK_check
020170f0 g       *ABS*	00000000 __flash_rwdata_start
02010328 g     F .text	0000008c ACK_single_check
02017b64 g       *ABS*	00000000 __alt_heap_start
02013b50 g     F .text	0000005c __sseek
02012164 g     F .text	00000010 __sinit
020159f0 g     F .text	00000140 __swbuf_r
02011fbc g     F .text	00000078 __sfmoreglue
02014cec g     F .text	00000004 __malloc_unlock
0201323c g     F .text	0000015c memmove
0201041c g     F .text	00000250 OC_I2C_Write
02011980 g     F .text	0000006c readBytes
0201214c g     F .text	00000018 _cleanup
020154a0 g     F .text	00000008 altera_nios2_gen2_irq_init
02010000 g     F .entry	0000000c __reset
02011848 g     F .text	000000a4 mipi_camera_reg_write_VCM149C
02010020 g       *ABS*	00000000 __flash_exceptions_start
02014818 g     F .text	0000005c _fstat_r
02017b2c g     O .bss	00000004 errno
020159dc g     F .text	00000014 __srget
02013acc g     F .text	00000008 __seofread
0201109c g     F .text	00000064 WaitFrame
02017b34 g     O .bss	00000004 alt_argv
0201f0c0 g       *ABS*	00000000 _gp
02014eb8 g     F .text	00000004 usleep
020170c0 g     O .rwdata	00000004 MIPI_REGISTERS_COUNT
02016eec g     O .rwdata	00000180 alt_fd_list
0201568c g     F .text	00000070 _getc_r
020156fc g     F .text	00000088 getc
020154a8 g     F .text	00000078 alt_find_dev
020130f4 g     F .text	00000148 memcpy
02010164 g     F .text	00000140 oc_i2c_init_ex
02011e0c g     F .text	0000000c _cleanup_r
020151d8 g     F .text	00000140 alt_io_redirect
020116fc g     F .text	00000100 mipi_camera_init
02011d58 g     F .text	00000014 puts
0201501c g     F .text	0000008c altera_avalon_jtag_uart_read
02011bb4 g     F .text	00000064 .hidden __udivsi3
02014a64 g     F .text	000000a0 isatty
02017b28 g     O .bss	00000004 __malloc_top_pad
02011374 g     F .text	00000060 mipi_bridge_reg_read
020121b4 g     F .text	000004c8 __sfvwrite_r
02013a24 g     F .text	00000054 _sbrk_r
020147b8 g     F .text	00000060 _read_r
020170d4 g     O .rwdata	00000004 alt_max_fd
02011314 g     F .text	00000060 mipi_bridge_reg_write
02013dbc g     F .text	000000f0 _fclose_r
02014138 g     F .text	00000030 fflush
02017b24 g     O .bss	00000004 __malloc_max_sbrked_mem
02014bd0 g     F .text	000000c8 lseek
020170c4 g     O .rwdata	00000004 _global_impure_ptr
020134c0 g     F .text	00000564 _realloc_r
02017b64 g       *ABS*	00000000 __bss_end
02014a58 g     F .text	0000000c alt_getchar
02012184 g     F .text	00000018 __fp_lock_all
02016144 g     O .rodata	00000044 MIPI_REGISTERS
02010a04 g     F .text	00000270 OC_I2CL_Write
0201066c g     F .text	00000064 ACK_judge_for_read
0201706c g     O .rwdata	00000028 alt_dev_null
0201005c g     F .text	00000058 Write32_Data
02011520 g     F .text	00000060 mipi_camera_reg_write
02015164 g     F .text	00000004 alt_dcache_flush_all
020170f0 g       *ABS*	00000000 __ram_rwdata_end
02010000 g       *ABS*	00000000 __alt_mem_onchip_memory
020170d8 g     O .rwdata	00000008 alt_dev_list
02014ebc g     F .text	00000110 write
02015800 g     F .text	000000a0 _putc_r
020166c0 g       *ABS*	00000000 __ram_rodata_end
02014990 g     F .text	000000c8 fstat
02011c18 g     F .text	00000058 .hidden __umodsi3
02017b64 g       *ABS*	00000000 end
020118ec g     F .text	0000003c readUInt16
0201a000 g       *ABS*	00000000 __alt_stack_pointer
020150a8 g     F .text	00000034 altera_avalon_jtag_uart_write
02012174 g     F .text	00000004 __sfp_lock_acquire
02013010 g     F .text	000000e4 memchr
0201428c g     F .text	00000310 _free_r
02015968 g     F .text	00000074 __srget_r
02015b48 g     F .text	00000180 __call_exitprocs
020170cc g     O .rwdata	00000004 __malloc_sbrk_base
02010020 g     F .text	0000003c _start
02014cfc g     F .text	00000114 read
02014fec g     F .text	00000010 alt_sys_init
02011c70 g     F .text	00000028 .hidden __mulsi3
020166c0 g       *ABS*	00000000 __ram_rwdata_start
02015ecc g       *ABS*	00000000 __ram_rodata_start
02017b3c g     O .bss	00000028 __malloc_current_mallinfo
02014ffc g     F .text	00000010 altera_avalon_jtag_uart_read_fd
020155cc g     F .text	00000088 alt_get_fd
020150dc g     F .text	00000088 alt_busy_sleep
02013d68 g     F .text	00000054 _close_r
02015784 g     F .text	0000007c memcmp
02017b64 g       *ABS*	00000000 __alt_stack_base
02013c14 g     F .text	00000154 __swsetup_r
0201010c g     F .text	00000058 oc_i2c_init
02012034 g     F .text	00000118 __sfp
020113d4 g     F .text	000000f8 mipi_bridge_init
02016ae4 g     O .rwdata	00000408 __malloc_av_
02012180 g     F .text	00000004 __sinit_lock_release
02013a78 g     F .text	00000054 __sread
02015520 g     F .text	000000ac alt_find_file
02016188 g     O .rodata	00000514 CAMERA_REGISTERS
02015168 g     F .text	0000006c alt_dev_llist_insert
02014ce8 g     F .text	00000004 __malloc_lock
02014e6c g     F .text	0000004c sbrk
020140dc g     F .text	0000005c _fflush_r
02017b20 g       *ABS*	00000000 __bss_start
02013398 g     F .text	00000128 memset
02011100 g     F .text	00000214 main
02017b30 g     O .bss	00000004 alt_envp
02017b20 g     O .bss	00000004 __malloc_max_total_mem
0201500c g     F .text	00000010 altera_avalon_jtag_uart_write_fd
02015b30 g     F .text	00000018 __swbuf
02013bac g     F .text	00000008 __sclose
0201a000 g       *ABS*	00000000 __alt_heap_limit
02013eac g     F .text	00000014 fclose
02012804 g     F .text	0000080c _malloc_r
020170e8 g     O .rwdata	00000004 alt_errno
02011580 g     F .text	0000017c mipi_camera_binning
020117fc g     F .text	0000004c mipi_camera_reg_read_VCM149C
0201267c g     F .text	000000c4 _fwalk
020158a0 g     F .text	000000c8 putc
02011abc g     F .text	00000084 .hidden __divsi3
020102a4 g     F .text	00000084 oc_i2c_uninit
02014168 g     F .text	00000124 _malloc_trim_r
02015ecc g       *ABS*	00000000 __flash_rodata_start
02014fcc g     F .text	00000020 alt_irq_init
02014e10 g     F .text	0000005c alt_release_fd
02011928 g     F .text	00000058 bytesToUInt16
02013bb4 g     F .text	00000060 _write_r
020170c8 g     O .rwdata	00000004 _impure_ptr
02017b38 g     O .bss	00000004 alt_argc
02013ec0 g     F .text	0000021c __sflush_r
02015ce4 g     F .text	000001d4 __srefill_r
0201219c g     F .text	00000018 __fp_unlock_all
020170e0 g     O .rwdata	00000008 alt_fs_list
020100b4 g     F .text	00000058 Read32_Data
020106d0 g     F .text	000001ec OC_I2C_Read
02010020 g       *ABS*	00000000 __ram_exceptions_start
020119ec g     F .text	0000006c writeBytes
020170f0 g       *ABS*	00000000 _edata
02017b64 g       *ABS*	00000000 _end
02010020 g       *ABS*	00000000 __ram_exceptions_end
02011a80 g     F .text	0000003c writeByte
02013ad4 g     F .text	0000007c __swrite
020170d0 g     O .rwdata	00000004 __malloc_trim_threshold
020108bc g     F .text	00000148 OC_I2C_Read_Continue
02015654 g     F .text	00000038 exit
02012740 g     F .text	000000c4 _fwalk_reent
02011b40 g     F .text	00000074 .hidden __modsi3
0201a000 g       *ABS*	00000000 __alt_data_end
02012178 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
02010c74 g     F .text	000002f0 OC_I2CL_Read
02015eb8 g     F .text	00000014 _exit
020145fc g     F .text	000001bc __smakebuf_r
020114cc g     F .text	00000054 mipi_camera_reg_read
02011d6c g     F .text	00000098 strlen
02015318 g     F .text	00000188 open
02014cf0 g     F .text	0000000c alt_putchar
020151d4 g     F .text	00000004 alt_icache_flush_all
02011a58 g     F .text	00000028 readByte
020148c8 g     F .text	000000c0 close
02010fb0 g     F .text	000000ec config
02014b04 g     F .text	000000cc alt_load
02010f64 g     F .text	0000004c ReverseUInt16
0201217c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2010000:	00408074 	movhi	at,513
    ori r1, r1, %lo(_start)
 2010004:	08400814 	ori	at,at,32
    jmp r1
 2010008:	0800683a 	jmp	at
	...

Disassembly of section .text:

02010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2010020:	06c08074 	movhi	sp,513
    ori sp, sp, %lo(__alt_stack_pointer)
 2010024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
 2010028:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 201002c:	d6bc3014 	ori	gp,gp,61632
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2010030:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2010034:	109ec814 	ori	r2,r2,31520

    movhi r3, %hi(__bss_end)
 2010038:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 201003c:	18ded914 	ori	r3,r3,31588

    beq r2, r3, 1f
 2010040:	10c00326 	beq	r2,r3,2010050 <_start+0x30>

0:
    stw zero, (r2)
 2010044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2010048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 201004c:	10fffd36 	bltu	r2,r3,2010044 <_gp+0xffff0f84>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2010050:	2014b040 	call	2014b04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2010054:	2014c980 	call	2014c98 <alt_main>

02010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2010058:	003fff06 	br	2010058 <_gp+0xffff0f98>

0201005c <Write32_Data>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
 201005c:	defffb04 	addi	sp,sp,-20
 2010060:	df000415 	stw	fp,16(sp)
 2010064:	df000404 	addi	fp,sp,16
 2010068:	e13ffd15 	stw	r4,-12(fp)
 201006c:	e17ffe15 	stw	r5,-8(fp)
 2010070:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
 2010074:	e0bffe17 	ldw	r2,-8(fp)
 2010078:	1085883a 	add	r2,r2,r2
 201007c:	1085883a 	add	r2,r2,r2
 2010080:	1007883a 	mov	r3,r2
 2010084:	e0bffd17 	ldw	r2,-12(fp)
 2010088:	1885883a 	add	r2,r3,r2
 201008c:	1007883a 	mov	r3,r2
 2010090:	e0bfff17 	ldw	r2,-4(fp)
 2010094:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
 2010098:	00800044 	movi	r2,1
 201009c:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
 20100a0:	e0bffc03 	ldbu	r2,-16(fp)
}
 20100a4:	e037883a 	mov	sp,fp
 20100a8:	df000017 	ldw	fp,0(sp)
 20100ac:	dec00104 	addi	sp,sp,4
 20100b0:	f800283a 	ret

020100b4 <Read32_Data>:

bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
 20100b4:	defffb04 	addi	sp,sp,-20
 20100b8:	df000415 	stw	fp,16(sp)
 20100bc:	df000404 	addi	fp,sp,16
 20100c0:	e13ffd15 	stw	r4,-12(fp)
 20100c4:	e17ffe15 	stw	r5,-8(fp)
 20100c8:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 20100cc:	e0bffe17 	ldw	r2,-8(fp)
 20100d0:	1085883a 	add	r2,r2,r2
 20100d4:	1085883a 	add	r2,r2,r2
 20100d8:	1007883a 	mov	r3,r2
 20100dc:	e0bffd17 	ldw	r2,-12(fp)
 20100e0:	1885883a 	add	r2,r3,r2
 20100e4:	10c00037 	ldwio	r3,0(r2)
 20100e8:	e0bfff17 	ldw	r2,-4(fp)
 20100ec:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
 20100f0:	00800044 	movi	r2,1
 20100f4:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
 20100f8:	e0bffc03 	ldbu	r2,-16(fp)
}
 20100fc:	e037883a 	mov	sp,fp
 2010100:	df000017 	ldw	fp,0(sp)
 2010104:	dec00104 	addi	sp,sp,4
 2010108:	f800283a 	ret

0201010c <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
 201010c:	defffa04 	addi	sp,sp,-24
 2010110:	dfc00515 	stw	ra,20(sp)
 2010114:	df000415 	stw	fp,16(sp)
 2010118:	df000404 	addi	fp,sp,16
 201011c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
 2010120:	0080bef4 	movhi	r2,763
 2010124:	10bc2004 	addi	r2,r2,-3968
 2010128:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
 201012c:	008001b4 	movhi	r2,6
 2010130:	1086a004 	addi	r2,r2,6784
 2010134:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
 2010138:	e1bffd17 	ldw	r6,-12(fp)
 201013c:	e17ffc17 	ldw	r5,-16(fp)
 2010140:	e13fff17 	ldw	r4,-4(fp)
 2010144:	20101640 	call	2010164 <oc_i2c_init_ex>
 2010148:	e0bffe05 	stb	r2,-8(fp)

	return bSuccess;
 201014c:	e0bffe03 	ldbu	r2,-8(fp)
}
 2010150:	e037883a 	mov	sp,fp
 2010154:	dfc00117 	ldw	ra,4(sp)
 2010158:	df000017 	ldw	fp,0(sp)
 201015c:	dec00204 	addi	sp,sp,8
 2010160:	f800283a 	ret

02010164 <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 2010164:	defff704 	addi	sp,sp,-36
 2010168:	dfc00815 	stw	ra,32(sp)
 201016c:	df000715 	stw	fp,28(sp)
 2010170:	df000704 	addi	fp,sp,28
 2010174:	e13ffd15 	stw	r4,-12(fp)
 2010178:	e17ffe15 	stw	r5,-8(fp)
 201017c:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
 2010180:	00800044 	movi	r2,1
 2010184:	e0bff905 	stb	r2,-28(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
 2010188:	00bfe004 	movi	r2,-128
 201018c:	e0bff945 	stb	r2,-27(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 2010190:	01400144 	movi	r5,5
 2010194:	e13fff17 	ldw	r4,-4(fp)
 2010198:	2011c700 	call	2011c70 <__mulsi3>
 201019c:	100b883a 	mov	r5,r2
 20101a0:	e13ffe17 	ldw	r4,-8(fp)
 20101a4:	2011abc0 	call	2011abc <__divsi3>
 20101a8:	10bfffc4 	addi	r2,r2,-1
 20101ac:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
 20101b0:	e0bffa17 	ldw	r2,-24(fp)
 20101b4:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
 20101b8:	e0bffa17 	ldw	r2,-24(fp)
 20101bc:	1005d23a 	srai	r2,r2,8
 20101c0:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
 20101c4:	e0bffd17 	ldw	r2,-12(fp)
 20101c8:	e0fffb03 	ldbu	r3,-20(fp)
 20101cc:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
 20101d0:	e0bffd17 	ldw	r2,-12(fp)
 20101d4:	10800104 	addi	r2,r2,4
 20101d8:	1007883a 	mov	r3,r2
 20101dc:	e0bffb43 	ldbu	r2,-19(fp)
 20101e0:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
 20101e4:	e0bffd17 	ldw	r2,-12(fp)
 20101e8:	10800204 	addi	r2,r2,8
 20101ec:	1007883a 	mov	r3,r2
 20101f0:	e0bff943 	ldbu	r2,-27(fp)
 20101f4:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
 20101f8:	e0bff903 	ldbu	r2,-28(fp)
 20101fc:	10000826 	beq	r2,zero,2010220 <oc_i2c_init_ex+0xbc>
    	read_data =IORD(i2c_base, 0);
 2010200:	e0bffd17 	ldw	r2,-12(fp)
 2010204:	10800037 	ldwio	r2,0(r2)
 2010208:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
 201020c:	e0bffc17 	ldw	r2,-16(fp)
 2010210:	10c03fcc 	andi	r3,r2,255
 2010214:	e0bffb03 	ldbu	r2,-20(fp)
 2010218:	18800126 	beq	r3,r2,2010220 <oc_i2c_init_ex+0xbc>
            bSuccess = FALSE;
 201021c:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
 2010220:	e0bff903 	ldbu	r2,-28(fp)
 2010224:	10000926 	beq	r2,zero,201024c <oc_i2c_init_ex+0xe8>
    	read_data =IORD(i2c_base, 1);
 2010228:	e0bffd17 	ldw	r2,-12(fp)
 201022c:	10800104 	addi	r2,r2,4
 2010230:	10800037 	ldwio	r2,0(r2)
 2010234:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
 2010238:	e0bffc17 	ldw	r2,-16(fp)
 201023c:	10c03fcc 	andi	r3,r2,255
 2010240:	e0bffb43 	ldbu	r2,-19(fp)
 2010244:	18800126 	beq	r3,r2,201024c <oc_i2c_init_ex+0xe8>
            bSuccess = FALSE;
 2010248:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check control
    if (bSuccess){
 201024c:	e0bff903 	ldbu	r2,-28(fp)
 2010250:	10000926 	beq	r2,zero,2010278 <oc_i2c_init_ex+0x114>
    	read_data =IORD(i2c_base, 2);
 2010254:	e0bffd17 	ldw	r2,-12(fp)
 2010258:	10800204 	addi	r2,r2,8
 201025c:	10800037 	ldwio	r2,0(r2)
 2010260:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
 2010264:	e0bffc17 	ldw	r2,-16(fp)
 2010268:	10c03fcc 	andi	r3,r2,255
 201026c:	e0bff943 	ldbu	r2,-27(fp)
 2010270:	18800126 	beq	r3,r2,2010278 <oc_i2c_init_ex+0x114>
            bSuccess = FALSE;
 2010274:	e03ff905 	stb	zero,-28(fp)
        }
    }

   if (bSuccess){
 2010278:	e0bff903 	ldbu	r2,-28(fp)
 201027c:	1000031e 	bne	r2,zero,201028c <oc_i2c_init_ex+0x128>
//       printf("\nI2C core is enabled! \r\n");
   }
   else
       printf("\nI2C core is not enabled successfully! \r\n");
 2010280:	01008074 	movhi	r4,513
 2010284:	2117b304 	addi	r4,r4,24268
 2010288:	2011d580 	call	2011d58 <puts>

   return bSuccess;
 201028c:	e0bff903 	ldbu	r2,-28(fp)

}
 2010290:	e037883a 	mov	sp,fp
 2010294:	dfc00117 	ldw	ra,4(sp)
 2010298:	df000017 	ldw	fp,0(sp)
 201029c:	dec00204 	addi	sp,sp,8
 20102a0:	f800283a 	ret

020102a4 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
 20102a4:	defffb04 	addi	sp,sp,-20
 20102a8:	dfc00415 	stw	ra,16(sp)
 20102ac:	df000315 	stw	fp,12(sp)
 20102b0:	df000304 	addi	fp,sp,12
 20102b4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 20102b8:	00800044 	movi	r2,1
 20102bc:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
 20102c0:	e03ffd45 	stb	zero,-11(fp)

    IOWR( i2c_base, 2, ControlValue);
 20102c4:	e0bfff17 	ldw	r2,-4(fp)
 20102c8:	10800204 	addi	r2,r2,8
 20102cc:	1007883a 	mov	r3,r2
 20102d0:	e0bffd43 	ldbu	r2,-11(fp)
 20102d4:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
 20102d8:	e0bfff17 	ldw	r2,-4(fp)
 20102dc:	10800204 	addi	r2,r2,8
 20102e0:	10800037 	ldwio	r2,0(r2)
 20102e4:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
 20102e8:	e0bffe17 	ldw	r2,-8(fp)
 20102ec:	10c03fcc 	andi	r3,r2,255
 20102f0:	e0bffd43 	ldbu	r2,-11(fp)
 20102f4:	18800126 	beq	r3,r2,20102fc <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
 20102f8:	e03ffd05 	stb	zero,-12(fp)
    }

   if (bSuccess){
 20102fc:	e0bffd03 	ldbu	r2,-12(fp)
 2010300:	1000031e 	bne	r2,zero,2010310 <oc_i2c_uninit+0x6c>
//       printf("\I2C core  is disabled! \r\n");
   }
   else
       printf("I2C core is failed to disable! \r\n");
 2010304:	01008074 	movhi	r4,513
 2010308:	2117be04 	addi	r4,r4,24312
 201030c:	2011d580 	call	2011d58 <puts>

   return bSuccess;
 2010310:	e0bffd03 	ldbu	r2,-12(fp)

}
 2010314:	e037883a 	mov	sp,fp
 2010318:	dfc00117 	ldw	ra,4(sp)
 201031c:	df000017 	ldw	fp,0(sp)
 2010320:	dec00204 	addi	sp,sp,8
 2010324:	f800283a 	ret

02010328 <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
 2010328:	defffb04 	addi	sp,sp,-20
 201032c:	dfc00415 	stw	ra,16(sp)
 2010330:	df000315 	stw	fp,12(sp)
 2010334:	df000304 	addi	fp,sp,12
 2010338:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 201033c:	00800044 	movi	r2,1
 2010340:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 2010344:	01003e84 	movi	r4,250
 2010348:	2014eb80 	call	2014eb8 <usleep>
    read_data =IORD(i2c_base, 4);
 201034c:	e0bfff17 	ldw	r2,-4(fp)
 2010350:	10800404 	addi	r2,r2,16
 2010354:	10800037 	ldwio	r2,0(r2)
 2010358:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
 201035c:	e0bffe17 	ldw	r2,-8(fp)
 2010360:	1080008c 	andi	r2,r2,2
 2010364:	10000126 	beq	r2,zero,201036c <ACK_single_check+0x44>
            bSuccess = FALSE;
 2010368:	e03ffd05 	stb	zero,-12(fp)
     if (bSuccess){
 201036c:	e0bffd03 	ldbu	r2,-12(fp)
 2010370:	10000a26 	beq	r2,zero,201039c <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
 2010374:	01003e84 	movi	r4,250
 2010378:	2014eb80 	call	2014eb8 <usleep>
            read_data =IORD(i2c_base, 4);
 201037c:	e0bfff17 	ldw	r2,-4(fp)
 2010380:	10800404 	addi	r2,r2,16
 2010384:	10800037 	ldwio	r2,0(r2)
 2010388:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
 201038c:	e0bffe17 	ldw	r2,-8(fp)
 2010390:	1080200c 	andi	r2,r2,128
 2010394:	10000126 	beq	r2,zero,201039c <ACK_single_check+0x74>
                    bSuccess = FALSE;
 2010398:	e03ffd05 	stb	zero,-12(fp)
     }
    return bSuccess;
 201039c:	e0bffd03 	ldbu	r2,-12(fp)
}
 20103a0:	e037883a 	mov	sp,fp
 20103a4:	dfc00117 	ldw	ra,4(sp)
 20103a8:	df000017 	ldw	fp,0(sp)
 20103ac:	dec00204 	addi	sp,sp,8
 20103b0:	f800283a 	ret

020103b4 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
 20103b4:	defffb04 	addi	sp,sp,-20
 20103b8:	dfc00415 	stw	ra,16(sp)
 20103bc:	df000315 	stw	fp,12(sp)
 20103c0:	df000304 	addi	fp,sp,12
 20103c4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 20103c8:	e03ffd05 	stb	zero,-12(fp)
    int i=0;
 20103cc:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
 20103d0:	00000306 	br	20103e0 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
 20103d4:	e13fff17 	ldw	r4,-4(fp)
 20103d8:	20103280 	call	2010328 <ACK_single_check>
 20103dc:	e0bffd05 	stb	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
 20103e0:	e0bffd03 	ldbu	r2,-12(fp)
 20103e4:	1080005c 	xori	r2,r2,1
 20103e8:	10803fcc 	andi	r2,r2,255
 20103ec:	10000526 	beq	r2,zero,2010404 <ACK_check+0x50>
 20103f0:	e0bffe17 	ldw	r2,-8(fp)
 20103f4:	10c00044 	addi	r3,r2,1
 20103f8:	e0fffe15 	stw	r3,-8(fp)
 20103fc:	10800290 	cmplti	r2,r2,10
 2010400:	103ff41e 	bne	r2,zero,20103d4 <_gp+0xffff1314>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
 2010404:	e0bffd03 	ldbu	r2,-12(fp)
}
 2010408:	e037883a 	mov	sp,fp
 201040c:	dfc00117 	ldw	ra,4(sp)
 2010410:	df000017 	ldw	fp,0(sp)
 2010414:	dec00204 	addi	sp,sp,8
 2010418:	f800283a 	ret

0201041c <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 201041c:	defff904 	addi	sp,sp,-28
 2010420:	dfc00615 	stw	ra,24(sp)
 2010424:	df000515 	stw	fp,20(sp)
 2010428:	df000504 	addi	fp,sp,20
 201042c:	e13ffc15 	stw	r4,-16(fp)
 2010430:	2807883a 	mov	r3,r5
 2010434:	3005883a 	mov	r2,r6
 2010438:	e1ffff15 	stw	r7,-4(fp)
 201043c:	e0fffd05 	stb	r3,-12(fp)
 2010440:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;

   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
 2010444:	e0bffd03 	ldbu	r2,-12(fp)
 2010448:	100d883a 	mov	r6,r2
 201044c:	014000c4 	movi	r5,3
 2010450:	e13ffc17 	ldw	r4,-16(fp)
 2010454:	201005c0 	call	201005c <Write32_Data>
 2010458:	1080005c 	xori	r2,r2,1
 201045c:	10803fcc 	andi	r2,r2,255
 2010460:	10000526 	beq	r2,zero,2010478 <OC_I2C_Write+0x5c>
       printf("OC_I2C_Write error[0]\r\n");
 2010464:	01008074 	movhi	r4,513
 2010468:	2117c704 	addi	r4,r4,24348
 201046c:	2011d580 	call	2011d58 <puts>
       return FALSE;
 2010470:	0005883a 	mov	r2,zero
 2010474:	00007806 	br	2010658 <OC_I2C_Write+0x23c>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
 2010478:	01802404 	movi	r6,144
 201047c:	01400104 	movi	r5,4
 2010480:	e13ffc17 	ldw	r4,-16(fp)
 2010484:	201005c0 	call	201005c <Write32_Data>
 2010488:	1080005c 	xori	r2,r2,1
 201048c:	10803fcc 	andi	r2,r2,255
 2010490:	10000526 	beq	r2,zero,20104a8 <OC_I2C_Write+0x8c>
       printf("OC_I2C_Write error[1]\r\n");
 2010494:	01008074 	movhi	r4,513
 2010498:	2117cd04 	addi	r4,r4,24372
 201049c:	2011d580 	call	2011d58 <puts>
       return FALSE;
 20104a0:	0005883a 	mov	r2,zero
 20104a4:	00006c06 	br	2010658 <OC_I2C_Write+0x23c>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 20104a8:	e13ffc17 	ldw	r4,-16(fp)
 20104ac:	20103b40 	call	20103b4 <ACK_check>
 20104b0:	1080005c 	xori	r2,r2,1
 20104b4:	10803fcc 	andi	r2,r2,255
 20104b8:	10000526 	beq	r2,zero,20104d0 <OC_I2C_Write+0xb4>
        printf("OC_I2C_Write error[2]\r\n");
 20104bc:	01008074 	movhi	r4,513
 20104c0:	2117d304 	addi	r4,r4,24396
 20104c4:	2011d580 	call	2011d58 <puts>
        return FALSE;
 20104c8:	0005883a 	mov	r2,zero
 20104cc:	00006206 	br	2010658 <OC_I2C_Write+0x23c>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
 20104d0:	e0bffe03 	ldbu	r2,-8(fp)
 20104d4:	100d883a 	mov	r6,r2
 20104d8:	014000c4 	movi	r5,3
 20104dc:	e13ffc17 	ldw	r4,-16(fp)
 20104e0:	201005c0 	call	201005c <Write32_Data>
 20104e4:	1080005c 	xori	r2,r2,1
 20104e8:	10803fcc 	andi	r2,r2,255
 20104ec:	10000526 	beq	r2,zero,2010504 <OC_I2C_Write+0xe8>
       printf("OC_I2C_Write error[3]\r\n");
 20104f0:	01008074 	movhi	r4,513
 20104f4:	2117d904 	addi	r4,r4,24420
 20104f8:	2011d580 	call	2011d58 <puts>
       return FALSE;
 20104fc:	0005883a 	mov	r2,zero
 2010500:	00005506 	br	2010658 <OC_I2C_Write+0x23c>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
 2010504:	01800404 	movi	r6,16
 2010508:	01400104 	movi	r5,4
 201050c:	e13ffc17 	ldw	r4,-16(fp)
 2010510:	201005c0 	call	201005c <Write32_Data>
 2010514:	1080005c 	xori	r2,r2,1
 2010518:	10803fcc 	andi	r2,r2,255
 201051c:	10000526 	beq	r2,zero,2010534 <OC_I2C_Write+0x118>
        printf("OC_I2C_Write error[4]\r\n");
 2010520:	01008074 	movhi	r4,513
 2010524:	2117df04 	addi	r4,r4,24444
 2010528:	2011d580 	call	2011d58 <puts>
        return FALSE;
 201052c:	0005883a 	mov	r2,zero
 2010530:	00004906 	br	2010658 <OC_I2C_Write+0x23c>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2010534:	e13ffc17 	ldw	r4,-16(fp)
 2010538:	20103b40 	call	20103b4 <ACK_check>
 201053c:	1080005c 	xori	r2,r2,1
 2010540:	10803fcc 	andi	r2,r2,255
 2010544:	10000526 	beq	r2,zero,201055c <OC_I2C_Write+0x140>
        printf("OC_I2C_Write error[5]\r\n");
 2010548:	01008074 	movhi	r4,513
 201054c:	2117e504 	addi	r4,r4,24468
 2010550:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010554:	0005883a 	mov	r2,zero
 2010558:	00003f06 	br	2010658 <OC_I2C_Write+0x23c>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
        for( i=nWriteLength-1;i>=0;i--){
 201055c:	e0800217 	ldw	r2,8(fp)
 2010560:	10bfffc4 	addi	r2,r2,-1
 2010564:	e0bffb15 	stw	r2,-20(fp)
 2010568:	00002a06 	br	2010614 <OC_I2C_Write+0x1f8>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 201056c:	e0bffb17 	ldw	r2,-20(fp)
 2010570:	e0ffff17 	ldw	r3,-4(fp)
 2010574:	1885883a 	add	r2,r3,r2
 2010578:	10800003 	ldbu	r2,0(r2)
 201057c:	10803fcc 	andi	r2,r2,255
 2010580:	100d883a 	mov	r6,r2
 2010584:	014000c4 	movi	r5,3
 2010588:	e13ffc17 	ldw	r4,-16(fp)
 201058c:	201005c0 	call	201005c <Write32_Data>
 2010590:	1080005c 	xori	r2,r2,1
 2010594:	10803fcc 	andi	r2,r2,255
 2010598:	10000526 	beq	r2,zero,20105b0 <OC_I2C_Write+0x194>
              printf("OC_I2C_Write error[6]\r\n");
 201059c:	01008074 	movhi	r4,513
 20105a0:	2117eb04 	addi	r4,r4,24492
 20105a4:	2011d580 	call	2011d58 <puts>
              return FALSE;
 20105a8:	0005883a 	mov	r2,zero
 20105ac:	00002a06 	br	2010658 <OC_I2C_Write+0x23c>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
 20105b0:	01800404 	movi	r6,16
 20105b4:	01400104 	movi	r5,4
 20105b8:	e13ffc17 	ldw	r4,-16(fp)
 20105bc:	201005c0 	call	201005c <Write32_Data>
 20105c0:	1080005c 	xori	r2,r2,1
 20105c4:	10803fcc 	andi	r2,r2,255
 20105c8:	10000526 	beq	r2,zero,20105e0 <OC_I2C_Write+0x1c4>
             printf("OC_I2C_Write error[7]\r\n");
 20105cc:	01008074 	movhi	r4,513
 20105d0:	2117f104 	addi	r4,r4,24516
 20105d4:	2011d580 	call	2011d58 <puts>
              return FALSE;
 20105d8:	0005883a 	mov	r2,zero
 20105dc:	00001e06 	br	2010658 <OC_I2C_Write+0x23c>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 20105e0:	e13ffc17 	ldw	r4,-16(fp)
 20105e4:	20103b40 	call	20103b4 <ACK_check>
 20105e8:	1080005c 	xori	r2,r2,1
 20105ec:	10803fcc 	andi	r2,r2,255
 20105f0:	10000526 	beq	r2,zero,2010608 <OC_I2C_Write+0x1ec>
              printf("OC_I2C_Write error[8]\r\n");
 20105f4:	01008074 	movhi	r4,513
 20105f8:	2117f704 	addi	r4,r4,24540
 20105fc:	2011d580 	call	2011d58 <puts>
              return FALSE;
 2010600:	0005883a 	mov	r2,zero
 2010604:	00001406 	br	2010658 <OC_I2C_Write+0x23c>
        return FALSE;
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
        for( i=nWriteLength-1;i>=0;i--){
 2010608:	e0bffb17 	ldw	r2,-20(fp)
 201060c:	10bfffc4 	addi	r2,r2,-1
 2010610:	e0bffb15 	stw	r2,-20(fp)
 2010614:	e0bffb17 	ldw	r2,-20(fp)
 2010618:	103fd40e 	bge	r2,zero,201056c <_gp+0xffff14ac>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
 201061c:	01801004 	movi	r6,64
 2010620:	01400104 	movi	r5,4
 2010624:	e13ffc17 	ldw	r4,-16(fp)
 2010628:	201005c0 	call	201005c <Write32_Data>
 201062c:	1080005c 	xori	r2,r2,1
 2010630:	10803fcc 	andi	r2,r2,255
 2010634:	10000526 	beq	r2,zero,201064c <OC_I2C_Write+0x230>
         printf("OC_I2C_Write error[9]\r\n");
 2010638:	01008074 	movhi	r4,513
 201063c:	2117fd04 	addi	r4,r4,24564
 2010640:	2011d580 	call	2011d58 <puts>
         return FALSE;
 2010644:	0005883a 	mov	r2,zero
 2010648:	00000306 	br	2010658 <OC_I2C_Write+0x23c>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 201064c:	01003e84 	movi	r4,250
 2010650:	2014eb80 	call	2014eb8 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
 2010654:	00800044 	movi	r2,1

}
 2010658:	e037883a 	mov	sp,fp
 201065c:	dfc00117 	ldw	ra,4(sp)
 2010660:	df000017 	ldw	fp,0(sp)
 2010664:	dec00204 	addi	sp,sp,8
 2010668:	f800283a 	ret

0201066c <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
 201066c:	defffb04 	addi	sp,sp,-20
 2010670:	dfc00415 	stw	ra,16(sp)
 2010674:	df000315 	stw	fp,12(sp)
 2010678:	df000304 	addi	fp,sp,12
 201067c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 2010680:	01003e84 	movi	r4,250
 2010684:	2014eb80 	call	2014eb8 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
 2010688:	e0bffe04 	addi	r2,fp,-8
 201068c:	100d883a 	mov	r6,r2
 2010690:	01400104 	movi	r5,4
 2010694:	e13fff17 	ldw	r4,-4(fp)
 2010698:	20100b40 	call	20100b4 <Read32_Data>
 201069c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess){
 20106a0:	e0bffd03 	ldbu	r2,-12(fp)
 20106a4:	10000426 	beq	r2,zero,20106b8 <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
 20106a8:	e0bffe17 	ldw	r2,-8(fp)
 20106ac:	1080008c 	andi	r2,r2,2
 20106b0:	10000126 	beq	r2,zero,20106b8 <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
 20106b4:	e03ffd05 	stb	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
 20106b8:	e0bffd03 	ldbu	r2,-12(fp)

}
 20106bc:	e037883a 	mov	sp,fp
 20106c0:	dfc00117 	ldw	ra,4(sp)
 20106c4:	df000017 	ldw	fp,0(sp)
 20106c8:	dec00204 	addi	sp,sp,8
 20106cc:	f800283a 	ret

020106d0 <OC_I2C_Read>:

bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 20106d0:	defff804 	addi	sp,sp,-32
 20106d4:	dfc00715 	stw	ra,28(sp)
 20106d8:	df000615 	stw	fp,24(sp)
 20106dc:	df000604 	addi	fp,sp,24
 20106e0:	e13ffc15 	stw	r4,-16(fp)
 20106e4:	2807883a 	mov	r3,r5
 20106e8:	3005883a 	mov	r2,r6
 20106ec:	e1ffff15 	stw	r7,-4(fp)
 20106f0:	e0fffd05 	stb	r3,-12(fp)
 20106f4:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 20106f8:	e0bffc17 	ldw	r2,-16(fp)
 20106fc:	10800304 	addi	r2,r2,12
 2010700:	1007883a 	mov	r3,r2
 2010704:	e0bffd03 	ldbu	r2,-12(fp)
 2010708:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 201070c:	e0bffc17 	ldw	r2,-16(fp)
 2010710:	10800404 	addi	r2,r2,16
 2010714:	1007883a 	mov	r3,r2
 2010718:	00802404 	movi	r2,144
 201071c:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 2010720:	e13ffc17 	ldw	r4,-16(fp)
 2010724:	20103b40 	call	20103b4 <ACK_check>
 2010728:	1080005c 	xori	r2,r2,1
 201072c:	10803fcc 	andi	r2,r2,255
 2010730:	10000526 	beq	r2,zero,2010748 <OC_I2C_Read+0x78>
       printf("OC_I2C_Read error[2]\r\n");
 2010734:	01008074 	movhi	r4,513
 2010738:	21180304 	addi	r4,r4,24588
 201073c:	2011d580 	call	2011d58 <puts>
       return FALSE;
 2010740:	0005883a 	mov	r2,zero
 2010744:	00005806 	br	20108a8 <OC_I2C_Read+0x1d8>
   }
   IOWR(i2c_base, 3,sub_address);
 2010748:	e0bffc17 	ldw	r2,-16(fp)
 201074c:	10800304 	addi	r2,r2,12
 2010750:	1007883a 	mov	r3,r2
 2010754:	e0bffe03 	ldbu	r2,-8(fp)
 2010758:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 201075c:	e0bffc17 	ldw	r2,-16(fp)
 2010760:	10800404 	addi	r2,r2,16
 2010764:	1007883a 	mov	r3,r2
 2010768:	00800404 	movi	r2,16
 201076c:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 2010770:	e13ffc17 	ldw	r4,-16(fp)
 2010774:	20103b40 	call	20103b4 <ACK_check>
 2010778:	1080005c 	xori	r2,r2,1
 201077c:	10803fcc 	andi	r2,r2,255
 2010780:	10000526 	beq	r2,zero,2010798 <OC_I2C_Read+0xc8>
        printf("OC_I2C_Read error[5]\r\n");
 2010784:	01008074 	movhi	r4,513
 2010788:	21180904 	addi	r4,r4,24612
 201078c:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010790:	0005883a 	mov	r2,zero
 2010794:	00004406 	br	20108a8 <OC_I2C_Read+0x1d8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
 2010798:	e0bffc17 	ldw	r2,-16(fp)
 201079c:	10800304 	addi	r2,r2,12
 20107a0:	1007883a 	mov	r3,r2
 20107a4:	e0bffd03 	ldbu	r2,-12(fp)
 20107a8:	10800054 	ori	r2,r2,1
 20107ac:	10803fcc 	andi	r2,r2,255
 20107b0:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 20107b4:	e0bffc17 	ldw	r2,-16(fp)
 20107b8:	10800404 	addi	r2,r2,16
 20107bc:	1007883a 	mov	r3,r2
 20107c0:	00802404 	movi	r2,144
 20107c4:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 20107c8:	e13ffc17 	ldw	r4,-16(fp)
 20107cc:	20103b40 	call	20103b4 <ACK_check>
 20107d0:	1080005c 	xori	r2,r2,1
 20107d4:	10803fcc 	andi	r2,r2,255
 20107d8:	10000526 	beq	r2,zero,20107f0 <OC_I2C_Read+0x120>
        printf("OC_I2C_Read error[8]\r\n");
 20107dc:	01008074 	movhi	r4,513
 20107e0:	21180f04 	addi	r4,r4,24636
 20107e4:	2011d580 	call	2011d58 <puts>
        return FALSE;
 20107e8:	0005883a 	mov	r2,zero
 20107ec:	00002e06 	br	20108a8 <OC_I2C_Read+0x1d8>
    }

    for(i=0;i<nReadLength;i++){
 20107f0:	e03ffa15 	stw	zero,-24(fp)
 20107f4:	00002106 	br	201087c <OC_I2C_Read+0x1ac>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 20107f8:	e0bffc17 	ldw	r2,-16(fp)
 20107fc:	10800404 	addi	r2,r2,16
 2010800:	1009883a 	mov	r4,r2
 2010804:	e0bffa17 	ldw	r2,-24(fp)
 2010808:	10c00044 	addi	r3,r2,1
 201080c:	e0800217 	ldw	r2,8(fp)
 2010810:	1880021e 	bne	r3,r2,201081c <OC_I2C_Read+0x14c>
 2010814:	00800a04 	movi	r2,40
 2010818:	00000106 	br	2010820 <OC_I2C_Read+0x150>
 201081c:	00800804 	movi	r2,32
 2010820:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 2010824:	e13ffc17 	ldw	r4,-16(fp)
 2010828:	201066c0 	call	201066c <ACK_judge_for_read>
 201082c:	1080005c 	xori	r2,r2,1
 2010830:	10803fcc 	andi	r2,r2,255
 2010834:	10000526 	beq	r2,zero,201084c <OC_I2C_Read+0x17c>
            printf("OC_I2C_Read error[10]\r\n");
 2010838:	01008074 	movhi	r4,513
 201083c:	21181504 	addi	r4,r4,24660
 2010840:	2011d580 	call	2011d58 <puts>
            return FALSE;
 2010844:	0005883a 	mov	r2,zero
 2010848:	00001706 	br	20108a8 <OC_I2C_Read+0x1d8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 201084c:	e0bffc17 	ldw	r2,-16(fp)
 2010850:	10800304 	addi	r2,r2,12
 2010854:	10800037 	ldwio	r2,0(r2)
 2010858:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 201085c:	e0bffa17 	ldw	r2,-24(fp)
 2010860:	e0ffff17 	ldw	r3,-4(fp)
 2010864:	1885883a 	add	r2,r3,r2
 2010868:	e0fffb17 	ldw	r3,-20(fp)
 201086c:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 2010870:	e0bffa17 	ldw	r2,-24(fp)
 2010874:	10800044 	addi	r2,r2,1
 2010878:	e0bffa15 	stw	r2,-24(fp)
 201087c:	e0fffa17 	ldw	r3,-24(fp)
 2010880:	e0800217 	ldw	r2,8(fp)
 2010884:	18bfdc16 	blt	r3,r2,20107f8 <_gp+0xffff1738>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 2010888:	e0bffc17 	ldw	r2,-16(fp)
 201088c:	10800404 	addi	r2,r2,16
 2010890:	1007883a 	mov	r3,r2
 2010894:	00801004 	movi	r2,64
 2010898:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 201089c:	01003e84 	movi	r4,250
 20108a0:	2014eb80 	call	2014eb8 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 20108a4:	00800044 	movi	r2,1

}
 20108a8:	e037883a 	mov	sp,fp
 20108ac:	dfc00117 	ldw	ra,4(sp)
 20108b0:	df000017 	ldw	fp,0(sp)
 20108b4:	dec00204 	addi	sp,sp,8
 20108b8:	f800283a 	ret

020108bc <OC_I2C_Read_Continue>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 20108bc:	defff804 	addi	sp,sp,-32
 20108c0:	dfc00715 	stw	ra,28(sp)
 20108c4:	df000615 	stw	fp,24(sp)
 20108c8:	df000604 	addi	fp,sp,24
 20108cc:	e13ffc15 	stw	r4,-16(fp)
 20108d0:	2805883a 	mov	r2,r5
 20108d4:	e1bffe15 	stw	r6,-8(fp)
 20108d8:	e1ffff15 	stw	r7,-4(fp)
 20108dc:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 20108e0:	e0bffc17 	ldw	r2,-16(fp)
 20108e4:	10800304 	addi	r2,r2,12
 20108e8:	1007883a 	mov	r3,r2
 20108ec:	e0bffd03 	ldbu	r2,-12(fp)
 20108f0:	10800054 	ori	r2,r2,1
 20108f4:	10803fcc 	andi	r2,r2,255
 20108f8:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 20108fc:	e0bffc17 	ldw	r2,-16(fp)
 2010900:	10800404 	addi	r2,r2,16
 2010904:	1007883a 	mov	r3,r2
 2010908:	00802404 	movi	r2,144
 201090c:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 2010910:	e13ffc17 	ldw	r4,-16(fp)
 2010914:	20103b40 	call	20103b4 <ACK_check>
 2010918:	1080005c 	xori	r2,r2,1
 201091c:	10803fcc 	andi	r2,r2,255
 2010920:	10000526 	beq	r2,zero,2010938 <OC_I2C_Read_Continue+0x7c>
        printf("OC_I2C_Read error[8]\r\n");
 2010924:	01008074 	movhi	r4,513
 2010928:	21180f04 	addi	r4,r4,24636
 201092c:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010930:	0005883a 	mov	r2,zero
 2010934:	00002e06 	br	20109f0 <OC_I2C_Read_Continue+0x134>
    }

    for(i=0;i<nReadLength;i++){
 2010938:	e03ffa15 	stw	zero,-24(fp)
 201093c:	00002106 	br	20109c4 <OC_I2C_Read_Continue+0x108>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 2010940:	e0bffc17 	ldw	r2,-16(fp)
 2010944:	10800404 	addi	r2,r2,16
 2010948:	1009883a 	mov	r4,r2
 201094c:	e0bffa17 	ldw	r2,-24(fp)
 2010950:	10c00044 	addi	r3,r2,1
 2010954:	e0bfff17 	ldw	r2,-4(fp)
 2010958:	1880021e 	bne	r3,r2,2010964 <OC_I2C_Read_Continue+0xa8>
 201095c:	00800a04 	movi	r2,40
 2010960:	00000106 	br	2010968 <OC_I2C_Read_Continue+0xac>
 2010964:	00800804 	movi	r2,32
 2010968:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 201096c:	e13ffc17 	ldw	r4,-16(fp)
 2010970:	201066c0 	call	201066c <ACK_judge_for_read>
 2010974:	1080005c 	xori	r2,r2,1
 2010978:	10803fcc 	andi	r2,r2,255
 201097c:	10000526 	beq	r2,zero,2010994 <OC_I2C_Read_Continue+0xd8>
            printf("OC_I2C_Read error[10]\r\n");
 2010980:	01008074 	movhi	r4,513
 2010984:	21181504 	addi	r4,r4,24660
 2010988:	2011d580 	call	2011d58 <puts>
            return FALSE;
 201098c:	0005883a 	mov	r2,zero
 2010990:	00001706 	br	20109f0 <OC_I2C_Read_Continue+0x134>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 2010994:	e0bffc17 	ldw	r2,-16(fp)
 2010998:	10800304 	addi	r2,r2,12
 201099c:	10800037 	ldwio	r2,0(r2)
 20109a0:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 20109a4:	e0bffa17 	ldw	r2,-24(fp)
 20109a8:	e0fffe17 	ldw	r3,-8(fp)
 20109ac:	1885883a 	add	r2,r3,r2
 20109b0:	e0fffb17 	ldw	r3,-20(fp)
 20109b4:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 20109b8:	e0bffa17 	ldw	r2,-24(fp)
 20109bc:	10800044 	addi	r2,r2,1
 20109c0:	e0bffa15 	stw	r2,-24(fp)
 20109c4:	e0fffa17 	ldw	r3,-24(fp)
 20109c8:	e0bfff17 	ldw	r2,-4(fp)
 20109cc:	18bfdc16 	blt	r3,r2,2010940 <_gp+0xffff1880>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 20109d0:	e0bffc17 	ldw	r2,-16(fp)
 20109d4:	10800404 	addi	r2,r2,16
 20109d8:	1007883a 	mov	r3,r2
 20109dc:	00801004 	movi	r2,64
 20109e0:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 20109e4:	01003e84 	movi	r4,250
 20109e8:	2014eb80 	call	2014eb8 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 20109ec:	00800044 	movi	r2,1

}
 20109f0:	e037883a 	mov	sp,fp
 20109f4:	dfc00117 	ldw	ra,4(sp)
 20109f8:	df000017 	ldw	fp,0(sp)
 20109fc:	dec00204 	addi	sp,sp,8
 2010a00:	f800283a 	ret

02010a04 <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
 2010a04:	defff804 	addi	sp,sp,-32
 2010a08:	dfc00715 	stw	ra,28(sp)
 2010a0c:	df000615 	stw	fp,24(sp)
 2010a10:	df000604 	addi	fp,sp,24
 2010a14:	e13ffc15 	stw	r4,-16(fp)
 2010a18:	2807883a 	mov	r3,r5
 2010a1c:	3005883a 	mov	r2,r6
 2010a20:	e1ffff15 	stw	r7,-4(fp)
 2010a24:	e0fffd05 	stb	r3,-12(fp)
 2010a28:	e0bffe0d 	sth	r2,-8(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
 2010a2c:	e0bffe0b 	ldhu	r2,-8(fp)
 2010a30:	1004d23a 	srli	r2,r2,8
 2010a34:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
 2010a38:	e0bffe0b 	ldhu	r2,-8(fp)
 2010a3c:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 2010a40:	e0bffd03 	ldbu	r2,-12(fp)
 2010a44:	100d883a 	mov	r6,r2
 2010a48:	014000c4 	movi	r5,3
 2010a4c:	e13ffc17 	ldw	r4,-16(fp)
 2010a50:	201005c0 	call	201005c <Write32_Data>
 2010a54:	1080005c 	xori	r2,r2,1
 2010a58:	10803fcc 	andi	r2,r2,255
 2010a5c:	10000226 	beq	r2,zero,2010a68 <OC_I2CL_Write+0x64>
       return FALSE;
 2010a60:	0005883a 	mov	r2,zero
 2010a64:	00007e06 	br	2010c60 <OC_I2CL_Write+0x25c>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
 2010a68:	01802404 	movi	r6,144
 2010a6c:	01400104 	movi	r5,4
 2010a70:	e13ffc17 	ldw	r4,-16(fp)
 2010a74:	201005c0 	call	201005c <Write32_Data>
 2010a78:	1080005c 	xori	r2,r2,1
 2010a7c:	10803fcc 	andi	r2,r2,255
 2010a80:	10000226 	beq	r2,zero,2010a8c <OC_I2CL_Write+0x88>
       return FALSE;
 2010a84:	0005883a 	mov	r2,zero
 2010a88:	00007506 	br	2010c60 <OC_I2CL_Write+0x25c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2010a8c:	e13ffc17 	ldw	r4,-16(fp)
 2010a90:	20103b40 	call	20103b4 <ACK_check>
 2010a94:	1080005c 	xori	r2,r2,1
 2010a98:	10803fcc 	andi	r2,r2,255
 2010a9c:	10000526 	beq	r2,zero,2010ab4 <OC_I2CL_Write+0xb0>
        printf("OC_I2CL_Write error[0]\r\n");
 2010aa0:	01008074 	movhi	r4,513
 2010aa4:	21181b04 	addi	r4,r4,24684
 2010aa8:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010aac:	0005883a 	mov	r2,zero
 2010ab0:	00006b06 	br	2010c60 <OC_I2CL_Write+0x25c>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 2010ab4:	e0bffb03 	ldbu	r2,-20(fp)
 2010ab8:	100d883a 	mov	r6,r2
 2010abc:	014000c4 	movi	r5,3
 2010ac0:	e13ffc17 	ldw	r4,-16(fp)
 2010ac4:	201005c0 	call	201005c <Write32_Data>
 2010ac8:	1080005c 	xori	r2,r2,1
 2010acc:	10803fcc 	andi	r2,r2,255
 2010ad0:	10000226 	beq	r2,zero,2010adc <OC_I2CL_Write+0xd8>
       return FALSE;
 2010ad4:	0005883a 	mov	r2,zero
 2010ad8:	00006106 	br	2010c60 <OC_I2CL_Write+0x25c>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 2010adc:	01800404 	movi	r6,16
 2010ae0:	01400104 	movi	r5,4
 2010ae4:	e13ffc17 	ldw	r4,-16(fp)
 2010ae8:	201005c0 	call	201005c <Write32_Data>
 2010aec:	1080005c 	xori	r2,r2,1
 2010af0:	10803fcc 	andi	r2,r2,255
 2010af4:	10000226 	beq	r2,zero,2010b00 <OC_I2CL_Write+0xfc>
        return FALSE;
 2010af8:	0005883a 	mov	r2,zero
 2010afc:	00005806 	br	2010c60 <OC_I2CL_Write+0x25c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2010b00:	e13ffc17 	ldw	r4,-16(fp)
 2010b04:	20103b40 	call	20103b4 <ACK_check>
 2010b08:	1080005c 	xori	r2,r2,1
 2010b0c:	10803fcc 	andi	r2,r2,255
 2010b10:	10000526 	beq	r2,zero,2010b28 <OC_I2CL_Write+0x124>
        printf("OC_I2CL_Write error[1]\r\n");
 2010b14:	01008074 	movhi	r4,513
 2010b18:	21182104 	addi	r4,r4,24708
 2010b1c:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010b20:	0005883a 	mov	r2,zero
 2010b24:	00004e06 	br	2010c60 <OC_I2CL_Write+0x25c>
    }
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
 2010b28:	e0bffb43 	ldbu	r2,-19(fp)
 2010b2c:	100d883a 	mov	r6,r2
 2010b30:	014000c4 	movi	r5,3
 2010b34:	e13ffc17 	ldw	r4,-16(fp)
 2010b38:	201005c0 	call	201005c <Write32_Data>
 2010b3c:	1080005c 	xori	r2,r2,1
 2010b40:	10803fcc 	andi	r2,r2,255
 2010b44:	10000226 	beq	r2,zero,2010b50 <OC_I2CL_Write+0x14c>
       return FALSE;
 2010b48:	0005883a 	mov	r2,zero
 2010b4c:	00004406 	br	2010c60 <OC_I2CL_Write+0x25c>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
 2010b50:	01800404 	movi	r6,16
 2010b54:	01400104 	movi	r5,4
 2010b58:	e13ffc17 	ldw	r4,-16(fp)
 2010b5c:	201005c0 	call	201005c <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2010b60:	e13ffc17 	ldw	r4,-16(fp)
 2010b64:	20103b40 	call	20103b4 <ACK_check>
 2010b68:	1080005c 	xori	r2,r2,1
 2010b6c:	10803fcc 	andi	r2,r2,255
 2010b70:	10000526 	beq	r2,zero,2010b88 <OC_I2CL_Write+0x184>
        printf("OC_I2CL_Write error[2]\r\n");
 2010b74:	01008074 	movhi	r4,513
 2010b78:	21182704 	addi	r4,r4,24732
 2010b7c:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010b80:	0005883a 	mov	r2,zero
 2010b84:	00003606 	br	2010c60 <OC_I2CL_Write+0x25c>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=nWriteLength-1;i>=0;i--){
 2010b88:	e0800217 	ldw	r2,8(fp)
 2010b8c:	10bfffc4 	addi	r2,r2,-1
 2010b90:	e0bffa15 	stw	r2,-24(fp)
 2010b94:	00002406 	br	2010c28 <OC_I2CL_Write+0x224>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 2010b98:	e0bffa17 	ldw	r2,-24(fp)
 2010b9c:	e0ffff17 	ldw	r3,-4(fp)
 2010ba0:	1885883a 	add	r2,r3,r2
 2010ba4:	10800003 	ldbu	r2,0(r2)
 2010ba8:	10803fcc 	andi	r2,r2,255
 2010bac:	100d883a 	mov	r6,r2
 2010bb0:	014000c4 	movi	r5,3
 2010bb4:	e13ffc17 	ldw	r4,-16(fp)
 2010bb8:	201005c0 	call	201005c <Write32_Data>
 2010bbc:	1080005c 	xori	r2,r2,1
 2010bc0:	10803fcc 	andi	r2,r2,255
 2010bc4:	10000226 	beq	r2,zero,2010bd0 <OC_I2CL_Write+0x1cc>
            return FALSE;
 2010bc8:	0005883a 	mov	r2,zero
 2010bcc:	00002406 	br	2010c60 <OC_I2CL_Write+0x25c>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
 2010bd0:	01800404 	movi	r6,16
 2010bd4:	01400104 	movi	r5,4
 2010bd8:	e13ffc17 	ldw	r4,-16(fp)
 2010bdc:	201005c0 	call	201005c <Write32_Data>
 2010be0:	1080005c 	xori	r2,r2,1
 2010be4:	10803fcc 	andi	r2,r2,255
 2010be8:	10000226 	beq	r2,zero,2010bf4 <OC_I2CL_Write+0x1f0>
            return FALSE;
 2010bec:	0005883a 	mov	r2,zero
 2010bf0:	00001b06 	br	2010c60 <OC_I2CL_Write+0x25c>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
 2010bf4:	e13ffc17 	ldw	r4,-16(fp)
 2010bf8:	20103b40 	call	20103b4 <ACK_check>
 2010bfc:	1080005c 	xori	r2,r2,1
 2010c00:	10803fcc 	andi	r2,r2,255
 2010c04:	10000526 	beq	r2,zero,2010c1c <OC_I2CL_Write+0x218>
             printf("OC_I2CL_Write error[3]\r\n");
 2010c08:	01008074 	movhi	r4,513
 2010c0c:	21182d04 	addi	r4,r4,24756
 2010c10:	2011d580 	call	2011d58 <puts>
             return FALSE;
 2010c14:	0005883a 	mov	r2,zero
 2010c18:	00001106 	br	2010c60 <OC_I2CL_Write+0x25c>
        return FALSE;
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=nWriteLength-1;i>=0;i--){
 2010c1c:	e0bffa17 	ldw	r2,-24(fp)
 2010c20:	10bfffc4 	addi	r2,r2,-1
 2010c24:	e0bffa15 	stw	r2,-24(fp)
 2010c28:	e0bffa17 	ldw	r2,-24(fp)
 2010c2c:	103fda0e 	bge	r2,zero,2010b98 <_gp+0xffff1ad8>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
 2010c30:	01801004 	movi	r6,64
 2010c34:	01400104 	movi	r5,4
 2010c38:	e13ffc17 	ldw	r4,-16(fp)
 2010c3c:	201005c0 	call	201005c <Write32_Data>
 2010c40:	1080005c 	xori	r2,r2,1
 2010c44:	10803fcc 	andi	r2,r2,255
 2010c48:	10000226 	beq	r2,zero,2010c54 <OC_I2CL_Write+0x250>
         return FALSE;
 2010c4c:	0005883a 	mov	r2,zero
 2010c50:	00000306 	br	2010c60 <OC_I2CL_Write+0x25c>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 2010c54:	01003e84 	movi	r4,250
 2010c58:	2014eb80 	call	2014eb8 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
 2010c5c:	00800044 	movi	r2,1
}
 2010c60:	e037883a 	mov	sp,fp
 2010c64:	dfc00117 	ldw	ra,4(sp)
 2010c68:	df000017 	ldw	fp,0(sp)
 2010c6c:	dec00204 	addi	sp,sp,8
 2010c70:	f800283a 	ret

02010c74 <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
 2010c74:	defff704 	addi	sp,sp,-36
 2010c78:	dfc00815 	stw	ra,32(sp)
 2010c7c:	df000715 	stw	fp,28(sp)
 2010c80:	df000704 	addi	fp,sp,28
 2010c84:	e13ffc15 	stw	r4,-16(fp)
 2010c88:	2807883a 	mov	r3,r5
 2010c8c:	3005883a 	mov	r2,r6
 2010c90:	e1ffff15 	stw	r7,-4(fp)
 2010c94:	e0fffd05 	stb	r3,-12(fp)
 2010c98:	e0bffe0d 	sth	r2,-8(fp)
    alt_32 Data32;// = 0x0;
    int i;

    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
 2010c9c:	e0bffe0b 	ldhu	r2,-8(fp)
 2010ca0:	1004d23a 	srli	r2,r2,8
 2010ca4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
 2010ca8:	e0bffe0b 	ldhu	r2,-8(fp)
 2010cac:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 2010cb0:	e0bffd03 	ldbu	r2,-12(fp)
 2010cb4:	100d883a 	mov	r6,r2
 2010cb8:	014000c4 	movi	r5,3
 2010cbc:	e13ffc17 	ldw	r4,-16(fp)
 2010cc0:	201005c0 	call	201005c <Write32_Data>
 2010cc4:	1080005c 	xori	r2,r2,1
 2010cc8:	10803fcc 	andi	r2,r2,255
 2010ccc:	10000226 	beq	r2,zero,2010cd8 <OC_I2CL_Read+0x64>
       return FALSE;
 2010cd0:	0005883a 	mov	r2,zero
 2010cd4:	00009e06 	br	2010f50 <OC_I2CL_Read+0x2dc>

   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
 2010cd8:	01802404 	movi	r6,144
 2010cdc:	01400104 	movi	r5,4
 2010ce0:	e13ffc17 	ldw	r4,-16(fp)
 2010ce4:	201005c0 	call	201005c <Write32_Data>
 2010ce8:	1080005c 	xori	r2,r2,1
 2010cec:	10803fcc 	andi	r2,r2,255
 2010cf0:	10000226 	beq	r2,zero,2010cfc <OC_I2CL_Read+0x88>
       return FALSE;
 2010cf4:	0005883a 	mov	r2,zero
 2010cf8:	00009506 	br	2010f50 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2010cfc:	e13ffc17 	ldw	r4,-16(fp)
 2010d00:	20103b40 	call	20103b4 <ACK_check>
 2010d04:	1080005c 	xori	r2,r2,1
 2010d08:	10803fcc 	andi	r2,r2,255
 2010d0c:	10000526 	beq	r2,zero,2010d24 <OC_I2CL_Read+0xb0>
        printf("OC_I2CL_Read error[0]\r\n");
 2010d10:	01008074 	movhi	r4,513
 2010d14:	21183304 	addi	r4,r4,24780
 2010d18:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010d1c:	0005883a 	mov	r2,zero
 2010d20:	00008b06 	br	2010f50 <OC_I2CL_Read+0x2dc>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 2010d24:	e0bffa03 	ldbu	r2,-24(fp)
 2010d28:	100d883a 	mov	r6,r2
 2010d2c:	014000c4 	movi	r5,3
 2010d30:	e13ffc17 	ldw	r4,-16(fp)
 2010d34:	201005c0 	call	201005c <Write32_Data>
 2010d38:	1080005c 	xori	r2,r2,1
 2010d3c:	10803fcc 	andi	r2,r2,255
 2010d40:	10000226 	beq	r2,zero,2010d4c <OC_I2CL_Read+0xd8>
       return FALSE;
 2010d44:	0005883a 	mov	r2,zero
 2010d48:	00008106 	br	2010f50 <OC_I2CL_Read+0x2dc>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 2010d4c:	01800404 	movi	r6,16
 2010d50:	01400104 	movi	r5,4
 2010d54:	e13ffc17 	ldw	r4,-16(fp)
 2010d58:	201005c0 	call	201005c <Write32_Data>
 2010d5c:	1080005c 	xori	r2,r2,1
 2010d60:	10803fcc 	andi	r2,r2,255
 2010d64:	10000226 	beq	r2,zero,2010d70 <OC_I2CL_Read+0xfc>
        return FALSE;
 2010d68:	0005883a 	mov	r2,zero
 2010d6c:	00007806 	br	2010f50 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2010d70:	e13ffc17 	ldw	r4,-16(fp)
 2010d74:	20103b40 	call	20103b4 <ACK_check>
 2010d78:	1080005c 	xori	r2,r2,1
 2010d7c:	10803fcc 	andi	r2,r2,255
 2010d80:	10000526 	beq	r2,zero,2010d98 <OC_I2CL_Read+0x124>
        printf("OC_I2CL_Read error[1]\r\n");
 2010d84:	01008074 	movhi	r4,513
 2010d88:	21183904 	addi	r4,r4,24804
 2010d8c:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010d90:	0005883a 	mov	r2,zero
 2010d94:	00006e06 	br	2010f50 <OC_I2CL_Read+0x2dc>
    }
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
 2010d98:	e0bffa43 	ldbu	r2,-23(fp)
 2010d9c:	100d883a 	mov	r6,r2
 2010da0:	014000c4 	movi	r5,3
 2010da4:	e13ffc17 	ldw	r4,-16(fp)
 2010da8:	201005c0 	call	201005c <Write32_Data>
 2010dac:	1080005c 	xori	r2,r2,1
 2010db0:	10803fcc 	andi	r2,r2,255
 2010db4:	10000226 	beq	r2,zero,2010dc0 <OC_I2CL_Read+0x14c>
       return FALSE;
 2010db8:	0005883a 	mov	r2,zero
 2010dbc:	00006406 	br	2010f50 <OC_I2CL_Read+0x2dc>
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 2010dc0:	01800404 	movi	r6,16
 2010dc4:	01400104 	movi	r5,4
 2010dc8:	e13ffc17 	ldw	r4,-16(fp)
 2010dcc:	201005c0 	call	201005c <Write32_Data>
 2010dd0:	1080005c 	xori	r2,r2,1
 2010dd4:	10803fcc 	andi	r2,r2,255
 2010dd8:	10000226 	beq	r2,zero,2010de4 <OC_I2CL_Read+0x170>
        return FALSE;
 2010ddc:	0005883a 	mov	r2,zero
 2010de0:	00005b06 	br	2010f50 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2010de4:	e13ffc17 	ldw	r4,-16(fp)
 2010de8:	20103b40 	call	20103b4 <ACK_check>
 2010dec:	1080005c 	xori	r2,r2,1
 2010df0:	10803fcc 	andi	r2,r2,255
 2010df4:	10000526 	beq	r2,zero,2010e0c <OC_I2CL_Read+0x198>
        printf("OC_I2CL_Read error[2]\r\n");
 2010df8:	01008074 	movhi	r4,513
 2010dfc:	21183f04 	addi	r4,r4,24828
 2010e00:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010e04:	0005883a 	mov	r2,zero
 2010e08:	00005106 	br	2010f50 <OC_I2CL_Read+0x2dc>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
 2010e0c:	e0bffd03 	ldbu	r2,-12(fp)
 2010e10:	10800054 	ori	r2,r2,1
 2010e14:	10803fcc 	andi	r2,r2,255
 2010e18:	100d883a 	mov	r6,r2
 2010e1c:	014000c4 	movi	r5,3
 2010e20:	e13ffc17 	ldw	r4,-16(fp)
 2010e24:	201005c0 	call	201005c <Write32_Data>
 2010e28:	1080005c 	xori	r2,r2,1
 2010e2c:	10803fcc 	andi	r2,r2,255
 2010e30:	10000226 	beq	r2,zero,2010e3c <OC_I2CL_Read+0x1c8>
         return FALSE;
 2010e34:	0005883a 	mov	r2,zero
 2010e38:	00004506 	br	2010f50 <OC_I2CL_Read+0x2dc>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
 2010e3c:	01802404 	movi	r6,144
 2010e40:	01400104 	movi	r5,4
 2010e44:	e13ffc17 	ldw	r4,-16(fp)
 2010e48:	201005c0 	call	201005c <Write32_Data>
 2010e4c:	1080005c 	xori	r2,r2,1
 2010e50:	10803fcc 	andi	r2,r2,255
 2010e54:	10000226 	beq	r2,zero,2010e60 <OC_I2CL_Read+0x1ec>
         return FALSE;
 2010e58:	0005883a 	mov	r2,zero
 2010e5c:	00003c06 	br	2010f50 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2010e60:	e13ffc17 	ldw	r4,-16(fp)
 2010e64:	20103b40 	call	20103b4 <ACK_check>
 2010e68:	1080005c 	xori	r2,r2,1
 2010e6c:	10803fcc 	andi	r2,r2,255
 2010e70:	10000526 	beq	r2,zero,2010e88 <OC_I2CL_Read+0x214>
        printf("OC_I2CL_Read error[3]\r\n");
 2010e74:	01008074 	movhi	r4,513
 2010e78:	21184504 	addi	r4,r4,24852
 2010e7c:	2011d580 	call	2011d58 <puts>
        return FALSE;
 2010e80:	0005883a 	mov	r2,zero
 2010e84:	00003206 	br	2010f50 <OC_I2CL_Read+0x2dc>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 2010e88:	e03ff915 	stw	zero,-28(fp)
 2010e8c:	00002106 	br	2010f14 <OC_I2CL_Read+0x2a0>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 2010e90:	e0bffc17 	ldw	r2,-16(fp)
 2010e94:	10800404 	addi	r2,r2,16
 2010e98:	1009883a 	mov	r4,r2
 2010e9c:	e0bff917 	ldw	r2,-28(fp)
 2010ea0:	10c00044 	addi	r3,r2,1
 2010ea4:	e0800217 	ldw	r2,8(fp)
 2010ea8:	1880021e 	bne	r3,r2,2010eb4 <OC_I2CL_Read+0x240>
 2010eac:	00800a04 	movi	r2,40
 2010eb0:	00000106 	br	2010eb8 <OC_I2CL_Read+0x244>
 2010eb4:	00800804 	movi	r2,32
 2010eb8:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 2010ebc:	e13ffc17 	ldw	r4,-16(fp)
 2010ec0:	201066c0 	call	201066c <ACK_judge_for_read>
 2010ec4:	1080005c 	xori	r2,r2,1
 2010ec8:	10803fcc 	andi	r2,r2,255
 2010ecc:	10000526 	beq	r2,zero,2010ee4 <OC_I2CL_Read+0x270>
            printf("OC_I2CL_Read error[4]\r\n");
 2010ed0:	01008074 	movhi	r4,513
 2010ed4:	21184b04 	addi	r4,r4,24876
 2010ed8:	2011d580 	call	2011d58 <puts>
            return FALSE;
 2010edc:	0005883a 	mov	r2,zero
 2010ee0:	00001b06 	br	2010f50 <OC_I2CL_Read+0x2dc>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 2010ee4:	e0bffc17 	ldw	r2,-16(fp)
 2010ee8:	10800304 	addi	r2,r2,12
 2010eec:	10800037 	ldwio	r2,0(r2)
 2010ef0:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 2010ef4:	e0bff917 	ldw	r2,-28(fp)
 2010ef8:	e0ffff17 	ldw	r3,-4(fp)
 2010efc:	1885883a 	add	r2,r3,r2
 2010f00:	e0fffb17 	ldw	r3,-20(fp)
 2010f04:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 2010f08:	e0bff917 	ldw	r2,-28(fp)
 2010f0c:	10800044 	addi	r2,r2,1
 2010f10:	e0bff915 	stw	r2,-28(fp)
 2010f14:	e0fff917 	ldw	r3,-28(fp)
 2010f18:	e0800217 	ldw	r2,8(fp)
 2010f1c:	18bfdc16 	blt	r3,r2,2010e90 <_gp+0xffff1dd0>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
 2010f20:	01801004 	movi	r6,64
 2010f24:	01400104 	movi	r5,4
 2010f28:	e13ffc17 	ldw	r4,-16(fp)
 2010f2c:	201005c0 	call	201005c <Write32_Data>
 2010f30:	1080005c 	xori	r2,r2,1
 2010f34:	10803fcc 	andi	r2,r2,255
 2010f38:	10000226 	beq	r2,zero,2010f44 <OC_I2CL_Read+0x2d0>
       return FALSE;
 2010f3c:	0005883a 	mov	r2,zero
 2010f40:	00000306 	br	2010f50 <OC_I2CL_Read+0x2dc>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
 2010f44:	01003e84 	movi	r4,250
 2010f48:	2014eb80 	call	2014eb8 <usleep>

   return TRUE;
 2010f4c:	00800044 	movi	r2,1

}
 2010f50:	e037883a 	mov	sp,fp
 2010f54:	dfc00117 	ldw	ra,4(sp)
 2010f58:	df000017 	ldw	fp,0(sp)
 2010f5c:	dec00204 	addi	sp,sp,8
 2010f60:	f800283a 	ret

02010f64 <ReverseUInt16>:
// Author: Leonardo Tazzini

#include "bit_helper.h"

uint16_t ReverseUInt16(uint16_t x)
{
 2010f64:	defffd04 	addi	sp,sp,-12
 2010f68:	df000215 	stw	fp,8(sp)
 2010f6c:	df000204 	addi	fp,sp,8
 2010f70:	2005883a 	mov	r2,r4
 2010f74:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t y;
	y = (x >> 8) & 0x00ff;
 2010f78:	e0bfff0b 	ldhu	r2,-4(fp)
 2010f7c:	1004d23a 	srli	r2,r2,8
 2010f80:	e0bffe0d 	sth	r2,-8(fp)
	y |= (x << 8) & 0xff00;
 2010f84:	e0bfff0b 	ldhu	r2,-4(fp)
 2010f88:	1004923a 	slli	r2,r2,8
 2010f8c:	1007883a 	mov	r3,r2
 2010f90:	e0bffe0b 	ldhu	r2,-8(fp)
 2010f94:	1884b03a 	or	r2,r3,r2
 2010f98:	e0bffe0d 	sth	r2,-8(fp)
	return y;
 2010f9c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 2010fa0:	e037883a 	mov	sp,fp
 2010fa4:	df000017 	ldw	fp,0(sp)
 2010fa8:	dec00104 	addi	sp,sp,4
 2010fac:	f800283a 	ret

02010fb0 <config>:

#define RESPONSE_OK	 	0xAA

// Setup MIPI Bridge and Camera
void config()
{
 2010fb0:	defffe04 	addi	sp,sp,-8
 2010fb4:	dfc00115 	stw	ra,4(sp)
 2010fb8:	df000015 	stw	fp,0(sp)
 2010fbc:	d839883a 	mov	fp,sp
	//See OV8865 pag. 30/34 for power down sequence details
	// MIPI_PWDN_N = OV8865 PWDNB
	// MIPI_RESET_N = TC358748XBG RESX
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0x00);
 2010fc0:	0007883a 	mov	r3,zero
 2010fc4:	008080b4 	movhi	r2,514
 2010fc8:	10851804 	addi	r2,r2,5216
 2010fcc:	10c00035 	stwio	r3,0(r2)
	IOWR(MIPI_RESET_N_BASE, 0x00, 0x00);
 2010fd0:	0007883a 	mov	r3,zero
 2010fd4:	008080b4 	movhi	r2,514
 2010fd8:	10851404 	addi	r2,r2,5200
 2010fdc:	10c00035 	stwio	r3,0(r2)
	usleep(2 * 1000);
 2010fe0:	0101f404 	movi	r4,2000
 2010fe4:	2014eb80 	call	2014eb8 <usleep>
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0xFF);
 2010fe8:	00c03fc4 	movi	r3,255
 2010fec:	008080b4 	movhi	r2,514
 2010ff0:	10851804 	addi	r2,r2,5216
 2010ff4:	10c00035 	stwio	r3,0(r2)
	usleep(2 * 1000);
 2010ff8:	0101f404 	movi	r4,2000
 2010ffc:	2014eb80 	call	2014eb8 <usleep>
	IOWR(MIPI_RESET_N_BASE, 0x00, 0xFF);
 2011000:	00c03fc4 	movi	r3,255
 2011004:	008080b4 	movhi	r2,514
 2011008:	10851404 	addi	r2,r2,5200
 201100c:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
 2011010:	0101f404 	movi	r4,2000
 2011014:	2014eb80 	call	2014eb8 <usleep>

	oc_i2c_init_ex(I2C_OPENCORES_MIPI_BASE, ALT_CPU_FREQ, I2C_SPEED);
 2011018:	018001b4 	movhi	r6,6
 201101c:	3186a004 	addi	r6,r6,6784
 2011020:	01417db4 	movhi	r5,1526
 2011024:	29784004 	addi	r5,r5,-7936
 2011028:	010080b4 	movhi	r4,514
 201102c:	21050804 	addi	r4,r4,5152
 2011030:	20101640 	call	2010164 <oc_i2c_init_ex>
	mipi_bridge_init();
 2011034:	20113d40 	call	20113d4 <mipi_bridge_init>
	usleep(500*1000);
 2011038:	01000234 	movhi	r4,8
 201103c:	21284804 	addi	r4,r4,-24288
 2011040:	2014eb80 	call	2014eb8 <usleep>
	oc_i2c_uninit(I2C_OPENCORES_MIPI_BASE);
 2011044:	010080b4 	movhi	r4,514
 2011048:	21050804 	addi	r4,r4,5152
 201104c:	20102a40 	call	20102a4 <oc_i2c_uninit>
	oc_i2c_init_ex(I2C_OPENCORES_CAMERA_BASE, ALT_CPU_FREQ, I2C_SPEED);
 2011050:	018001b4 	movhi	r6,6
 2011054:	3186a004 	addi	r6,r6,6784
 2011058:	01417db4 	movhi	r5,1526
 201105c:	29784004 	addi	r5,r5,-7936
 2011060:	010080b4 	movhi	r4,514
 2011064:	21050004 	addi	r4,r4,5120
 2011068:	20101640 	call	2010164 <oc_i2c_init_ex>
	mipi_camera_init();
 201106c:	20116fc0 	call	20116fc <mipi_camera_init>
	usleep(1000);
 2011070:	0100fa04 	movi	r4,1000
 2011074:	2014eb80 	call	2014eb8 <usleep>
	oc_i2c_uninit(I2C_OPENCORES_CAMERA_BASE);
 2011078:	010080b4 	movhi	r4,514
 201107c:	21050004 	addi	r4,r4,5120
 2011080:	20102a40 	call	20102a4 <oc_i2c_uninit>
}
 2011084:	0001883a 	nop
 2011088:	e037883a 	mov	sp,fp
 201108c:	dfc00117 	ldw	ra,4(sp)
 2011090:	df000017 	ldw	fp,0(sp)
 2011094:	dec00204 	addi	sp,sp,8
 2011098:	f800283a 	ret

0201109c <WaitFrame>:

void WaitFrame()
{
 201109c:	defffd04 	addi	sp,sp,-12
 20110a0:	dfc00215 	stw	ra,8(sp)
 20110a4:	df000115 	stw	fp,4(sp)
 20110a8:	df000104 	addi	fp,sp,4
	// Wait until frame is captured
	uint32_t status = IORD(MIPI_CONTROLLER_0_BASE, 0x00);
 20110ac:	008080b4 	movhi	r2,514
 20110b0:	10840004 	addi	r2,r2,4096
 20110b4:	10800037 	ldwio	r2,0(r2)
 20110b8:	e0bfff15 	stw	r2,-4(fp)
	while((status  & 0x02)== 0x00)
 20110bc:	00000706 	br	20110dc <WaitFrame+0x40>
	{
		usleep(1000 * 5);
 20110c0:	0104e204 	movi	r4,5000
 20110c4:	2014eb80 	call	2014eb8 <usleep>
		status = (IORD(MIPI_CONTROLLER_0_BASE, 0x00) & 0x02);
 20110c8:	008080b4 	movhi	r2,514
 20110cc:	10840004 	addi	r2,r2,4096
 20110d0:	10800037 	ldwio	r2,0(r2)
 20110d4:	1080008c 	andi	r2,r2,2
 20110d8:	e0bfff15 	stw	r2,-4(fp)

void WaitFrame()
{
	// Wait until frame is captured
	uint32_t status = IORD(MIPI_CONTROLLER_0_BASE, 0x00);
	while((status  & 0x02)== 0x00)
 20110dc:	e0bfff17 	ldw	r2,-4(fp)
 20110e0:	1080008c 	andi	r2,r2,2
 20110e4:	103ff626 	beq	r2,zero,20110c0 <_gp+0xffff2000>
	{
		usleep(1000 * 5);
		status = (IORD(MIPI_CONTROLLER_0_BASE, 0x00) & 0x02);
	}
}
 20110e8:	0001883a 	nop
 20110ec:	e037883a 	mov	sp,fp
 20110f0:	dfc00117 	ldw	ra,4(sp)
 20110f4:	df000017 	ldw	fp,0(sp)
 20110f8:	dec00204 	addi	sp,sp,8
 20110fc:	f800283a 	ret

02011100 <main>:

int main()
{
 2011100:	defff904 	addi	sp,sp,-28
 2011104:	dfc00615 	stw	ra,24(sp)
 2011108:	df000515 	stw	fp,20(sp)
 201110c:	df000504 	addi	fp,sp,20
	usleep(1000 * 10);
 2011110:	0109c404 	movi	r4,10000
 2011114:	2014eb80 	call	2014eb8 <usleep>

	config();
 2011118:	2010fb00 	call	2010fb0 <config>

	// wait for one frame to adjust blc
	usleep(1000 * 500);
 201111c:	01000234 	movhi	r4,8
 2011120:	21284804 	addi	r4,r4,-24288
 2011124:	2014eb80 	call	2014eb8 <usleep>

	IOWR(LED_BASE, 0x00, 0x01);
 2011128:	00c00044 	movi	r3,1
 201112c:	008080b4 	movhi	r2,514
 2011130:	10851004 	addi	r2,r2,5184
 2011134:	10c00035 	stwio	r3,0(r2)
	uint16_t img_width = 3264;
 2011138:	00833004 	movi	r2,3264
 201113c:	e0bffb0d 	sth	r2,-20(fp)
	uint16_t img_height = 2448;
 2011140:	00826404 	movi	r2,2448
 2011144:	e0bffb8d 	sth	r2,-18(fp)

	uint16_t addr;
	uint8_t reg;

	oc_i2c_init_ex(I2C_OPENCORES_CAMERA_BASE, ALT_CPU_FREQ, I2C_SPEED);
 2011148:	018001b4 	movhi	r6,6
 201114c:	3186a004 	addi	r6,r6,6784
 2011150:	01417db4 	movhi	r5,1526
 2011154:	29784004 	addi	r5,r5,-7936
 2011158:	010080b4 	movhi	r4,514
 201115c:	21050004 	addi	r4,r4,5120
 2011160:	20101640 	call	2010164 <oc_i2c_init_ex>
	while(1){
		byte cmd = readByte();
 2011164:	2011a580 	call	2011a58 <readByte>
 2011168:	e0bffd05 	stb	r2,-12(fp)
		switch(cmd)
 201116c:	e0bffd03 	ldbu	r2,-12(fp)
 2011170:	10c00228 	cmpgeui	r3,r2,8
 2011174:	183ffb1e 	bne	r3,zero,2011164 <_gp+0xffff20a4>
 2011178:	100690ba 	slli	r3,r2,2
 201117c:	00808074 	movhi	r2,513
 2011180:	10846404 	addi	r2,r2,4496
 2011184:	1885883a 	add	r2,r3,r2
 2011188:	10800017 	ldw	r2,0(r2)
 201118c:	1000683a 	jmp	r2
 2011190:	02011164 	muli	r8,zero,1093
 2011194:	020111b0 	cmpltui	r8,zero,1094
 2011198:	020111dc 	xori	r8,zero,1095
 201119c:	02011208 	cmpgei	r8,zero,1096
 20111a0:	02011250 	cmplti	r8,zero,1097
 20111a4:	02011260 	cmpeqi	r8,zero,1097
 20111a8:	0201127c 	xorhi	r8,zero,1097
 20111ac:	0201122c 	andhi	r8,zero,1096
		{
			case CMD_RD_REG:
				addr = readUInt16();
 20111b0:	20118ec0 	call	20118ec <readUInt16>
 20111b4:	e0bfff0d 	sth	r2,-4(fp)
				reg = mipi_camera_reg_read(addr);
 20111b8:	e0bfff0b 	ldhu	r2,-4(fp)
 20111bc:	10bfffcc 	andi	r2,r2,65535
 20111c0:	1009883a 	mov	r4,r2
 20111c4:	20114cc0 	call	20114cc <mipi_camera_reg_read>
 20111c8:	e0bffd45 	stb	r2,-11(fp)
				writeByte(reg);
 20111cc:	e0bffd43 	ldbu	r2,-11(fp)
 20111d0:	1009883a 	mov	r4,r2
 20111d4:	2011a800 	call	2011a80 <writeByte>
				break;
 20111d8:	00004d06 	br	2011310 <main+0x210>
			case CMD_WR_REG:
				addr = readUInt16();
 20111dc:	20118ec0 	call	20118ec <readUInt16>
 20111e0:	e0bfff0d 	sth	r2,-4(fp)
				reg = readByte();
 20111e4:	2011a580 	call	2011a58 <readByte>
 20111e8:	e0bffd45 	stb	r2,-11(fp)
				mipi_camera_reg_write(addr, reg);
 20111ec:	e0bfff0b 	ldhu	r2,-4(fp)
 20111f0:	10bfffcc 	andi	r2,r2,65535
 20111f4:	e0fffd43 	ldbu	r3,-11(fp)
 20111f8:	180b883a 	mov	r5,r3
 20111fc:	1009883a 	mov	r4,r2
 2011200:	20115200 	call	2011520 <mipi_camera_reg_write>
				break;
 2011204:	00004206 	br	2011310 <main+0x210>
			case CMD_WR_FOCUS:
				addr = readUInt16();
 2011208:	20118ec0 	call	20118ec <readUInt16>
 201120c:	e0bfff0d 	sth	r2,-4(fp)
				mipi_camera_reg_write_VCM149C(addr);
 2011210:	e0bfff0b 	ldhu	r2,-4(fp)
 2011214:	10bfffcc 	andi	r2,r2,65535
 2011218:	1009883a 	mov	r4,r2
 201121c:	20118480 	call	2011848 <mipi_camera_reg_write_VCM149C>
				writeByte(RESPONSE_OK);
 2011220:	01002a84 	movi	r4,170
 2011224:	2011a800 	call	2011a80 <writeByte>
				break;
 2011228:	00003906 	br	2011310 <main+0x210>
			case CMD_RD_FOCUS:
				addr = mipi_camera_reg_read_VCM149C();
 201122c:	20117fc0 	call	20117fc <mipi_camera_reg_read_VCM149C>
 2011230:	e0bfff0d 	sth	r2,-4(fp)
				writeBytes((byte*)&addr, 2);
 2011234:	e0bfff04 	addi	r2,fp,-4
 2011238:	01400084 	movi	r5,2
 201123c:	1009883a 	mov	r4,r2
 2011240:	20119ec0 	call	20119ec <writeBytes>
				writeByte(RESPONSE_OK);
 2011244:	01002a84 	movi	r4,170
 2011248:	2011a800 	call	2011a80 <writeByte>
				break;
 201124c:	00003006 	br	2011310 <main+0x210>
			case CMD_RESET_REG:
				mipi_camera_init();
 2011250:	20116fc0 	call	20116fc <mipi_camera_init>
				writeByte(RESPONSE_OK);
 2011254:	01002a84 	movi	r4,170
 2011258:	2011a800 	call	2011a80 <writeByte>
				break;
 201125c:	00002c06 	br	2011310 <main+0x210>
			case CMD_CONFIG:
				img_width= readUInt16();
 2011260:	20118ec0 	call	20118ec <readUInt16>
 2011264:	e0bffb0d 	sth	r2,-20(fp)
				img_height= readUInt16();
 2011268:	20118ec0 	call	20118ec <readUInt16>
 201126c:	e0bffb8d 	sth	r2,-18(fp)
				writeByte(RESPONSE_OK);
 2011270:	01002a84 	movi	r4,170
 2011274:	2011a800 	call	2011a80 <writeByte>
				break;
 2011278:	00002506 	br	2011310 <main+0x210>
			case CMD_RD_IMG:
				IOWR(LED_BASE, 0x00, 0x00);
 201127c:	0007883a 	mov	r3,zero
 2011280:	008080b4 	movhi	r2,514
 2011284:	10851004 	addi	r2,r2,5184
 2011288:	10c00035 	stwio	r3,0(r2)

				IOWR(MIPI_CONTROLLER_0_BASE, 0x00, 0x00000001);	// Stop capture request
 201128c:	00c00044 	movi	r3,1
 2011290:	008080b4 	movhi	r2,514
 2011294:	10840004 	addi	r2,r2,4096
 2011298:	10c00035 	stwio	r3,0(r2)
				WaitFrame();
 201129c:	201109c0 	call	201109c <WaitFrame>
				IOWR(MIPI_CONTROLLER_0_BASE, 0x00, 0x00000000);	// Capture request again
				WaitFrame();
				*/

				// Read frame from memory and send to pc
				for(int rowIndex=0;rowIndex<img_height;rowIndex++)
 20112a0:	e03ffc15 	stw	zero,-16(fp)
 20112a4:	00000c06 	br	20112d8 <main+0x1d8>
				{
					// 16 bit per pixel
					// byte *bytes = (byte *)(SDRAM_BASE + (rowIndex * img_width * 2));
					// writeBytes(bytes, img_width * 2);
					byte *bytes = (byte *)(SDRAM_BASE + (rowIndex * img_width));
 20112a8:	e0bffb0b 	ldhu	r2,-20(fp)
 20112ac:	e17ffc17 	ldw	r5,-16(fp)
 20112b0:	1009883a 	mov	r4,r2
 20112b4:	2011c700 	call	2011c70 <__mulsi3>
 20112b8:	e0bffe15 	stw	r2,-8(fp)
					writeBytes(bytes, img_width);
 20112bc:	e0bffb0b 	ldhu	r2,-20(fp)
 20112c0:	100b883a 	mov	r5,r2
 20112c4:	e13ffe17 	ldw	r4,-8(fp)
 20112c8:	20119ec0 	call	20119ec <writeBytes>
				IOWR(MIPI_CONTROLLER_0_BASE, 0x00, 0x00000000);	// Capture request again
				WaitFrame();
				*/

				// Read frame from memory and send to pc
				for(int rowIndex=0;rowIndex<img_height;rowIndex++)
 20112cc:	e0bffc17 	ldw	r2,-16(fp)
 20112d0:	10800044 	addi	r2,r2,1
 20112d4:	e0bffc15 	stw	r2,-16(fp)
 20112d8:	e0bffb8b 	ldhu	r2,-18(fp)
 20112dc:	e0fffc17 	ldw	r3,-16(fp)
 20112e0:	18bff116 	blt	r3,r2,20112a8 <_gp+0xffff21e8>
					// writeBytes(bytes, img_width * 2);
					byte *bytes = (byte *)(SDRAM_BASE + (rowIndex * img_width));
					writeBytes(bytes, img_width);
				}

				IOWR(MIPI_CONTROLLER_0_BASE, 0x00, 0x00000000);	// Capture request again
 20112e4:	0007883a 	mov	r3,zero
 20112e8:	008080b4 	movhi	r2,514
 20112ec:	10840004 	addi	r2,r2,4096
 20112f0:	10c00035 	stwio	r3,0(r2)
				IOWR(LED_BASE, 0x00, 0x01);
 20112f4:	00c00044 	movi	r3,1
 20112f8:	008080b4 	movhi	r2,514
 20112fc:	10851004 	addi	r2,r2,5184
 2011300:	10c00035 	stwio	r3,0(r2)
				writeByte(RESPONSE_OK);
 2011304:	01002a84 	movi	r4,170
 2011308:	2011a800 	call	2011a80 <writeByte>

				break;
 201130c:	0001883a 	nop
		}
	};
 2011310:	003f9406 	br	2011164 <_gp+0xffff20a4>

02011314 <mipi_bridge_reg_write>:
};

const int MIPI_REGISTERS_COUNT = sizeof(MIPI_REGISTERS) / sizeof(MipiRegister);

void mipi_bridge_reg_write(uint16_t Addr, uint16_t Value)
{
 2011314:	defffb04 	addi	sp,sp,-20
 2011318:	dfc00415 	stw	ra,16(sp)
 201131c:	df000315 	stw	fp,12(sp)
 2011320:	df000304 	addi	fp,sp,12
 2011324:	2007883a 	mov	r3,r4
 2011328:	2805883a 	mov	r2,r5
 201132c:	e0fffe0d 	sth	r3,-8(fp)
 2011330:	e0bfff0d 	sth	r2,-4(fp)
	OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
 2011334:	e0fffe0b 	ldhu	r3,-8(fp)
 2011338:	e13fff04 	addi	r4,fp,-4
 201133c:	00800084 	movi	r2,2
 2011340:	d8800015 	stw	r2,0(sp)
 2011344:	200f883a 	mov	r7,r4
 2011348:	180d883a 	mov	r6,r3
 201134c:	01400704 	movi	r5,28
 2011350:	010080b4 	movhi	r4,514
 2011354:	21050804 	addi	r4,r4,5152
 2011358:	2010a040 	call	2010a04 <OC_I2CL_Write>
}
 201135c:	0001883a 	nop
 2011360:	e037883a 	mov	sp,fp
 2011364:	dfc00117 	ldw	ra,4(sp)
 2011368:	df000017 	ldw	fp,0(sp)
 201136c:	dec00204 	addi	sp,sp,8
 2011370:	f800283a 	ret

02011374 <mipi_bridge_reg_read>:

uint16_t mipi_bridge_reg_read(uint16_t Addr)
{
 2011374:	defffb04 	addi	sp,sp,-20
 2011378:	dfc00415 	stw	ra,16(sp)
 201137c:	df000315 	stw	fp,12(sp)
 2011380:	df000304 	addi	fp,sp,12
 2011384:	2005883a 	mov	r2,r4
 2011388:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t value;
	OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE,MIPI_BRIDGE_I2C_ADDR, Addr,(alt_u8 *)&value,sizeof(value));
 201138c:	e0ffff0b 	ldhu	r3,-4(fp)
 2011390:	00800084 	movi	r2,2
 2011394:	d8800015 	stw	r2,0(sp)
 2011398:	e1fffe04 	addi	r7,fp,-8
 201139c:	180d883a 	mov	r6,r3
 20113a0:	01400704 	movi	r5,28
 20113a4:	010080b4 	movhi	r4,514
 20113a8:	21050804 	addi	r4,r4,5152
 20113ac:	2010c740 	call	2010c74 <OC_I2CL_Read>
	return ReverseUInt16(value);
 20113b0:	e0bffe0b 	ldhu	r2,-8(fp)
 20113b4:	10bfffcc 	andi	r2,r2,65535
 20113b8:	1009883a 	mov	r4,r2
 20113bc:	2010f640 	call	2010f64 <ReverseUInt16>
}
 20113c0:	e037883a 	mov	sp,fp
 20113c4:	dfc00117 	ldw	ra,4(sp)
 20113c8:	df000017 	ldw	fp,0(sp)
 20113cc:	dec00204 	addi	sp,sp,8
 20113d0:	f800283a 	ret

020113d4 <mipi_bridge_init>:

void mipi_bridge_init(void)
{
 20113d4:	defffd04 	addi	sp,sp,-12
 20113d8:	dfc00215 	stw	ra,8(sp)
 20113dc:	df000115 	stw	fp,4(sp)
 20113e0:	df000104 	addi	fp,sp,4
	{
		printf("TC358748XBG Chip and Revision ID: 0x%04xh don't match 0x4401\n", chipID);
		return;
	}
	*/
	for(int i = 0; i < MIPI_REGISTERS_COUNT; i++){
 20113e4:	e03fff15 	stw	zero,-4(fp)
 20113e8:	00002f06 	br	20114a8 <mipi_bridge_init+0xd4>
		if (MIPI_REGISTERS[i].Addr == WRITE_DELAY)
 20113ec:	00808074 	movhi	r2,513
 20113f0:	10985104 	addi	r2,r2,24900
 20113f4:	e0ffff17 	ldw	r3,-4(fp)
 20113f8:	18c7883a 	add	r3,r3,r3
 20113fc:	18c7883a 	add	r3,r3,r3
 2011400:	10c5883a 	add	r2,r2,r3
 2011404:	1080000b 	ldhu	r2,0(r2)
 2011408:	10ffffcc 	andi	r3,r2,65535
 201140c:	00bfffd4 	movui	r2,65535
 2011410:	18800f1e 	bne	r3,r2,2011450 <mipi_bridge_init+0x7c>
		{
			usleep(MIPI_REGISTERS[i].Data * 1000);
 2011414:	00808074 	movhi	r2,513
 2011418:	10985104 	addi	r2,r2,24900
 201141c:	e0ffff17 	ldw	r3,-4(fp)
 2011420:	18c7883a 	add	r3,r3,r3
 2011424:	18c7883a 	add	r3,r3,r3
 2011428:	10c5883a 	add	r2,r2,r3
 201142c:	10800084 	addi	r2,r2,2
 2011430:	1080000b 	ldhu	r2,0(r2)
 2011434:	10bfffcc 	andi	r2,r2,65535
 2011438:	0140fa04 	movi	r5,1000
 201143c:	1009883a 	mov	r4,r2
 2011440:	2011c700 	call	2011c70 <__mulsi3>
 2011444:	1009883a 	mov	r4,r2
 2011448:	2014eb80 	call	2014eb8 <usleep>
 201144c:	00001306 	br	201149c <mipi_bridge_init+0xc8>
		}
		else
		{
			mipi_bridge_reg_write(MIPI_REGISTERS[i].Addr, MIPI_REGISTERS[i].Data);
 2011450:	00808074 	movhi	r2,513
 2011454:	10985104 	addi	r2,r2,24900
 2011458:	e0ffff17 	ldw	r3,-4(fp)
 201145c:	18c7883a 	add	r3,r3,r3
 2011460:	18c7883a 	add	r3,r3,r3
 2011464:	10c5883a 	add	r2,r2,r3
 2011468:	1080000b 	ldhu	r2,0(r2)
 201146c:	113fffcc 	andi	r4,r2,65535
 2011470:	00808074 	movhi	r2,513
 2011474:	10985104 	addi	r2,r2,24900
 2011478:	e0ffff17 	ldw	r3,-4(fp)
 201147c:	18c7883a 	add	r3,r3,r3
 2011480:	18c7883a 	add	r3,r3,r3
 2011484:	10c5883a 	add	r2,r2,r3
 2011488:	10800084 	addi	r2,r2,2
 201148c:	1080000b 	ldhu	r2,0(r2)
 2011490:	10bfffcc 	andi	r2,r2,65535
 2011494:	100b883a 	mov	r5,r2
 2011498:	20113140 	call	2011314 <mipi_bridge_reg_write>
	{
		printf("TC358748XBG Chip and Revision ID: 0x%04xh don't match 0x4401\n", chipID);
		return;
	}
	*/
	for(int i = 0; i < MIPI_REGISTERS_COUNT; i++){
 201149c:	e0bfff17 	ldw	r2,-4(fp)
 20114a0:	10800044 	addi	r2,r2,1
 20114a4:	e0bfff15 	stw	r2,-4(fp)
 20114a8:	00800444 	movi	r2,17
 20114ac:	e0ffff17 	ldw	r3,-4(fp)
 20114b0:	18bfce16 	blt	r3,r2,20113ec <_gp+0xffff232c>
		else
		{
			mipi_bridge_reg_write(MIPI_REGISTERS[i].Addr, MIPI_REGISTERS[i].Data);
		}
	}
}
 20114b4:	0001883a 	nop
 20114b8:	e037883a 	mov	sp,fp
 20114bc:	dfc00117 	ldw	ra,4(sp)
 20114c0:	df000017 	ldw	fp,0(sp)
 20114c4:	dec00204 	addi	sp,sp,8
 20114c8:	f800283a 	ret

020114cc <mipi_camera_reg_read>:

		{OV8865_SC_CTRL0100, 0x01}, //; wake up, streaming
};

uint8_t mipi_camera_reg_read(uint16_t Addr)
{
 20114cc:	defffb04 	addi	sp,sp,-20
 20114d0:	dfc00415 	stw	ra,16(sp)
 20114d4:	df000315 	stw	fp,12(sp)
 20114d8:	df000304 	addi	fp,sp,12
 20114dc:	2005883a 	mov	r2,r4
 20114e0:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t value;
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
 20114e4:	e0ffff0b 	ldhu	r3,-4(fp)
 20114e8:	00800044 	movi	r2,1
 20114ec:	d8800015 	stw	r2,0(sp)
 20114f0:	e1fffe04 	addi	r7,fp,-8
 20114f4:	180d883a 	mov	r6,r3
 20114f8:	01401b04 	movi	r5,108
 20114fc:	010080b4 	movhi	r4,514
 2011500:	21050004 	addi	r4,r4,5120
 2011504:	2010c740 	call	2010c74 <OC_I2CL_Read>
	return (value);
 2011508:	e0bffe03 	ldbu	r2,-8(fp)
}
 201150c:	e037883a 	mov	sp,fp
 2011510:	dfc00117 	ldw	ra,4(sp)
 2011514:	df000017 	ldw	fp,0(sp)
 2011518:	dec00204 	addi	sp,sp,8
 201151c:	f800283a 	ret

02011520 <mipi_camera_reg_write>:

void mipi_camera_reg_write(uint16_t Addr, uint8_t Value)
{
 2011520:	defffb04 	addi	sp,sp,-20
 2011524:	dfc00415 	stw	ra,16(sp)
 2011528:	df000315 	stw	fp,12(sp)
 201152c:	df000304 	addi	fp,sp,12
 2011530:	2007883a 	mov	r3,r4
 2011534:	2805883a 	mov	r2,r5
 2011538:	e0fffe0d 	sth	r3,-8(fp)
 201153c:	e0bfff05 	stb	r2,-4(fp)
	OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&Value, sizeof(Value));
 2011540:	e0fffe0b 	ldhu	r3,-8(fp)
 2011544:	e13fff04 	addi	r4,fp,-4
 2011548:	00800044 	movi	r2,1
 201154c:	d8800015 	stw	r2,0(sp)
 2011550:	200f883a 	mov	r7,r4
 2011554:	180d883a 	mov	r6,r3
 2011558:	01401b04 	movi	r5,108
 201155c:	010080b4 	movhi	r4,514
 2011560:	21050004 	addi	r4,r4,5120
 2011564:	2010a040 	call	2010a04 <OC_I2CL_Write>
}
 2011568:	0001883a 	nop
 201156c:	e037883a 	mov	sp,fp
 2011570:	dfc00117 	ldw	ra,4(sp)
 2011574:	df000017 	ldw	fp,0(sp)
 2011578:	dec00204 	addi	sp,sp,8
 201157c:	f800283a 	ret

02011580 <mipi_camera_binning>:

void mipi_camera_binning(uint8_t level)
{
 2011580:	defffd04 	addi	sp,sp,-12
 2011584:	dfc00215 	stw	ra,8(sp)
 2011588:	df000115 	stw	fp,4(sp)
 201158c:	df000104 	addi	fp,sp,4
 2011590:	2005883a 	mov	r2,r4
 2011594:	e0bfff05 	stb	r2,-4(fp)
	if(level <= 1) level = 1;
 2011598:	e0bfff03 	ldbu	r2,-4(fp)
 201159c:	108000a8 	cmpgeui	r2,r2,2
 20115a0:	1000021e 	bne	r2,zero,20115ac <mipi_camera_binning+0x2c>
 20115a4:	00800044 	movi	r2,1
 20115a8:	e0bfff05 	stb	r2,-4(fp)
	if(level >= 3) level = 3;
 20115ac:	e0bfff03 	ldbu	r2,-4(fp)
 20115b0:	108000f0 	cmpltui	r2,r2,3
 20115b4:	1000021e 	bne	r2,zero,20115c0 <mipi_camera_binning+0x40>
 20115b8:	008000c4 	movi	r2,3
 20115bc:	e0bfff05 	stb	r2,-4(fp)
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x00);
 20115c0:	000b883a 	mov	r5,zero
 20115c4:	01004004 	movi	r4,256
 20115c8:	20115200 	call	2011520 <mipi_camera_reg_write>
	if(level == 1){
 20115cc:	e0bfff03 	ldbu	r2,-4(fp)
 20115d0:	10800058 	cmpnei	r2,r2,1
 20115d4:	1000131e 	bne	r2,zero,2011624 <mipi_camera_binning+0xa4>
		// no binning
		mipi_camera_reg_write(0x3814, 0x01);
 20115d8:	01400044 	movi	r5,1
 20115dc:	010e0504 	movi	r4,14356
 20115e0:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 20115e4:	01400044 	movi	r5,1
 20115e8:	010e0544 	movi	r4,14357
 20115ec:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x01);
 20115f0:	01400044 	movi	r5,1
 20115f4:	010e0a84 	movi	r4,14378
 20115f8:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 20115fc:	01400044 	movi	r5,1
 2011600:	010e0ac4 	movi	r4,14379
 2011604:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
 2011608:	01400204 	movi	r5,8
 201160c:	010e0c04 	movi	r4,14384
 2011610:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
 2011614:	01400084 	movi	r5,2
 2011618:	010e0d84 	movi	r4,14390
 201161c:	20115200 	call	2011520 <mipi_camera_reg_write>
 2011620:	00002b06 	br	20116d0 <mipi_camera_binning+0x150>
	}
	else if(level == 2){
 2011624:	e0bfff03 	ldbu	r2,-4(fp)
 2011628:	10800098 	cmpnei	r2,r2,2
 201162c:	1000131e 	bne	r2,zero,201167c <mipi_camera_binning+0xfc>
		// 2x2 binning
		mipi_camera_reg_write(0x3814, 0x03);
 2011630:	014000c4 	movi	r5,3
 2011634:	010e0504 	movi	r4,14356
 2011638:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 201163c:	01400044 	movi	r5,1
 2011640:	010e0544 	movi	r4,14357
 2011644:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x03);
 2011648:	014000c4 	movi	r5,3
 201164c:	010e0a84 	movi	r4,14378
 2011650:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 2011654:	01400044 	movi	r5,1
 2011658:	010e0ac4 	movi	r4,14379
 201165c:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 4);
 2011660:	01400104 	movi	r5,4
 2011664:	010e0c04 	movi	r4,14384
 2011668:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 1);
 201166c:	01400044 	movi	r5,1
 2011670:	010e0d84 	movi	r4,14390
 2011674:	20115200 	call	2011520 <mipi_camera_reg_write>
 2011678:	00001506 	br	20116d0 <mipi_camera_binning+0x150>
	}
	else if(level == 3){
 201167c:	e0bfff03 	ldbu	r2,-4(fp)
 2011680:	108000d8 	cmpnei	r2,r2,3
 2011684:	1000121e 	bne	r2,zero,20116d0 <mipi_camera_binning+0x150>
		// 4x4 binning
		mipi_camera_reg_write(0x3814, 0x07);
 2011688:	014001c4 	movi	r5,7
 201168c:	010e0504 	movi	r4,14356
 2011690:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 2011694:	01400044 	movi	r5,1
 2011698:	010e0544 	movi	r4,14357
 201169c:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x07);
 20116a0:	014001c4 	movi	r5,7
 20116a4:	010e0a84 	movi	r4,14378
 20116a8:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 20116ac:	01400044 	movi	r5,1
 20116b0:	010e0ac4 	movi	r4,14379
 20116b4:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
 20116b8:	01400204 	movi	r5,8
 20116bc:	010e0c04 	movi	r4,14384
 20116c0:	20115200 	call	2011520 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
 20116c4:	01400084 	movi	r5,2
 20116c8:	010e0d84 	movi	r4,14390
 20116cc:	20115200 	call	2011520 <mipi_camera_reg_write>
	}
	usleep(10000);
 20116d0:	0109c404 	movi	r4,10000
 20116d4:	2014eb80 	call	2014eb8 <usleep>
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x01);
 20116d8:	01400044 	movi	r5,1
 20116dc:	01004004 	movi	r4,256
 20116e0:	20115200 	call	2011520 <mipi_camera_reg_write>
}
 20116e4:	0001883a 	nop
 20116e8:	e037883a 	mov	sp,fp
 20116ec:	dfc00117 	ldw	ra,4(sp)
 20116f0:	df000017 	ldw	fp,0(sp)
 20116f4:	dec00204 	addi	sp,sp,8
 20116f8:	f800283a 	ret

020116fc <mipi_camera_init>:

void mipi_camera_init(void)
{
 20116fc:	defffc04 	addi	sp,sp,-16
 2011700:	dfc00315 	stw	ra,12(sp)
 2011704:	df000215 	stw	fp,8(sp)
 2011708:	df000204 	addi	fp,sp,8
	const int num = sizeof(CAMERA_REGISTERS)/sizeof(CameraRegister);
 201170c:	00805144 	movi	r2,325
 2011710:	e0bfff15 	stw	r2,-4(fp)
	for(int i=0; i<num; i++){
 2011714:	e03ffe15 	stw	zero,-8(fp)
 2011718:	00002f06 	br	20117d8 <mipi_camera_init+0xdc>
		if (CAMERA_REGISTERS[i].Addr == TIME_DELAY)
 201171c:	00808074 	movhi	r2,513
 2011720:	10986204 	addi	r2,r2,24968
 2011724:	e0fffe17 	ldw	r3,-8(fp)
 2011728:	18c7883a 	add	r3,r3,r3
 201172c:	18c7883a 	add	r3,r3,r3
 2011730:	10c5883a 	add	r2,r2,r3
 2011734:	1080000b 	ldhu	r2,0(r2)
 2011738:	10ffffcc 	andi	r3,r2,65535
 201173c:	00bfffd4 	movui	r2,65535
 2011740:	18800f1e 	bne	r3,r2,2011780 <mipi_camera_init+0x84>
		{
			usleep(CAMERA_REGISTERS[i].Data * 100);
 2011744:	00808074 	movhi	r2,513
 2011748:	10986204 	addi	r2,r2,24968
 201174c:	e0fffe17 	ldw	r3,-8(fp)
 2011750:	18c7883a 	add	r3,r3,r3
 2011754:	18c7883a 	add	r3,r3,r3
 2011758:	10c5883a 	add	r2,r2,r3
 201175c:	10800084 	addi	r2,r2,2
 2011760:	10800003 	ldbu	r2,0(r2)
 2011764:	10803fcc 	andi	r2,r2,255
 2011768:	01401904 	movi	r5,100
 201176c:	1009883a 	mov	r4,r2
 2011770:	2011c700 	call	2011c70 <__mulsi3>
 2011774:	1009883a 	mov	r4,r2
 2011778:	2014eb80 	call	2014eb8 <usleep>
 201177c:	00001306 	br	20117cc <mipi_camera_init+0xd0>
		}
		else
		{
			mipi_camera_reg_write(CAMERA_REGISTERS[i].Addr, CAMERA_REGISTERS[i].Data);
 2011780:	00808074 	movhi	r2,513
 2011784:	10986204 	addi	r2,r2,24968
 2011788:	e0fffe17 	ldw	r3,-8(fp)
 201178c:	18c7883a 	add	r3,r3,r3
 2011790:	18c7883a 	add	r3,r3,r3
 2011794:	10c5883a 	add	r2,r2,r3
 2011798:	1080000b 	ldhu	r2,0(r2)
 201179c:	113fffcc 	andi	r4,r2,65535
 20117a0:	00808074 	movhi	r2,513
 20117a4:	10986204 	addi	r2,r2,24968
 20117a8:	e0fffe17 	ldw	r3,-8(fp)
 20117ac:	18c7883a 	add	r3,r3,r3
 20117b0:	18c7883a 	add	r3,r3,r3
 20117b4:	10c5883a 	add	r2,r2,r3
 20117b8:	10800084 	addi	r2,r2,2
 20117bc:	10800003 	ldbu	r2,0(r2)
 20117c0:	10803fcc 	andi	r2,r2,255
 20117c4:	100b883a 	mov	r5,r2
 20117c8:	20115200 	call	2011520 <mipi_camera_reg_write>
}

void mipi_camera_init(void)
{
	const int num = sizeof(CAMERA_REGISTERS)/sizeof(CameraRegister);
	for(int i=0; i<num; i++){
 20117cc:	e0bffe17 	ldw	r2,-8(fp)
 20117d0:	10800044 	addi	r2,r2,1
 20117d4:	e0bffe15 	stw	r2,-8(fp)
 20117d8:	e0fffe17 	ldw	r3,-8(fp)
 20117dc:	e0bfff17 	ldw	r2,-4(fp)
 20117e0:	18bfce16 	blt	r3,r2,201171c <_gp+0xffff265c>
		else
		{
			mipi_camera_reg_write(CAMERA_REGISTERS[i].Addr, CAMERA_REGISTERS[i].Data);
		}
	}
}
 20117e4:	0001883a 	nop
 20117e8:	e037883a 	mov	sp,fp
 20117ec:	dfc00117 	ldw	ra,4(sp)
 20117f0:	df000017 	ldw	fp,0(sp)
 20117f4:	dec00204 	addi	sp,sp,8
 20117f8:	f800283a 	ret

020117fc <mipi_camera_reg_read_VCM149C>:

uint16_t mipi_camera_reg_read_VCM149C()
{
 20117fc:	defffd04 	addi	sp,sp,-12
 2011800:	dfc00215 	stw	ra,8(sp)
 2011804:	df000115 	stw	fp,4(sp)
 2011808:	df000104 	addi	fp,sp,4
	uint16_t focus;
	OC_I2C_Read_Continue(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, (uint8_t *)&focus, sizeof(focus));
 201180c:	01c00084 	movi	r7,2
 2011810:	e1bfff04 	addi	r6,fp,-4
 2011814:	01400604 	movi	r5,24
 2011818:	010080b4 	movhi	r4,514
 201181c:	21050004 	addi	r4,r4,5120
 2011820:	20108bc0 	call	20108bc <OC_I2C_Read_Continue>
	return ReverseUInt16(focus);
 2011824:	e0bfff0b 	ldhu	r2,-4(fp)
 2011828:	10bfffcc 	andi	r2,r2,65535
 201182c:	1009883a 	mov	r4,r2
 2011830:	2010f640 	call	2010f64 <ReverseUInt16>
}
 2011834:	e037883a 	mov	sp,fp
 2011838:	dfc00117 	ldw	ra,4(sp)
 201183c:	df000017 	ldw	fp,0(sp)
 2011840:	dec00204 	addi	sp,sp,8
 2011844:	f800283a 	ret

02011848 <mipi_camera_reg_write_VCM149C>:

void mipi_camera_reg_write_VCM149C(uint16_t dacValue)
{
 2011848:	defffb04 	addi	sp,sp,-20
 201184c:	dfc00415 	stw	ra,16(sp)
 2011850:	df000315 	stw	fp,12(sp)
 2011854:	df000304 	addi	fp,sp,12
 2011858:	2005883a 	mov	r2,r4
 201185c:	e0bfff0d 	sth	r2,-4(fp)
	// Constraints DAC value into [0-1023] range
	if (dacValue > 1023)
 2011860:	e0bfff0b 	ldhu	r2,-4(fp)
 2011864:	10810030 	cmpltui	r2,r2,1024
 2011868:	1000021e 	bne	r2,zero,2011874 <mipi_camera_reg_write_VCM149C+0x2c>
	{
		dacValue = 1023;
 201186c:	0080ffc4 	movi	r2,1023
 2011870:	e0bfff0d 	sth	r2,-4(fp)
	}
	if (dacValue < 0)
	{
		dacValue = 0;
	}
	uint8_t msb = (dacValue >> 4)&0x00FF;
 2011874:	e0bfff0b 	ldhu	r2,-4(fp)
 2011878:	1004d13a 	srli	r2,r2,4
 201187c:	e0bffe05 	stb	r2,-8(fp)
	uint8_t lsb = (dacValue << 4 )&0x00F0;
 2011880:	e0bfff0b 	ldhu	r2,-4(fp)
 2011884:	1004913a 	slli	r2,r2,4
 2011888:	e0bffe45 	stb	r2,-7(fp)
	lsb += 0x06;
 201188c:	e0bffe43 	ldbu	r2,-7(fp)
 2011890:	10800184 	addi	r2,r2,6
 2011894:	e0bffe45 	stb	r2,-7(fp)
	lsb += 0x06;
 2011898:	e0bffe43 	ldbu	r2,-7(fp)
 201189c:	10800184 	addi	r2,r2,6
 20118a0:	e0bffe45 	stb	r2,-7(fp)
	OC_I2C_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, msb, (uint8_t *)&lsb, sizeof(lsb));
 20118a4:	e0fffe03 	ldbu	r3,-8(fp)
 20118a8:	e13ffe44 	addi	r4,fp,-7
 20118ac:	00800044 	movi	r2,1
 20118b0:	d8800015 	stw	r2,0(sp)
 20118b4:	200f883a 	mov	r7,r4
 20118b8:	180d883a 	mov	r6,r3
 20118bc:	01400604 	movi	r5,24
 20118c0:	010080b4 	movhi	r4,514
 20118c4:	21050004 	addi	r4,r4,5120
 20118c8:	201041c0 	call	201041c <OC_I2C_Write>
	usleep(1000);
 20118cc:	0100fa04 	movi	r4,1000
 20118d0:	2014eb80 	call	2014eb8 <usleep>
}
 20118d4:	0001883a 	nop
 20118d8:	e037883a 	mov	sp,fp
 20118dc:	dfc00117 	ldw	ra,4(sp)
 20118e0:	df000017 	ldw	fp,0(sp)
 20118e4:	dec00204 	addi	sp,sp,8
 20118e8:	f800283a 	ret

020118ec <readUInt16>:
#include "stdio_ext.h"

// x86 is Little Endian
// ex. 0x123 => 0x23 0x01
uint16_t readUInt16()
{
 20118ec:	defffd04 	addi	sp,sp,-12
 20118f0:	dfc00215 	stw	ra,8(sp)
 20118f4:	df000115 	stw	fp,4(sp)
 20118f8:	df000104 	addi	fp,sp,4
  byte data[2];
  data[0] = readByte();
 20118fc:	2011a580 	call	2011a58 <readByte>
 2011900:	e0bfff05 	stb	r2,-4(fp)
  data[1] = readByte();
 2011904:	2011a580 	call	2011a58 <readByte>
 2011908:	e0bfff45 	stb	r2,-3(fp)
  return bytesToUInt16(data);
 201190c:	e13fff04 	addi	r4,fp,-4
 2011910:	20119280 	call	2011928 <bytesToUInt16>
}
 2011914:	e037883a 	mov	sp,fp
 2011918:	dfc00117 	ldw	ra,4(sp)
 201191c:	df000017 	ldw	fp,0(sp)
 2011920:	dec00204 	addi	sp,sp,8
 2011924:	f800283a 	ret

02011928 <bytesToUInt16>:

uint16_t bytesToUInt16(byte* data)
{
 2011928:	defffd04 	addi	sp,sp,-12
 201192c:	df000215 	stw	fp,8(sp)
 2011930:	df000204 	addi	fp,sp,8
 2011934:	e13fff15 	stw	r4,-4(fp)
  uint16_t result = data[0];
 2011938:	e0bfff17 	ldw	r2,-4(fp)
 201193c:	10800003 	ldbu	r2,0(r2)
 2011940:	10803fcc 	andi	r2,r2,255
 2011944:	e0bffe0d 	sth	r2,-8(fp)
  result |= data[1] << 8;
 2011948:	e0bfff17 	ldw	r2,-4(fp)
 201194c:	10800044 	addi	r2,r2,1
 2011950:	10800003 	ldbu	r2,0(r2)
 2011954:	10803fcc 	andi	r2,r2,255
 2011958:	1004923a 	slli	r2,r2,8
 201195c:	1007883a 	mov	r3,r2
 2011960:	e0bffe0b 	ldhu	r2,-8(fp)
 2011964:	1884b03a 	or	r2,r3,r2
 2011968:	e0bffe0d 	sth	r2,-8(fp)
  return result;
 201196c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 2011970:	e037883a 	mov	sp,fp
 2011974:	df000017 	ldw	fp,0(sp)
 2011978:	dec00104 	addi	sp,sp,4
 201197c:	f800283a 	ret

02011980 <readBytes>:

void readBytes(byte* data, int dataLen)
{
 2011980:	defffa04 	addi	sp,sp,-24
 2011984:	dfc00515 	stw	ra,20(sp)
 2011988:	df000415 	stw	fp,16(sp)
 201198c:	dc000315 	stw	r16,12(sp)
 2011990:	df000404 	addi	fp,sp,16
 2011994:	e13ffd15 	stw	r4,-12(fp)
 2011998:	e17ffe15 	stw	r5,-8(fp)
	int byteIndex;
	for(byteIndex = 0; byteIndex < dataLen; byteIndex++)
 201199c:	e03ffc15 	stw	zero,-16(fp)
 20119a0:	00000806 	br	20119c4 <readBytes+0x44>
	{
		data[byteIndex] = readByte();
 20119a4:	e0bffc17 	ldw	r2,-16(fp)
 20119a8:	e0fffd17 	ldw	r3,-12(fp)
 20119ac:	18a1883a 	add	r16,r3,r2
 20119b0:	2011a580 	call	2011a58 <readByte>
 20119b4:	80800005 	stb	r2,0(r16)
}

void readBytes(byte* data, int dataLen)
{
	int byteIndex;
	for(byteIndex = 0; byteIndex < dataLen; byteIndex++)
 20119b8:	e0bffc17 	ldw	r2,-16(fp)
 20119bc:	10800044 	addi	r2,r2,1
 20119c0:	e0bffc15 	stw	r2,-16(fp)
 20119c4:	e0fffc17 	ldw	r3,-16(fp)
 20119c8:	e0bffe17 	ldw	r2,-8(fp)
 20119cc:	18bff516 	blt	r3,r2,20119a4 <_gp+0xffff28e4>
	{
		data[byteIndex] = readByte();
	}
}
 20119d0:	0001883a 	nop
 20119d4:	e6ffff04 	addi	sp,fp,-4
 20119d8:	dfc00217 	ldw	ra,8(sp)
 20119dc:	df000117 	ldw	fp,4(sp)
 20119e0:	dc000017 	ldw	r16,0(sp)
 20119e4:	dec00304 	addi	sp,sp,12
 20119e8:	f800283a 	ret

020119ec <writeBytes>:

// Alternative version of writeBytes that use STDIO
void writeBytes(byte* data, int dataLen)
{
 20119ec:	defffa04 	addi	sp,sp,-24
 20119f0:	dfc00515 	stw	ra,20(sp)
 20119f4:	df000415 	stw	fp,16(sp)
 20119f8:	df000404 	addi	fp,sp,16
 20119fc:	e13ffe15 	stw	r4,-8(fp)
 2011a00:	e17fff15 	stw	r5,-4(fp)
	int remainingBytes = dataLen;
 2011a04:	e0bfff17 	ldw	r2,-4(fp)
 2011a08:	e0bffc15 	stw	r2,-16(fp)
	while (remainingBytes > 0)
 2011a0c:	00000a06 	br	2011a38 <writeBytes+0x4c>
	{
		int writtenBytes = write(STDOUT_FILENO, data, remainingBytes);
 2011a10:	e0bffc17 	ldw	r2,-16(fp)
 2011a14:	100d883a 	mov	r6,r2
 2011a18:	e17ffe17 	ldw	r5,-8(fp)
 2011a1c:	01000044 	movi	r4,1
 2011a20:	2014ebc0 	call	2014ebc <write>
 2011a24:	e0bffd15 	stw	r2,-12(fp)
		remainingBytes -= writtenBytes;
 2011a28:	e0fffc17 	ldw	r3,-16(fp)
 2011a2c:	e0bffd17 	ldw	r2,-12(fp)
 2011a30:	1885c83a 	sub	r2,r3,r2
 2011a34:	e0bffc15 	stw	r2,-16(fp)

// Alternative version of writeBytes that use STDIO
void writeBytes(byte* data, int dataLen)
{
	int remainingBytes = dataLen;
	while (remainingBytes > 0)
 2011a38:	e0bffc17 	ldw	r2,-16(fp)
 2011a3c:	00bff416 	blt	zero,r2,2011a10 <_gp+0xffff2950>
	{
		int writtenBytes = write(STDOUT_FILENO, data, remainingBytes);
		remainingBytes -= writtenBytes;
	}
}
 2011a40:	0001883a 	nop
 2011a44:	e037883a 	mov	sp,fp
 2011a48:	dfc00117 	ldw	ra,4(sp)
 2011a4c:	df000017 	ldw	fp,0(sp)
 2011a50:	dec00204 	addi	sp,sp,8
 2011a54:	f800283a 	ret

02011a58 <readByte>:
	}
}
*/

byte readByte()
{
 2011a58:	defffe04 	addi	sp,sp,-8
 2011a5c:	dfc00115 	stw	ra,4(sp)
 2011a60:	df000015 	stw	fp,0(sp)
 2011a64:	d839883a 	mov	fp,sp
	return alt_getchar();
 2011a68:	2014a580 	call	2014a58 <alt_getchar>
}
 2011a6c:	e037883a 	mov	sp,fp
 2011a70:	dfc00117 	ldw	ra,4(sp)
 2011a74:	df000017 	ldw	fp,0(sp)
 2011a78:	dec00204 	addi	sp,sp,8
 2011a7c:	f800283a 	ret

02011a80 <writeByte>:

void writeByte(byte data)
{
 2011a80:	defffd04 	addi	sp,sp,-12
 2011a84:	dfc00215 	stw	ra,8(sp)
 2011a88:	df000115 	stw	fp,4(sp)
 2011a8c:	df000104 	addi	fp,sp,4
 2011a90:	2005883a 	mov	r2,r4
 2011a94:	e0bfff05 	stb	r2,-4(fp)
	alt_putchar(data);
 2011a98:	e0bfff03 	ldbu	r2,-4(fp)
 2011a9c:	1009883a 	mov	r4,r2
 2011aa0:	2014cf00 	call	2014cf0 <alt_putchar>
}
 2011aa4:	0001883a 	nop
 2011aa8:	e037883a 	mov	sp,fp
 2011aac:	dfc00117 	ldw	ra,4(sp)
 2011ab0:	df000017 	ldw	fp,0(sp)
 2011ab4:	dec00204 	addi	sp,sp,8
 2011ab8:	f800283a 	ret

02011abc <__divsi3>:
 2011abc:	20001b16 	blt	r4,zero,2011b2c <__divsi3+0x70>
 2011ac0:	000f883a 	mov	r7,zero
 2011ac4:	28001616 	blt	r5,zero,2011b20 <__divsi3+0x64>
 2011ac8:	200d883a 	mov	r6,r4
 2011acc:	29001a2e 	bgeu	r5,r4,2011b38 <__divsi3+0x7c>
 2011ad0:	00800804 	movi	r2,32
 2011ad4:	00c00044 	movi	r3,1
 2011ad8:	00000106 	br	2011ae0 <__divsi3+0x24>
 2011adc:	10000d26 	beq	r2,zero,2011b14 <__divsi3+0x58>
 2011ae0:	294b883a 	add	r5,r5,r5
 2011ae4:	10bfffc4 	addi	r2,r2,-1
 2011ae8:	18c7883a 	add	r3,r3,r3
 2011aec:	293ffb36 	bltu	r5,r4,2011adc <_gp+0xffff2a1c>
 2011af0:	0005883a 	mov	r2,zero
 2011af4:	18000726 	beq	r3,zero,2011b14 <__divsi3+0x58>
 2011af8:	0005883a 	mov	r2,zero
 2011afc:	31400236 	bltu	r6,r5,2011b08 <__divsi3+0x4c>
 2011b00:	314dc83a 	sub	r6,r6,r5
 2011b04:	10c4b03a 	or	r2,r2,r3
 2011b08:	1806d07a 	srli	r3,r3,1
 2011b0c:	280ad07a 	srli	r5,r5,1
 2011b10:	183ffa1e 	bne	r3,zero,2011afc <_gp+0xffff2a3c>
 2011b14:	38000126 	beq	r7,zero,2011b1c <__divsi3+0x60>
 2011b18:	0085c83a 	sub	r2,zero,r2
 2011b1c:	f800283a 	ret
 2011b20:	014bc83a 	sub	r5,zero,r5
 2011b24:	39c0005c 	xori	r7,r7,1
 2011b28:	003fe706 	br	2011ac8 <_gp+0xffff2a08>
 2011b2c:	0109c83a 	sub	r4,zero,r4
 2011b30:	01c00044 	movi	r7,1
 2011b34:	003fe306 	br	2011ac4 <_gp+0xffff2a04>
 2011b38:	00c00044 	movi	r3,1
 2011b3c:	003fee06 	br	2011af8 <_gp+0xffff2a38>

02011b40 <__modsi3>:
 2011b40:	20001716 	blt	r4,zero,2011ba0 <__modsi3+0x60>
 2011b44:	000f883a 	mov	r7,zero
 2011b48:	2005883a 	mov	r2,r4
 2011b4c:	28001216 	blt	r5,zero,2011b98 <__modsi3+0x58>
 2011b50:	2900162e 	bgeu	r5,r4,2011bac <__modsi3+0x6c>
 2011b54:	01800804 	movi	r6,32
 2011b58:	00c00044 	movi	r3,1
 2011b5c:	00000106 	br	2011b64 <__modsi3+0x24>
 2011b60:	30000a26 	beq	r6,zero,2011b8c <__modsi3+0x4c>
 2011b64:	294b883a 	add	r5,r5,r5
 2011b68:	31bfffc4 	addi	r6,r6,-1
 2011b6c:	18c7883a 	add	r3,r3,r3
 2011b70:	293ffb36 	bltu	r5,r4,2011b60 <_gp+0xffff2aa0>
 2011b74:	18000526 	beq	r3,zero,2011b8c <__modsi3+0x4c>
 2011b78:	1806d07a 	srli	r3,r3,1
 2011b7c:	11400136 	bltu	r2,r5,2011b84 <__modsi3+0x44>
 2011b80:	1145c83a 	sub	r2,r2,r5
 2011b84:	280ad07a 	srli	r5,r5,1
 2011b88:	183ffb1e 	bne	r3,zero,2011b78 <_gp+0xffff2ab8>
 2011b8c:	38000126 	beq	r7,zero,2011b94 <__modsi3+0x54>
 2011b90:	0085c83a 	sub	r2,zero,r2
 2011b94:	f800283a 	ret
 2011b98:	014bc83a 	sub	r5,zero,r5
 2011b9c:	003fec06 	br	2011b50 <_gp+0xffff2a90>
 2011ba0:	0109c83a 	sub	r4,zero,r4
 2011ba4:	01c00044 	movi	r7,1
 2011ba8:	003fe706 	br	2011b48 <_gp+0xffff2a88>
 2011bac:	00c00044 	movi	r3,1
 2011bb0:	003ff106 	br	2011b78 <_gp+0xffff2ab8>

02011bb4 <__udivsi3>:
 2011bb4:	200d883a 	mov	r6,r4
 2011bb8:	2900152e 	bgeu	r5,r4,2011c10 <__udivsi3+0x5c>
 2011bbc:	28001416 	blt	r5,zero,2011c10 <__udivsi3+0x5c>
 2011bc0:	00800804 	movi	r2,32
 2011bc4:	00c00044 	movi	r3,1
 2011bc8:	00000206 	br	2011bd4 <__udivsi3+0x20>
 2011bcc:	10000e26 	beq	r2,zero,2011c08 <__udivsi3+0x54>
 2011bd0:	28000516 	blt	r5,zero,2011be8 <__udivsi3+0x34>
 2011bd4:	294b883a 	add	r5,r5,r5
 2011bd8:	10bfffc4 	addi	r2,r2,-1
 2011bdc:	18c7883a 	add	r3,r3,r3
 2011be0:	293ffa36 	bltu	r5,r4,2011bcc <_gp+0xffff2b0c>
 2011be4:	18000826 	beq	r3,zero,2011c08 <__udivsi3+0x54>
 2011be8:	0005883a 	mov	r2,zero
 2011bec:	31400236 	bltu	r6,r5,2011bf8 <__udivsi3+0x44>
 2011bf0:	314dc83a 	sub	r6,r6,r5
 2011bf4:	10c4b03a 	or	r2,r2,r3
 2011bf8:	1806d07a 	srli	r3,r3,1
 2011bfc:	280ad07a 	srli	r5,r5,1
 2011c00:	183ffa1e 	bne	r3,zero,2011bec <_gp+0xffff2b2c>
 2011c04:	f800283a 	ret
 2011c08:	0005883a 	mov	r2,zero
 2011c0c:	f800283a 	ret
 2011c10:	00c00044 	movi	r3,1
 2011c14:	003ff406 	br	2011be8 <_gp+0xffff2b28>

02011c18 <__umodsi3>:
 2011c18:	2005883a 	mov	r2,r4
 2011c1c:	2900122e 	bgeu	r5,r4,2011c68 <__umodsi3+0x50>
 2011c20:	28001116 	blt	r5,zero,2011c68 <__umodsi3+0x50>
 2011c24:	01800804 	movi	r6,32
 2011c28:	00c00044 	movi	r3,1
 2011c2c:	00000206 	br	2011c38 <__umodsi3+0x20>
 2011c30:	30000c26 	beq	r6,zero,2011c64 <__umodsi3+0x4c>
 2011c34:	28000516 	blt	r5,zero,2011c4c <__umodsi3+0x34>
 2011c38:	294b883a 	add	r5,r5,r5
 2011c3c:	31bfffc4 	addi	r6,r6,-1
 2011c40:	18c7883a 	add	r3,r3,r3
 2011c44:	293ffa36 	bltu	r5,r4,2011c30 <_gp+0xffff2b70>
 2011c48:	18000626 	beq	r3,zero,2011c64 <__umodsi3+0x4c>
 2011c4c:	1806d07a 	srli	r3,r3,1
 2011c50:	11400136 	bltu	r2,r5,2011c58 <__umodsi3+0x40>
 2011c54:	1145c83a 	sub	r2,r2,r5
 2011c58:	280ad07a 	srli	r5,r5,1
 2011c5c:	183ffb1e 	bne	r3,zero,2011c4c <_gp+0xffff2b8c>
 2011c60:	f800283a 	ret
 2011c64:	f800283a 	ret
 2011c68:	00c00044 	movi	r3,1
 2011c6c:	003ff706 	br	2011c4c <_gp+0xffff2b8c>

02011c70 <__mulsi3>:
 2011c70:	0005883a 	mov	r2,zero
 2011c74:	20000726 	beq	r4,zero,2011c94 <__mulsi3+0x24>
 2011c78:	20c0004c 	andi	r3,r4,1
 2011c7c:	2008d07a 	srli	r4,r4,1
 2011c80:	18000126 	beq	r3,zero,2011c88 <__mulsi3+0x18>
 2011c84:	1145883a 	add	r2,r2,r5
 2011c88:	294b883a 	add	r5,r5,r5
 2011c8c:	203ffa1e 	bne	r4,zero,2011c78 <_gp+0xffff2bb8>
 2011c90:	f800283a 	ret
 2011c94:	f800283a 	ret

02011c98 <_puts_r>:
 2011c98:	defff604 	addi	sp,sp,-40
 2011c9c:	dc000715 	stw	r16,28(sp)
 2011ca0:	2021883a 	mov	r16,r4
 2011ca4:	2809883a 	mov	r4,r5
 2011ca8:	dc400815 	stw	r17,32(sp)
 2011cac:	dfc00915 	stw	ra,36(sp)
 2011cb0:	2823883a 	mov	r17,r5
 2011cb4:	2011d6c0 	call	2011d6c <strlen>
 2011cb8:	10c00044 	addi	r3,r2,1
 2011cbc:	d8800115 	stw	r2,4(sp)
 2011cc0:	00808074 	movhi	r2,513
 2011cc4:	1099a704 	addi	r2,r2,26268
 2011cc8:	d8800215 	stw	r2,8(sp)
 2011ccc:	00800044 	movi	r2,1
 2011cd0:	d8800315 	stw	r2,12(sp)
 2011cd4:	00800084 	movi	r2,2
 2011cd8:	dc400015 	stw	r17,0(sp)
 2011cdc:	d8c00615 	stw	r3,24(sp)
 2011ce0:	dec00415 	stw	sp,16(sp)
 2011ce4:	d8800515 	stw	r2,20(sp)
 2011ce8:	80000226 	beq	r16,zero,2011cf4 <_puts_r+0x5c>
 2011cec:	80800e17 	ldw	r2,56(r16)
 2011cf0:	10001426 	beq	r2,zero,2011d44 <_puts_r+0xac>
 2011cf4:	81400217 	ldw	r5,8(r16)
 2011cf8:	2880030b 	ldhu	r2,12(r5)
 2011cfc:	10c8000c 	andi	r3,r2,8192
 2011d00:	1800061e 	bne	r3,zero,2011d1c <_puts_r+0x84>
 2011d04:	29001917 	ldw	r4,100(r5)
 2011d08:	00f7ffc4 	movi	r3,-8193
 2011d0c:	10880014 	ori	r2,r2,8192
 2011d10:	20c6703a 	and	r3,r4,r3
 2011d14:	2880030d 	sth	r2,12(r5)
 2011d18:	28c01915 	stw	r3,100(r5)
 2011d1c:	d9800404 	addi	r6,sp,16
 2011d20:	8009883a 	mov	r4,r16
 2011d24:	20121b40 	call	20121b4 <__sfvwrite_r>
 2011d28:	1000091e 	bne	r2,zero,2011d50 <_puts_r+0xb8>
 2011d2c:	00800284 	movi	r2,10
 2011d30:	dfc00917 	ldw	ra,36(sp)
 2011d34:	dc400817 	ldw	r17,32(sp)
 2011d38:	dc000717 	ldw	r16,28(sp)
 2011d3c:	dec00a04 	addi	sp,sp,40
 2011d40:	f800283a 	ret
 2011d44:	8009883a 	mov	r4,r16
 2011d48:	20121640 	call	2012164 <__sinit>
 2011d4c:	003fe906 	br	2011cf4 <_gp+0xffff2c34>
 2011d50:	00bfffc4 	movi	r2,-1
 2011d54:	003ff606 	br	2011d30 <_gp+0xffff2c70>

02011d58 <puts>:
 2011d58:	00808074 	movhi	r2,513
 2011d5c:	109c3204 	addi	r2,r2,28872
 2011d60:	200b883a 	mov	r5,r4
 2011d64:	11000017 	ldw	r4,0(r2)
 2011d68:	2011c981 	jmpi	2011c98 <_puts_r>

02011d6c <strlen>:
 2011d6c:	208000cc 	andi	r2,r4,3
 2011d70:	10002026 	beq	r2,zero,2011df4 <strlen+0x88>
 2011d74:	20800007 	ldb	r2,0(r4)
 2011d78:	10002026 	beq	r2,zero,2011dfc <strlen+0x90>
 2011d7c:	2005883a 	mov	r2,r4
 2011d80:	00000206 	br	2011d8c <strlen+0x20>
 2011d84:	10c00007 	ldb	r3,0(r2)
 2011d88:	18001826 	beq	r3,zero,2011dec <strlen+0x80>
 2011d8c:	10800044 	addi	r2,r2,1
 2011d90:	10c000cc 	andi	r3,r2,3
 2011d94:	183ffb1e 	bne	r3,zero,2011d84 <_gp+0xffff2cc4>
 2011d98:	10c00017 	ldw	r3,0(r2)
 2011d9c:	01ffbff4 	movhi	r7,65279
 2011da0:	39ffbfc4 	addi	r7,r7,-257
 2011da4:	00ca303a 	nor	r5,zero,r3
 2011da8:	01a02074 	movhi	r6,32897
 2011dac:	19c7883a 	add	r3,r3,r7
 2011db0:	31a02004 	addi	r6,r6,-32640
 2011db4:	1946703a 	and	r3,r3,r5
 2011db8:	1986703a 	and	r3,r3,r6
 2011dbc:	1800091e 	bne	r3,zero,2011de4 <strlen+0x78>
 2011dc0:	10800104 	addi	r2,r2,4
 2011dc4:	10c00017 	ldw	r3,0(r2)
 2011dc8:	19cb883a 	add	r5,r3,r7
 2011dcc:	00c6303a 	nor	r3,zero,r3
 2011dd0:	28c6703a 	and	r3,r5,r3
 2011dd4:	1986703a 	and	r3,r3,r6
 2011dd8:	183ff926 	beq	r3,zero,2011dc0 <_gp+0xffff2d00>
 2011ddc:	00000106 	br	2011de4 <strlen+0x78>
 2011de0:	10800044 	addi	r2,r2,1
 2011de4:	10c00007 	ldb	r3,0(r2)
 2011de8:	183ffd1e 	bne	r3,zero,2011de0 <_gp+0xffff2d20>
 2011dec:	1105c83a 	sub	r2,r2,r4
 2011df0:	f800283a 	ret
 2011df4:	2005883a 	mov	r2,r4
 2011df8:	003fe706 	br	2011d98 <_gp+0xffff2cd8>
 2011dfc:	0005883a 	mov	r2,zero
 2011e00:	f800283a 	ret

02011e04 <__fp_unlock>:
 2011e04:	0005883a 	mov	r2,zero
 2011e08:	f800283a 	ret

02011e0c <_cleanup_r>:
 2011e0c:	01408074 	movhi	r5,513
 2011e10:	294f6f04 	addi	r5,r5,15804
 2011e14:	20127401 	jmpi	2012740 <_fwalk_reent>

02011e18 <__sinit.part.1>:
 2011e18:	defff704 	addi	sp,sp,-36
 2011e1c:	00c08074 	movhi	r3,513
 2011e20:	dfc00815 	stw	ra,32(sp)
 2011e24:	ddc00715 	stw	r23,28(sp)
 2011e28:	dd800615 	stw	r22,24(sp)
 2011e2c:	dd400515 	stw	r21,20(sp)
 2011e30:	dd000415 	stw	r20,16(sp)
 2011e34:	dcc00315 	stw	r19,12(sp)
 2011e38:	dc800215 	stw	r18,8(sp)
 2011e3c:	dc400115 	stw	r17,4(sp)
 2011e40:	dc000015 	stw	r16,0(sp)
 2011e44:	18c78304 	addi	r3,r3,7692
 2011e48:	24000117 	ldw	r16,4(r4)
 2011e4c:	20c00f15 	stw	r3,60(r4)
 2011e50:	2080bb04 	addi	r2,r4,748
 2011e54:	00c000c4 	movi	r3,3
 2011e58:	20c0b915 	stw	r3,740(r4)
 2011e5c:	2080ba15 	stw	r2,744(r4)
 2011e60:	2000b815 	stw	zero,736(r4)
 2011e64:	05c00204 	movi	r23,8
 2011e68:	00800104 	movi	r2,4
 2011e6c:	2025883a 	mov	r18,r4
 2011e70:	b80d883a 	mov	r6,r23
 2011e74:	81001704 	addi	r4,r16,92
 2011e78:	000b883a 	mov	r5,zero
 2011e7c:	80000015 	stw	zero,0(r16)
 2011e80:	80000115 	stw	zero,4(r16)
 2011e84:	80000215 	stw	zero,8(r16)
 2011e88:	8080030d 	sth	r2,12(r16)
 2011e8c:	80001915 	stw	zero,100(r16)
 2011e90:	8000038d 	sth	zero,14(r16)
 2011e94:	80000415 	stw	zero,16(r16)
 2011e98:	80000515 	stw	zero,20(r16)
 2011e9c:	80000615 	stw	zero,24(r16)
 2011ea0:	20133980 	call	2013398 <memset>
 2011ea4:	05808074 	movhi	r22,513
 2011ea8:	94400217 	ldw	r17,8(r18)
 2011eac:	05408074 	movhi	r21,513
 2011eb0:	05008074 	movhi	r20,513
 2011eb4:	04c08074 	movhi	r19,513
 2011eb8:	b58e9e04 	addi	r22,r22,14968
 2011ebc:	ad4eb504 	addi	r21,r21,15060
 2011ec0:	a50ed404 	addi	r20,r20,15184
 2011ec4:	9cceeb04 	addi	r19,r19,15276
 2011ec8:	85800815 	stw	r22,32(r16)
 2011ecc:	85400915 	stw	r21,36(r16)
 2011ed0:	85000a15 	stw	r20,40(r16)
 2011ed4:	84c00b15 	stw	r19,44(r16)
 2011ed8:	84000715 	stw	r16,28(r16)
 2011edc:	00800284 	movi	r2,10
 2011ee0:	8880030d 	sth	r2,12(r17)
 2011ee4:	00800044 	movi	r2,1
 2011ee8:	b80d883a 	mov	r6,r23
 2011eec:	89001704 	addi	r4,r17,92
 2011ef0:	000b883a 	mov	r5,zero
 2011ef4:	88000015 	stw	zero,0(r17)
 2011ef8:	88000115 	stw	zero,4(r17)
 2011efc:	88000215 	stw	zero,8(r17)
 2011f00:	88001915 	stw	zero,100(r17)
 2011f04:	8880038d 	sth	r2,14(r17)
 2011f08:	88000415 	stw	zero,16(r17)
 2011f0c:	88000515 	stw	zero,20(r17)
 2011f10:	88000615 	stw	zero,24(r17)
 2011f14:	20133980 	call	2013398 <memset>
 2011f18:	94000317 	ldw	r16,12(r18)
 2011f1c:	00800484 	movi	r2,18
 2011f20:	8c400715 	stw	r17,28(r17)
 2011f24:	8d800815 	stw	r22,32(r17)
 2011f28:	8d400915 	stw	r21,36(r17)
 2011f2c:	8d000a15 	stw	r20,40(r17)
 2011f30:	8cc00b15 	stw	r19,44(r17)
 2011f34:	8080030d 	sth	r2,12(r16)
 2011f38:	00800084 	movi	r2,2
 2011f3c:	80000015 	stw	zero,0(r16)
 2011f40:	80000115 	stw	zero,4(r16)
 2011f44:	80000215 	stw	zero,8(r16)
 2011f48:	80001915 	stw	zero,100(r16)
 2011f4c:	8080038d 	sth	r2,14(r16)
 2011f50:	80000415 	stw	zero,16(r16)
 2011f54:	80000515 	stw	zero,20(r16)
 2011f58:	80000615 	stw	zero,24(r16)
 2011f5c:	b80d883a 	mov	r6,r23
 2011f60:	000b883a 	mov	r5,zero
 2011f64:	81001704 	addi	r4,r16,92
 2011f68:	20133980 	call	2013398 <memset>
 2011f6c:	00800044 	movi	r2,1
 2011f70:	84000715 	stw	r16,28(r16)
 2011f74:	85800815 	stw	r22,32(r16)
 2011f78:	85400915 	stw	r21,36(r16)
 2011f7c:	85000a15 	stw	r20,40(r16)
 2011f80:	84c00b15 	stw	r19,44(r16)
 2011f84:	90800e15 	stw	r2,56(r18)
 2011f88:	dfc00817 	ldw	ra,32(sp)
 2011f8c:	ddc00717 	ldw	r23,28(sp)
 2011f90:	dd800617 	ldw	r22,24(sp)
 2011f94:	dd400517 	ldw	r21,20(sp)
 2011f98:	dd000417 	ldw	r20,16(sp)
 2011f9c:	dcc00317 	ldw	r19,12(sp)
 2011fa0:	dc800217 	ldw	r18,8(sp)
 2011fa4:	dc400117 	ldw	r17,4(sp)
 2011fa8:	dc000017 	ldw	r16,0(sp)
 2011fac:	dec00904 	addi	sp,sp,36
 2011fb0:	f800283a 	ret

02011fb4 <__fp_lock>:
 2011fb4:	0005883a 	mov	r2,zero
 2011fb8:	f800283a 	ret

02011fbc <__sfmoreglue>:
 2011fbc:	defffc04 	addi	sp,sp,-16
 2011fc0:	dc800215 	stw	r18,8(sp)
 2011fc4:	2825883a 	mov	r18,r5
 2011fc8:	dc000015 	stw	r16,0(sp)
 2011fcc:	01401a04 	movi	r5,104
 2011fd0:	2021883a 	mov	r16,r4
 2011fd4:	913fffc4 	addi	r4,r18,-1
 2011fd8:	dfc00315 	stw	ra,12(sp)
 2011fdc:	dc400115 	stw	r17,4(sp)
 2011fe0:	2011c700 	call	2011c70 <__mulsi3>
 2011fe4:	8009883a 	mov	r4,r16
 2011fe8:	11401d04 	addi	r5,r2,116
 2011fec:	1023883a 	mov	r17,r2
 2011ff0:	20128040 	call	2012804 <_malloc_r>
 2011ff4:	1021883a 	mov	r16,r2
 2011ff8:	10000726 	beq	r2,zero,2012018 <__sfmoreglue+0x5c>
 2011ffc:	11000304 	addi	r4,r2,12
 2012000:	10000015 	stw	zero,0(r2)
 2012004:	14800115 	stw	r18,4(r2)
 2012008:	11000215 	stw	r4,8(r2)
 201200c:	89801a04 	addi	r6,r17,104
 2012010:	000b883a 	mov	r5,zero
 2012014:	20133980 	call	2013398 <memset>
 2012018:	8005883a 	mov	r2,r16
 201201c:	dfc00317 	ldw	ra,12(sp)
 2012020:	dc800217 	ldw	r18,8(sp)
 2012024:	dc400117 	ldw	r17,4(sp)
 2012028:	dc000017 	ldw	r16,0(sp)
 201202c:	dec00404 	addi	sp,sp,16
 2012030:	f800283a 	ret

02012034 <__sfp>:
 2012034:	defffb04 	addi	sp,sp,-20
 2012038:	dc000015 	stw	r16,0(sp)
 201203c:	04008074 	movhi	r16,513
 2012040:	841c3104 	addi	r16,r16,28868
 2012044:	dcc00315 	stw	r19,12(sp)
 2012048:	2027883a 	mov	r19,r4
 201204c:	81000017 	ldw	r4,0(r16)
 2012050:	dfc00415 	stw	ra,16(sp)
 2012054:	dc800215 	stw	r18,8(sp)
 2012058:	20800e17 	ldw	r2,56(r4)
 201205c:	dc400115 	stw	r17,4(sp)
 2012060:	1000021e 	bne	r2,zero,201206c <__sfp+0x38>
 2012064:	2011e180 	call	2011e18 <__sinit.part.1>
 2012068:	81000017 	ldw	r4,0(r16)
 201206c:	2480b804 	addi	r18,r4,736
 2012070:	047fffc4 	movi	r17,-1
 2012074:	91000117 	ldw	r4,4(r18)
 2012078:	94000217 	ldw	r16,8(r18)
 201207c:	213fffc4 	addi	r4,r4,-1
 2012080:	20000a16 	blt	r4,zero,20120ac <__sfp+0x78>
 2012084:	8080030f 	ldh	r2,12(r16)
 2012088:	10000c26 	beq	r2,zero,20120bc <__sfp+0x88>
 201208c:	80c01d04 	addi	r3,r16,116
 2012090:	00000206 	br	201209c <__sfp+0x68>
 2012094:	18bfe60f 	ldh	r2,-104(r3)
 2012098:	10000826 	beq	r2,zero,20120bc <__sfp+0x88>
 201209c:	213fffc4 	addi	r4,r4,-1
 20120a0:	1c3ffd04 	addi	r16,r3,-12
 20120a4:	18c01a04 	addi	r3,r3,104
 20120a8:	247ffa1e 	bne	r4,r17,2012094 <_gp+0xffff2fd4>
 20120ac:	90800017 	ldw	r2,0(r18)
 20120b0:	10001d26 	beq	r2,zero,2012128 <__sfp+0xf4>
 20120b4:	1025883a 	mov	r18,r2
 20120b8:	003fee06 	br	2012074 <_gp+0xffff2fb4>
 20120bc:	00bfffc4 	movi	r2,-1
 20120c0:	8080038d 	sth	r2,14(r16)
 20120c4:	00800044 	movi	r2,1
 20120c8:	8080030d 	sth	r2,12(r16)
 20120cc:	80001915 	stw	zero,100(r16)
 20120d0:	80000015 	stw	zero,0(r16)
 20120d4:	80000215 	stw	zero,8(r16)
 20120d8:	80000115 	stw	zero,4(r16)
 20120dc:	80000415 	stw	zero,16(r16)
 20120e0:	80000515 	stw	zero,20(r16)
 20120e4:	80000615 	stw	zero,24(r16)
 20120e8:	01800204 	movi	r6,8
 20120ec:	000b883a 	mov	r5,zero
 20120f0:	81001704 	addi	r4,r16,92
 20120f4:	20133980 	call	2013398 <memset>
 20120f8:	8005883a 	mov	r2,r16
 20120fc:	80000c15 	stw	zero,48(r16)
 2012100:	80000d15 	stw	zero,52(r16)
 2012104:	80001115 	stw	zero,68(r16)
 2012108:	80001215 	stw	zero,72(r16)
 201210c:	dfc00417 	ldw	ra,16(sp)
 2012110:	dcc00317 	ldw	r19,12(sp)
 2012114:	dc800217 	ldw	r18,8(sp)
 2012118:	dc400117 	ldw	r17,4(sp)
 201211c:	dc000017 	ldw	r16,0(sp)
 2012120:	dec00504 	addi	sp,sp,20
 2012124:	f800283a 	ret
 2012128:	01400104 	movi	r5,4
 201212c:	9809883a 	mov	r4,r19
 2012130:	2011fbc0 	call	2011fbc <__sfmoreglue>
 2012134:	90800015 	stw	r2,0(r18)
 2012138:	103fde1e 	bne	r2,zero,20120b4 <_gp+0xffff2ff4>
 201213c:	00800304 	movi	r2,12
 2012140:	98800015 	stw	r2,0(r19)
 2012144:	0005883a 	mov	r2,zero
 2012148:	003ff006 	br	201210c <_gp+0xffff304c>

0201214c <_cleanup>:
 201214c:	00808074 	movhi	r2,513
 2012150:	109c3104 	addi	r2,r2,28868
 2012154:	11000017 	ldw	r4,0(r2)
 2012158:	01408074 	movhi	r5,513
 201215c:	294f6f04 	addi	r5,r5,15804
 2012160:	20127401 	jmpi	2012740 <_fwalk_reent>

02012164 <__sinit>:
 2012164:	20800e17 	ldw	r2,56(r4)
 2012168:	10000126 	beq	r2,zero,2012170 <__sinit+0xc>
 201216c:	f800283a 	ret
 2012170:	2011e181 	jmpi	2011e18 <__sinit.part.1>

02012174 <__sfp_lock_acquire>:
 2012174:	f800283a 	ret

02012178 <__sfp_lock_release>:
 2012178:	f800283a 	ret

0201217c <__sinit_lock_acquire>:
 201217c:	f800283a 	ret

02012180 <__sinit_lock_release>:
 2012180:	f800283a 	ret

02012184 <__fp_lock_all>:
 2012184:	00808074 	movhi	r2,513
 2012188:	109c3204 	addi	r2,r2,28872
 201218c:	11000017 	ldw	r4,0(r2)
 2012190:	01408074 	movhi	r5,513
 2012194:	2947ed04 	addi	r5,r5,8116
 2012198:	201267c1 	jmpi	201267c <_fwalk>

0201219c <__fp_unlock_all>:
 201219c:	00808074 	movhi	r2,513
 20121a0:	109c3204 	addi	r2,r2,28872
 20121a4:	11000017 	ldw	r4,0(r2)
 20121a8:	01408074 	movhi	r5,513
 20121ac:	29478104 	addi	r5,r5,7684
 20121b0:	201267c1 	jmpi	201267c <_fwalk>

020121b4 <__sfvwrite_r>:
 20121b4:	30800217 	ldw	r2,8(r6)
 20121b8:	10006726 	beq	r2,zero,2012358 <__sfvwrite_r+0x1a4>
 20121bc:	28c0030b 	ldhu	r3,12(r5)
 20121c0:	defff404 	addi	sp,sp,-48
 20121c4:	dd400715 	stw	r21,28(sp)
 20121c8:	dd000615 	stw	r20,24(sp)
 20121cc:	dc000215 	stw	r16,8(sp)
 20121d0:	dfc00b15 	stw	ra,44(sp)
 20121d4:	df000a15 	stw	fp,40(sp)
 20121d8:	ddc00915 	stw	r23,36(sp)
 20121dc:	dd800815 	stw	r22,32(sp)
 20121e0:	dcc00515 	stw	r19,20(sp)
 20121e4:	dc800415 	stw	r18,16(sp)
 20121e8:	dc400315 	stw	r17,12(sp)
 20121ec:	1880020c 	andi	r2,r3,8
 20121f0:	2821883a 	mov	r16,r5
 20121f4:	202b883a 	mov	r21,r4
 20121f8:	3029883a 	mov	r20,r6
 20121fc:	10002726 	beq	r2,zero,201229c <__sfvwrite_r+0xe8>
 2012200:	28800417 	ldw	r2,16(r5)
 2012204:	10002526 	beq	r2,zero,201229c <__sfvwrite_r+0xe8>
 2012208:	1880008c 	andi	r2,r3,2
 201220c:	a4400017 	ldw	r17,0(r20)
 2012210:	10002a26 	beq	r2,zero,20122bc <__sfvwrite_r+0x108>
 2012214:	05a00034 	movhi	r22,32768
 2012218:	0027883a 	mov	r19,zero
 201221c:	0025883a 	mov	r18,zero
 2012220:	b5bf0004 	addi	r22,r22,-1024
 2012224:	980d883a 	mov	r6,r19
 2012228:	a809883a 	mov	r4,r21
 201222c:	90004626 	beq	r18,zero,2012348 <__sfvwrite_r+0x194>
 2012230:	900f883a 	mov	r7,r18
 2012234:	b480022e 	bgeu	r22,r18,2012240 <__sfvwrite_r+0x8c>
 2012238:	01e00034 	movhi	r7,32768
 201223c:	39ff0004 	addi	r7,r7,-1024
 2012240:	80800917 	ldw	r2,36(r16)
 2012244:	81400717 	ldw	r5,28(r16)
 2012248:	103ee83a 	callr	r2
 201224c:	00805a0e 	bge	zero,r2,20123b8 <__sfvwrite_r+0x204>
 2012250:	a0c00217 	ldw	r3,8(r20)
 2012254:	98a7883a 	add	r19,r19,r2
 2012258:	90a5c83a 	sub	r18,r18,r2
 201225c:	1885c83a 	sub	r2,r3,r2
 2012260:	a0800215 	stw	r2,8(r20)
 2012264:	103fef1e 	bne	r2,zero,2012224 <_gp+0xffff3164>
 2012268:	0005883a 	mov	r2,zero
 201226c:	dfc00b17 	ldw	ra,44(sp)
 2012270:	df000a17 	ldw	fp,40(sp)
 2012274:	ddc00917 	ldw	r23,36(sp)
 2012278:	dd800817 	ldw	r22,32(sp)
 201227c:	dd400717 	ldw	r21,28(sp)
 2012280:	dd000617 	ldw	r20,24(sp)
 2012284:	dcc00517 	ldw	r19,20(sp)
 2012288:	dc800417 	ldw	r18,16(sp)
 201228c:	dc400317 	ldw	r17,12(sp)
 2012290:	dc000217 	ldw	r16,8(sp)
 2012294:	dec00c04 	addi	sp,sp,48
 2012298:	f800283a 	ret
 201229c:	800b883a 	mov	r5,r16
 20122a0:	a809883a 	mov	r4,r21
 20122a4:	2013c140 	call	2013c14 <__swsetup_r>
 20122a8:	1000ee1e 	bne	r2,zero,2012664 <__sfvwrite_r+0x4b0>
 20122ac:	80c0030b 	ldhu	r3,12(r16)
 20122b0:	a4400017 	ldw	r17,0(r20)
 20122b4:	1880008c 	andi	r2,r3,2
 20122b8:	103fd61e 	bne	r2,zero,2012214 <_gp+0xffff3154>
 20122bc:	1880004c 	andi	r2,r3,1
 20122c0:	1000421e 	bne	r2,zero,20123cc <__sfvwrite_r+0x218>
 20122c4:	0039883a 	mov	fp,zero
 20122c8:	0025883a 	mov	r18,zero
 20122cc:	90001a26 	beq	r18,zero,2012338 <__sfvwrite_r+0x184>
 20122d0:	1880800c 	andi	r2,r3,512
 20122d4:	84c00217 	ldw	r19,8(r16)
 20122d8:	10002126 	beq	r2,zero,2012360 <__sfvwrite_r+0x1ac>
 20122dc:	982f883a 	mov	r23,r19
 20122e0:	94c09636 	bltu	r18,r19,201253c <__sfvwrite_r+0x388>
 20122e4:	1881200c 	andi	r2,r3,1152
 20122e8:	1000a11e 	bne	r2,zero,2012570 <__sfvwrite_r+0x3bc>
 20122ec:	81000017 	ldw	r4,0(r16)
 20122f0:	b80d883a 	mov	r6,r23
 20122f4:	e00b883a 	mov	r5,fp
 20122f8:	201323c0 	call	201323c <memmove>
 20122fc:	80c00217 	ldw	r3,8(r16)
 2012300:	81000017 	ldw	r4,0(r16)
 2012304:	9005883a 	mov	r2,r18
 2012308:	1ce7c83a 	sub	r19,r3,r19
 201230c:	25cf883a 	add	r7,r4,r23
 2012310:	84c00215 	stw	r19,8(r16)
 2012314:	81c00015 	stw	r7,0(r16)
 2012318:	a0c00217 	ldw	r3,8(r20)
 201231c:	e0b9883a 	add	fp,fp,r2
 2012320:	90a5c83a 	sub	r18,r18,r2
 2012324:	18a7c83a 	sub	r19,r3,r2
 2012328:	a4c00215 	stw	r19,8(r20)
 201232c:	983fce26 	beq	r19,zero,2012268 <_gp+0xffff31a8>
 2012330:	80c0030b 	ldhu	r3,12(r16)
 2012334:	903fe61e 	bne	r18,zero,20122d0 <_gp+0xffff3210>
 2012338:	8f000017 	ldw	fp,0(r17)
 201233c:	8c800117 	ldw	r18,4(r17)
 2012340:	8c400204 	addi	r17,r17,8
 2012344:	003fe106 	br	20122cc <_gp+0xffff320c>
 2012348:	8cc00017 	ldw	r19,0(r17)
 201234c:	8c800117 	ldw	r18,4(r17)
 2012350:	8c400204 	addi	r17,r17,8
 2012354:	003fb306 	br	2012224 <_gp+0xffff3164>
 2012358:	0005883a 	mov	r2,zero
 201235c:	f800283a 	ret
 2012360:	81000017 	ldw	r4,0(r16)
 2012364:	80800417 	ldw	r2,16(r16)
 2012368:	11005a36 	bltu	r2,r4,20124d4 <__sfvwrite_r+0x320>
 201236c:	85c00517 	ldw	r23,20(r16)
 2012370:	95c05836 	bltu	r18,r23,20124d4 <__sfvwrite_r+0x320>
 2012374:	00a00034 	movhi	r2,32768
 2012378:	10bfffc4 	addi	r2,r2,-1
 201237c:	9009883a 	mov	r4,r18
 2012380:	1480012e 	bgeu	r2,r18,2012388 <__sfvwrite_r+0x1d4>
 2012384:	1009883a 	mov	r4,r2
 2012388:	b80b883a 	mov	r5,r23
 201238c:	2011abc0 	call	2011abc <__divsi3>
 2012390:	b80b883a 	mov	r5,r23
 2012394:	1009883a 	mov	r4,r2
 2012398:	2011c700 	call	2011c70 <__mulsi3>
 201239c:	81400717 	ldw	r5,28(r16)
 20123a0:	80c00917 	ldw	r3,36(r16)
 20123a4:	100f883a 	mov	r7,r2
 20123a8:	e00d883a 	mov	r6,fp
 20123ac:	a809883a 	mov	r4,r21
 20123b0:	183ee83a 	callr	r3
 20123b4:	00bfd816 	blt	zero,r2,2012318 <_gp+0xffff3258>
 20123b8:	8080030b 	ldhu	r2,12(r16)
 20123bc:	10801014 	ori	r2,r2,64
 20123c0:	8080030d 	sth	r2,12(r16)
 20123c4:	00bfffc4 	movi	r2,-1
 20123c8:	003fa806 	br	201226c <_gp+0xffff31ac>
 20123cc:	0027883a 	mov	r19,zero
 20123d0:	0011883a 	mov	r8,zero
 20123d4:	0039883a 	mov	fp,zero
 20123d8:	0025883a 	mov	r18,zero
 20123dc:	90001f26 	beq	r18,zero,201245c <__sfvwrite_r+0x2a8>
 20123e0:	40005a26 	beq	r8,zero,201254c <__sfvwrite_r+0x398>
 20123e4:	982d883a 	mov	r22,r19
 20123e8:	94c0012e 	bgeu	r18,r19,20123f0 <__sfvwrite_r+0x23c>
 20123ec:	902d883a 	mov	r22,r18
 20123f0:	81000017 	ldw	r4,0(r16)
 20123f4:	80800417 	ldw	r2,16(r16)
 20123f8:	b02f883a 	mov	r23,r22
 20123fc:	81c00517 	ldw	r7,20(r16)
 2012400:	1100032e 	bgeu	r2,r4,2012410 <__sfvwrite_r+0x25c>
 2012404:	80c00217 	ldw	r3,8(r16)
 2012408:	38c7883a 	add	r3,r7,r3
 201240c:	1d801816 	blt	r3,r22,2012470 <__sfvwrite_r+0x2bc>
 2012410:	b1c03e16 	blt	r22,r7,201250c <__sfvwrite_r+0x358>
 2012414:	80800917 	ldw	r2,36(r16)
 2012418:	81400717 	ldw	r5,28(r16)
 201241c:	e00d883a 	mov	r6,fp
 2012420:	da000115 	stw	r8,4(sp)
 2012424:	a809883a 	mov	r4,r21
 2012428:	103ee83a 	callr	r2
 201242c:	102f883a 	mov	r23,r2
 2012430:	da000117 	ldw	r8,4(sp)
 2012434:	00bfe00e 	bge	zero,r2,20123b8 <_gp+0xffff32f8>
 2012438:	9de7c83a 	sub	r19,r19,r23
 201243c:	98001f26 	beq	r19,zero,20124bc <__sfvwrite_r+0x308>
 2012440:	a0800217 	ldw	r2,8(r20)
 2012444:	e5f9883a 	add	fp,fp,r23
 2012448:	95e5c83a 	sub	r18,r18,r23
 201244c:	15efc83a 	sub	r23,r2,r23
 2012450:	a5c00215 	stw	r23,8(r20)
 2012454:	b83f8426 	beq	r23,zero,2012268 <_gp+0xffff31a8>
 2012458:	903fe11e 	bne	r18,zero,20123e0 <_gp+0xffff3320>
 201245c:	8f000017 	ldw	fp,0(r17)
 2012460:	8c800117 	ldw	r18,4(r17)
 2012464:	0011883a 	mov	r8,zero
 2012468:	8c400204 	addi	r17,r17,8
 201246c:	003fdb06 	br	20123dc <_gp+0xffff331c>
 2012470:	180d883a 	mov	r6,r3
 2012474:	e00b883a 	mov	r5,fp
 2012478:	da000115 	stw	r8,4(sp)
 201247c:	d8c00015 	stw	r3,0(sp)
 2012480:	201323c0 	call	201323c <memmove>
 2012484:	d8c00017 	ldw	r3,0(sp)
 2012488:	80800017 	ldw	r2,0(r16)
 201248c:	800b883a 	mov	r5,r16
 2012490:	a809883a 	mov	r4,r21
 2012494:	10c5883a 	add	r2,r2,r3
 2012498:	80800015 	stw	r2,0(r16)
 201249c:	d8c00015 	stw	r3,0(sp)
 20124a0:	20140dc0 	call	20140dc <_fflush_r>
 20124a4:	d8c00017 	ldw	r3,0(sp)
 20124a8:	da000117 	ldw	r8,4(sp)
 20124ac:	103fc21e 	bne	r2,zero,20123b8 <_gp+0xffff32f8>
 20124b0:	182f883a 	mov	r23,r3
 20124b4:	9de7c83a 	sub	r19,r19,r23
 20124b8:	983fe11e 	bne	r19,zero,2012440 <_gp+0xffff3380>
 20124bc:	800b883a 	mov	r5,r16
 20124c0:	a809883a 	mov	r4,r21
 20124c4:	20140dc0 	call	20140dc <_fflush_r>
 20124c8:	103fbb1e 	bne	r2,zero,20123b8 <_gp+0xffff32f8>
 20124cc:	0011883a 	mov	r8,zero
 20124d0:	003fdb06 	br	2012440 <_gp+0xffff3380>
 20124d4:	94c0012e 	bgeu	r18,r19,20124dc <__sfvwrite_r+0x328>
 20124d8:	9027883a 	mov	r19,r18
 20124dc:	980d883a 	mov	r6,r19
 20124e0:	e00b883a 	mov	r5,fp
 20124e4:	201323c0 	call	201323c <memmove>
 20124e8:	80800217 	ldw	r2,8(r16)
 20124ec:	80c00017 	ldw	r3,0(r16)
 20124f0:	14c5c83a 	sub	r2,r2,r19
 20124f4:	1cc7883a 	add	r3,r3,r19
 20124f8:	80800215 	stw	r2,8(r16)
 20124fc:	80c00015 	stw	r3,0(r16)
 2012500:	10004326 	beq	r2,zero,2012610 <__sfvwrite_r+0x45c>
 2012504:	9805883a 	mov	r2,r19
 2012508:	003f8306 	br	2012318 <_gp+0xffff3258>
 201250c:	b00d883a 	mov	r6,r22
 2012510:	e00b883a 	mov	r5,fp
 2012514:	da000115 	stw	r8,4(sp)
 2012518:	201323c0 	call	201323c <memmove>
 201251c:	80800217 	ldw	r2,8(r16)
 2012520:	80c00017 	ldw	r3,0(r16)
 2012524:	da000117 	ldw	r8,4(sp)
 2012528:	1585c83a 	sub	r2,r2,r22
 201252c:	1dad883a 	add	r22,r3,r22
 2012530:	80800215 	stw	r2,8(r16)
 2012534:	85800015 	stw	r22,0(r16)
 2012538:	003fbf06 	br	2012438 <_gp+0xffff3378>
 201253c:	81000017 	ldw	r4,0(r16)
 2012540:	9027883a 	mov	r19,r18
 2012544:	902f883a 	mov	r23,r18
 2012548:	003f6906 	br	20122f0 <_gp+0xffff3230>
 201254c:	900d883a 	mov	r6,r18
 2012550:	01400284 	movi	r5,10
 2012554:	e009883a 	mov	r4,fp
 2012558:	20130100 	call	2013010 <memchr>
 201255c:	10003e26 	beq	r2,zero,2012658 <__sfvwrite_r+0x4a4>
 2012560:	10800044 	addi	r2,r2,1
 2012564:	1727c83a 	sub	r19,r2,fp
 2012568:	02000044 	movi	r8,1
 201256c:	003f9d06 	br	20123e4 <_gp+0xffff3324>
 2012570:	80800517 	ldw	r2,20(r16)
 2012574:	81400417 	ldw	r5,16(r16)
 2012578:	81c00017 	ldw	r7,0(r16)
 201257c:	10a7883a 	add	r19,r2,r2
 2012580:	9885883a 	add	r2,r19,r2
 2012584:	1026d7fa 	srli	r19,r2,31
 2012588:	396dc83a 	sub	r22,r7,r5
 201258c:	b1000044 	addi	r4,r22,1
 2012590:	9885883a 	add	r2,r19,r2
 2012594:	1027d07a 	srai	r19,r2,1
 2012598:	2485883a 	add	r2,r4,r18
 201259c:	980d883a 	mov	r6,r19
 20125a0:	9880022e 	bgeu	r19,r2,20125ac <__sfvwrite_r+0x3f8>
 20125a4:	1027883a 	mov	r19,r2
 20125a8:	100d883a 	mov	r6,r2
 20125ac:	18c1000c 	andi	r3,r3,1024
 20125b0:	18001c26 	beq	r3,zero,2012624 <__sfvwrite_r+0x470>
 20125b4:	300b883a 	mov	r5,r6
 20125b8:	a809883a 	mov	r4,r21
 20125bc:	20128040 	call	2012804 <_malloc_r>
 20125c0:	102f883a 	mov	r23,r2
 20125c4:	10002926 	beq	r2,zero,201266c <__sfvwrite_r+0x4b8>
 20125c8:	81400417 	ldw	r5,16(r16)
 20125cc:	b00d883a 	mov	r6,r22
 20125d0:	1009883a 	mov	r4,r2
 20125d4:	20130f40 	call	20130f4 <memcpy>
 20125d8:	8080030b 	ldhu	r2,12(r16)
 20125dc:	00fedfc4 	movi	r3,-1153
 20125e0:	10c4703a 	and	r2,r2,r3
 20125e4:	10802014 	ori	r2,r2,128
 20125e8:	8080030d 	sth	r2,12(r16)
 20125ec:	bd89883a 	add	r4,r23,r22
 20125f0:	9d8fc83a 	sub	r7,r19,r22
 20125f4:	85c00415 	stw	r23,16(r16)
 20125f8:	84c00515 	stw	r19,20(r16)
 20125fc:	81000015 	stw	r4,0(r16)
 2012600:	9027883a 	mov	r19,r18
 2012604:	81c00215 	stw	r7,8(r16)
 2012608:	902f883a 	mov	r23,r18
 201260c:	003f3806 	br	20122f0 <_gp+0xffff3230>
 2012610:	800b883a 	mov	r5,r16
 2012614:	a809883a 	mov	r4,r21
 2012618:	20140dc0 	call	20140dc <_fflush_r>
 201261c:	103fb926 	beq	r2,zero,2012504 <_gp+0xffff3444>
 2012620:	003f6506 	br	20123b8 <_gp+0xffff32f8>
 2012624:	a809883a 	mov	r4,r21
 2012628:	20134c00 	call	20134c0 <_realloc_r>
 201262c:	102f883a 	mov	r23,r2
 2012630:	103fee1e 	bne	r2,zero,20125ec <_gp+0xffff352c>
 2012634:	81400417 	ldw	r5,16(r16)
 2012638:	a809883a 	mov	r4,r21
 201263c:	201428c0 	call	201428c <_free_r>
 2012640:	8080030b 	ldhu	r2,12(r16)
 2012644:	00ffdfc4 	movi	r3,-129
 2012648:	1884703a 	and	r2,r3,r2
 201264c:	00c00304 	movi	r3,12
 2012650:	a8c00015 	stw	r3,0(r21)
 2012654:	003f5906 	br	20123bc <_gp+0xffff32fc>
 2012658:	94c00044 	addi	r19,r18,1
 201265c:	02000044 	movi	r8,1
 2012660:	003f6006 	br	20123e4 <_gp+0xffff3324>
 2012664:	00bfffc4 	movi	r2,-1
 2012668:	003f0006 	br	201226c <_gp+0xffff31ac>
 201266c:	00800304 	movi	r2,12
 2012670:	a8800015 	stw	r2,0(r21)
 2012674:	8080030b 	ldhu	r2,12(r16)
 2012678:	003f5006 	br	20123bc <_gp+0xffff32fc>

0201267c <_fwalk>:
 201267c:	defff704 	addi	sp,sp,-36
 2012680:	dd000415 	stw	r20,16(sp)
 2012684:	dfc00815 	stw	ra,32(sp)
 2012688:	ddc00715 	stw	r23,28(sp)
 201268c:	dd800615 	stw	r22,24(sp)
 2012690:	dd400515 	stw	r21,20(sp)
 2012694:	dcc00315 	stw	r19,12(sp)
 2012698:	dc800215 	stw	r18,8(sp)
 201269c:	dc400115 	stw	r17,4(sp)
 20126a0:	dc000015 	stw	r16,0(sp)
 20126a4:	2500b804 	addi	r20,r4,736
 20126a8:	a0002326 	beq	r20,zero,2012738 <_fwalk+0xbc>
 20126ac:	282b883a 	mov	r21,r5
 20126b0:	002f883a 	mov	r23,zero
 20126b4:	05800044 	movi	r22,1
 20126b8:	04ffffc4 	movi	r19,-1
 20126bc:	a4400117 	ldw	r17,4(r20)
 20126c0:	a4800217 	ldw	r18,8(r20)
 20126c4:	8c7fffc4 	addi	r17,r17,-1
 20126c8:	88000d16 	blt	r17,zero,2012700 <_fwalk+0x84>
 20126cc:	94000304 	addi	r16,r18,12
 20126d0:	94800384 	addi	r18,r18,14
 20126d4:	8080000b 	ldhu	r2,0(r16)
 20126d8:	8c7fffc4 	addi	r17,r17,-1
 20126dc:	813ffd04 	addi	r4,r16,-12
 20126e0:	b080042e 	bgeu	r22,r2,20126f4 <_fwalk+0x78>
 20126e4:	9080000f 	ldh	r2,0(r18)
 20126e8:	14c00226 	beq	r2,r19,20126f4 <_fwalk+0x78>
 20126ec:	a83ee83a 	callr	r21
 20126f0:	b8aeb03a 	or	r23,r23,r2
 20126f4:	84001a04 	addi	r16,r16,104
 20126f8:	94801a04 	addi	r18,r18,104
 20126fc:	8cfff51e 	bne	r17,r19,20126d4 <_gp+0xffff3614>
 2012700:	a5000017 	ldw	r20,0(r20)
 2012704:	a03fed1e 	bne	r20,zero,20126bc <_gp+0xffff35fc>
 2012708:	b805883a 	mov	r2,r23
 201270c:	dfc00817 	ldw	ra,32(sp)
 2012710:	ddc00717 	ldw	r23,28(sp)
 2012714:	dd800617 	ldw	r22,24(sp)
 2012718:	dd400517 	ldw	r21,20(sp)
 201271c:	dd000417 	ldw	r20,16(sp)
 2012720:	dcc00317 	ldw	r19,12(sp)
 2012724:	dc800217 	ldw	r18,8(sp)
 2012728:	dc400117 	ldw	r17,4(sp)
 201272c:	dc000017 	ldw	r16,0(sp)
 2012730:	dec00904 	addi	sp,sp,36
 2012734:	f800283a 	ret
 2012738:	002f883a 	mov	r23,zero
 201273c:	003ff206 	br	2012708 <_gp+0xffff3648>

02012740 <_fwalk_reent>:
 2012740:	defff704 	addi	sp,sp,-36
 2012744:	dd000415 	stw	r20,16(sp)
 2012748:	dfc00815 	stw	ra,32(sp)
 201274c:	ddc00715 	stw	r23,28(sp)
 2012750:	dd800615 	stw	r22,24(sp)
 2012754:	dd400515 	stw	r21,20(sp)
 2012758:	dcc00315 	stw	r19,12(sp)
 201275c:	dc800215 	stw	r18,8(sp)
 2012760:	dc400115 	stw	r17,4(sp)
 2012764:	dc000015 	stw	r16,0(sp)
 2012768:	2500b804 	addi	r20,r4,736
 201276c:	a0002326 	beq	r20,zero,20127fc <_fwalk_reent+0xbc>
 2012770:	282b883a 	mov	r21,r5
 2012774:	2027883a 	mov	r19,r4
 2012778:	002f883a 	mov	r23,zero
 201277c:	05800044 	movi	r22,1
 2012780:	04bfffc4 	movi	r18,-1
 2012784:	a4400117 	ldw	r17,4(r20)
 2012788:	a4000217 	ldw	r16,8(r20)
 201278c:	8c7fffc4 	addi	r17,r17,-1
 2012790:	88000c16 	blt	r17,zero,20127c4 <_fwalk_reent+0x84>
 2012794:	84000304 	addi	r16,r16,12
 2012798:	8080000b 	ldhu	r2,0(r16)
 201279c:	8c7fffc4 	addi	r17,r17,-1
 20127a0:	817ffd04 	addi	r5,r16,-12
 20127a4:	b080052e 	bgeu	r22,r2,20127bc <_fwalk_reent+0x7c>
 20127a8:	8080008f 	ldh	r2,2(r16)
 20127ac:	9809883a 	mov	r4,r19
 20127b0:	14800226 	beq	r2,r18,20127bc <_fwalk_reent+0x7c>
 20127b4:	a83ee83a 	callr	r21
 20127b8:	b8aeb03a 	or	r23,r23,r2
 20127bc:	84001a04 	addi	r16,r16,104
 20127c0:	8cbff51e 	bne	r17,r18,2012798 <_gp+0xffff36d8>
 20127c4:	a5000017 	ldw	r20,0(r20)
 20127c8:	a03fee1e 	bne	r20,zero,2012784 <_gp+0xffff36c4>
 20127cc:	b805883a 	mov	r2,r23
 20127d0:	dfc00817 	ldw	ra,32(sp)
 20127d4:	ddc00717 	ldw	r23,28(sp)
 20127d8:	dd800617 	ldw	r22,24(sp)
 20127dc:	dd400517 	ldw	r21,20(sp)
 20127e0:	dd000417 	ldw	r20,16(sp)
 20127e4:	dcc00317 	ldw	r19,12(sp)
 20127e8:	dc800217 	ldw	r18,8(sp)
 20127ec:	dc400117 	ldw	r17,4(sp)
 20127f0:	dc000017 	ldw	r16,0(sp)
 20127f4:	dec00904 	addi	sp,sp,36
 20127f8:	f800283a 	ret
 20127fc:	002f883a 	mov	r23,zero
 2012800:	003ff206 	br	20127cc <_gp+0xffff370c>

02012804 <_malloc_r>:
 2012804:	defff504 	addi	sp,sp,-44
 2012808:	dc800315 	stw	r18,12(sp)
 201280c:	dfc00a15 	stw	ra,40(sp)
 2012810:	df000915 	stw	fp,36(sp)
 2012814:	ddc00815 	stw	r23,32(sp)
 2012818:	dd800715 	stw	r22,28(sp)
 201281c:	dd400615 	stw	r21,24(sp)
 2012820:	dd000515 	stw	r20,20(sp)
 2012824:	dcc00415 	stw	r19,16(sp)
 2012828:	dc400215 	stw	r17,8(sp)
 201282c:	dc000115 	stw	r16,4(sp)
 2012830:	288002c4 	addi	r2,r5,11
 2012834:	00c00584 	movi	r3,22
 2012838:	2025883a 	mov	r18,r4
 201283c:	18807f2e 	bgeu	r3,r2,2012a3c <_malloc_r+0x238>
 2012840:	047ffe04 	movi	r17,-8
 2012844:	1462703a 	and	r17,r2,r17
 2012848:	8800a316 	blt	r17,zero,2012ad8 <_malloc_r+0x2d4>
 201284c:	8940a236 	bltu	r17,r5,2012ad8 <_malloc_r+0x2d4>
 2012850:	2014ce80 	call	2014ce8 <__malloc_lock>
 2012854:	00807dc4 	movi	r2,503
 2012858:	1441e92e 	bgeu	r2,r17,2013000 <_malloc_r+0x7fc>
 201285c:	8804d27a 	srli	r2,r17,9
 2012860:	1000a126 	beq	r2,zero,2012ae8 <_malloc_r+0x2e4>
 2012864:	00c00104 	movi	r3,4
 2012868:	18811e36 	bltu	r3,r2,2012ce4 <_malloc_r+0x4e0>
 201286c:	8804d1ba 	srli	r2,r17,6
 2012870:	12000e44 	addi	r8,r2,57
 2012874:	11c00e04 	addi	r7,r2,56
 2012878:	4209883a 	add	r4,r8,r8
 201287c:	04c08074 	movhi	r19,513
 2012880:	2109883a 	add	r4,r4,r4
 2012884:	9cdab904 	addi	r19,r19,27364
 2012888:	2109883a 	add	r4,r4,r4
 201288c:	9909883a 	add	r4,r19,r4
 2012890:	24000117 	ldw	r16,4(r4)
 2012894:	213ffe04 	addi	r4,r4,-8
 2012898:	24009726 	beq	r4,r16,2012af8 <_malloc_r+0x2f4>
 201289c:	80800117 	ldw	r2,4(r16)
 20128a0:	01bfff04 	movi	r6,-4
 20128a4:	014003c4 	movi	r5,15
 20128a8:	1184703a 	and	r2,r2,r6
 20128ac:	1447c83a 	sub	r3,r2,r17
 20128b0:	28c00716 	blt	r5,r3,20128d0 <_malloc_r+0xcc>
 20128b4:	1800920e 	bge	r3,zero,2012b00 <_malloc_r+0x2fc>
 20128b8:	84000317 	ldw	r16,12(r16)
 20128bc:	24008e26 	beq	r4,r16,2012af8 <_malloc_r+0x2f4>
 20128c0:	80800117 	ldw	r2,4(r16)
 20128c4:	1184703a 	and	r2,r2,r6
 20128c8:	1447c83a 	sub	r3,r2,r17
 20128cc:	28fff90e 	bge	r5,r3,20128b4 <_gp+0xffff37f4>
 20128d0:	3809883a 	mov	r4,r7
 20128d4:	01808074 	movhi	r6,513
 20128d8:	9c000417 	ldw	r16,16(r19)
 20128dc:	319ab904 	addi	r6,r6,27364
 20128e0:	32000204 	addi	r8,r6,8
 20128e4:	82013426 	beq	r16,r8,2012db8 <_malloc_r+0x5b4>
 20128e8:	80c00117 	ldw	r3,4(r16)
 20128ec:	00bfff04 	movi	r2,-4
 20128f0:	188e703a 	and	r7,r3,r2
 20128f4:	3c45c83a 	sub	r2,r7,r17
 20128f8:	00c003c4 	movi	r3,15
 20128fc:	18811f16 	blt	r3,r2,2012d7c <_malloc_r+0x578>
 2012900:	32000515 	stw	r8,20(r6)
 2012904:	32000415 	stw	r8,16(r6)
 2012908:	10007f0e 	bge	r2,zero,2012b08 <_malloc_r+0x304>
 201290c:	00807fc4 	movi	r2,511
 2012910:	11c0fd36 	bltu	r2,r7,2012d08 <_malloc_r+0x504>
 2012914:	3806d0fa 	srli	r3,r7,3
 2012918:	01c00044 	movi	r7,1
 201291c:	30800117 	ldw	r2,4(r6)
 2012920:	19400044 	addi	r5,r3,1
 2012924:	294b883a 	add	r5,r5,r5
 2012928:	1807d0ba 	srai	r3,r3,2
 201292c:	294b883a 	add	r5,r5,r5
 2012930:	294b883a 	add	r5,r5,r5
 2012934:	298b883a 	add	r5,r5,r6
 2012938:	38c6983a 	sll	r3,r7,r3
 201293c:	29c00017 	ldw	r7,0(r5)
 2012940:	2a7ffe04 	addi	r9,r5,-8
 2012944:	1886b03a 	or	r3,r3,r2
 2012948:	82400315 	stw	r9,12(r16)
 201294c:	81c00215 	stw	r7,8(r16)
 2012950:	30c00115 	stw	r3,4(r6)
 2012954:	2c000015 	stw	r16,0(r5)
 2012958:	3c000315 	stw	r16,12(r7)
 201295c:	2005d0ba 	srai	r2,r4,2
 2012960:	01400044 	movi	r5,1
 2012964:	288a983a 	sll	r5,r5,r2
 2012968:	19406f36 	bltu	r3,r5,2012b28 <_malloc_r+0x324>
 201296c:	28c4703a 	and	r2,r5,r3
 2012970:	10000a1e 	bne	r2,zero,201299c <_malloc_r+0x198>
 2012974:	00bfff04 	movi	r2,-4
 2012978:	294b883a 	add	r5,r5,r5
 201297c:	2088703a 	and	r4,r4,r2
 2012980:	28c4703a 	and	r2,r5,r3
 2012984:	21000104 	addi	r4,r4,4
 2012988:	1000041e 	bne	r2,zero,201299c <_malloc_r+0x198>
 201298c:	294b883a 	add	r5,r5,r5
 2012990:	28c4703a 	and	r2,r5,r3
 2012994:	21000104 	addi	r4,r4,4
 2012998:	103ffc26 	beq	r2,zero,201298c <_gp+0xffff38cc>
 201299c:	02bfff04 	movi	r10,-4
 20129a0:	024003c4 	movi	r9,15
 20129a4:	21800044 	addi	r6,r4,1
 20129a8:	318d883a 	add	r6,r6,r6
 20129ac:	318d883a 	add	r6,r6,r6
 20129b0:	318d883a 	add	r6,r6,r6
 20129b4:	998d883a 	add	r6,r19,r6
 20129b8:	333ffe04 	addi	r12,r6,-8
 20129bc:	2017883a 	mov	r11,r4
 20129c0:	31800104 	addi	r6,r6,4
 20129c4:	34000017 	ldw	r16,0(r6)
 20129c8:	31fffd04 	addi	r7,r6,-12
 20129cc:	81c0041e 	bne	r16,r7,20129e0 <_malloc_r+0x1dc>
 20129d0:	0000fb06 	br	2012dc0 <_malloc_r+0x5bc>
 20129d4:	1801030e 	bge	r3,zero,2012de4 <_malloc_r+0x5e0>
 20129d8:	84000317 	ldw	r16,12(r16)
 20129dc:	81c0f826 	beq	r16,r7,2012dc0 <_malloc_r+0x5bc>
 20129e0:	80800117 	ldw	r2,4(r16)
 20129e4:	1284703a 	and	r2,r2,r10
 20129e8:	1447c83a 	sub	r3,r2,r17
 20129ec:	48fff90e 	bge	r9,r3,20129d4 <_gp+0xffff3914>
 20129f0:	80800317 	ldw	r2,12(r16)
 20129f4:	81000217 	ldw	r4,8(r16)
 20129f8:	89400054 	ori	r5,r17,1
 20129fc:	81400115 	stw	r5,4(r16)
 2012a00:	20800315 	stw	r2,12(r4)
 2012a04:	11000215 	stw	r4,8(r2)
 2012a08:	8463883a 	add	r17,r16,r17
 2012a0c:	9c400515 	stw	r17,20(r19)
 2012a10:	9c400415 	stw	r17,16(r19)
 2012a14:	18800054 	ori	r2,r3,1
 2012a18:	88800115 	stw	r2,4(r17)
 2012a1c:	8a000315 	stw	r8,12(r17)
 2012a20:	8a000215 	stw	r8,8(r17)
 2012a24:	88e3883a 	add	r17,r17,r3
 2012a28:	88c00015 	stw	r3,0(r17)
 2012a2c:	9009883a 	mov	r4,r18
 2012a30:	2014cec0 	call	2014cec <__malloc_unlock>
 2012a34:	80800204 	addi	r2,r16,8
 2012a38:	00001b06 	br	2012aa8 <_malloc_r+0x2a4>
 2012a3c:	04400404 	movi	r17,16
 2012a40:	89402536 	bltu	r17,r5,2012ad8 <_malloc_r+0x2d4>
 2012a44:	2014ce80 	call	2014ce8 <__malloc_lock>
 2012a48:	00800184 	movi	r2,6
 2012a4c:	01000084 	movi	r4,2
 2012a50:	04c08074 	movhi	r19,513
 2012a54:	1085883a 	add	r2,r2,r2
 2012a58:	9cdab904 	addi	r19,r19,27364
 2012a5c:	1085883a 	add	r2,r2,r2
 2012a60:	9885883a 	add	r2,r19,r2
 2012a64:	14000117 	ldw	r16,4(r2)
 2012a68:	10fffe04 	addi	r3,r2,-8
 2012a6c:	80c0d926 	beq	r16,r3,2012dd4 <_malloc_r+0x5d0>
 2012a70:	80c00117 	ldw	r3,4(r16)
 2012a74:	81000317 	ldw	r4,12(r16)
 2012a78:	00bfff04 	movi	r2,-4
 2012a7c:	1884703a 	and	r2,r3,r2
 2012a80:	81400217 	ldw	r5,8(r16)
 2012a84:	8085883a 	add	r2,r16,r2
 2012a88:	10c00117 	ldw	r3,4(r2)
 2012a8c:	29000315 	stw	r4,12(r5)
 2012a90:	21400215 	stw	r5,8(r4)
 2012a94:	18c00054 	ori	r3,r3,1
 2012a98:	10c00115 	stw	r3,4(r2)
 2012a9c:	9009883a 	mov	r4,r18
 2012aa0:	2014cec0 	call	2014cec <__malloc_unlock>
 2012aa4:	80800204 	addi	r2,r16,8
 2012aa8:	dfc00a17 	ldw	ra,40(sp)
 2012aac:	df000917 	ldw	fp,36(sp)
 2012ab0:	ddc00817 	ldw	r23,32(sp)
 2012ab4:	dd800717 	ldw	r22,28(sp)
 2012ab8:	dd400617 	ldw	r21,24(sp)
 2012abc:	dd000517 	ldw	r20,20(sp)
 2012ac0:	dcc00417 	ldw	r19,16(sp)
 2012ac4:	dc800317 	ldw	r18,12(sp)
 2012ac8:	dc400217 	ldw	r17,8(sp)
 2012acc:	dc000117 	ldw	r16,4(sp)
 2012ad0:	dec00b04 	addi	sp,sp,44
 2012ad4:	f800283a 	ret
 2012ad8:	00800304 	movi	r2,12
 2012adc:	90800015 	stw	r2,0(r18)
 2012ae0:	0005883a 	mov	r2,zero
 2012ae4:	003ff006 	br	2012aa8 <_gp+0xffff39e8>
 2012ae8:	01002004 	movi	r4,128
 2012aec:	02001004 	movi	r8,64
 2012af0:	01c00fc4 	movi	r7,63
 2012af4:	003f6106 	br	201287c <_gp+0xffff37bc>
 2012af8:	4009883a 	mov	r4,r8
 2012afc:	003f7506 	br	20128d4 <_gp+0xffff3814>
 2012b00:	81000317 	ldw	r4,12(r16)
 2012b04:	003fde06 	br	2012a80 <_gp+0xffff39c0>
 2012b08:	81c5883a 	add	r2,r16,r7
 2012b0c:	11400117 	ldw	r5,4(r2)
 2012b10:	9009883a 	mov	r4,r18
 2012b14:	29400054 	ori	r5,r5,1
 2012b18:	11400115 	stw	r5,4(r2)
 2012b1c:	2014cec0 	call	2014cec <__malloc_unlock>
 2012b20:	80800204 	addi	r2,r16,8
 2012b24:	003fe006 	br	2012aa8 <_gp+0xffff39e8>
 2012b28:	9c000217 	ldw	r16,8(r19)
 2012b2c:	00bfff04 	movi	r2,-4
 2012b30:	85800117 	ldw	r22,4(r16)
 2012b34:	b0ac703a 	and	r22,r22,r2
 2012b38:	b4400336 	bltu	r22,r17,2012b48 <_malloc_r+0x344>
 2012b3c:	b445c83a 	sub	r2,r22,r17
 2012b40:	00c003c4 	movi	r3,15
 2012b44:	18805d16 	blt	r3,r2,2012cbc <_malloc_r+0x4b8>
 2012b48:	05c08074 	movhi	r23,513
 2012b4c:	00808074 	movhi	r2,513
 2012b50:	109eca04 	addi	r2,r2,31528
 2012b54:	bddc3304 	addi	r23,r23,28876
 2012b58:	15400017 	ldw	r21,0(r2)
 2012b5c:	b8c00017 	ldw	r3,0(r23)
 2012b60:	00bfffc4 	movi	r2,-1
 2012b64:	858d883a 	add	r6,r16,r22
 2012b68:	8d6b883a 	add	r21,r17,r21
 2012b6c:	1880ea26 	beq	r3,r2,2012f18 <_malloc_r+0x714>
 2012b70:	ad4403c4 	addi	r21,r21,4111
 2012b74:	00bc0004 	movi	r2,-4096
 2012b78:	a8aa703a 	and	r21,r21,r2
 2012b7c:	a80b883a 	mov	r5,r21
 2012b80:	9009883a 	mov	r4,r18
 2012b84:	d9800015 	stw	r6,0(sp)
 2012b88:	2013a240 	call	2013a24 <_sbrk_r>
 2012b8c:	1029883a 	mov	r20,r2
 2012b90:	00bfffc4 	movi	r2,-1
 2012b94:	d9800017 	ldw	r6,0(sp)
 2012b98:	a080e826 	beq	r20,r2,2012f3c <_malloc_r+0x738>
 2012b9c:	a180a636 	bltu	r20,r6,2012e38 <_malloc_r+0x634>
 2012ba0:	07008074 	movhi	fp,513
 2012ba4:	e71ecf04 	addi	fp,fp,31548
 2012ba8:	e0800017 	ldw	r2,0(fp)
 2012bac:	a887883a 	add	r3,r21,r2
 2012bb0:	e0c00015 	stw	r3,0(fp)
 2012bb4:	3500e626 	beq	r6,r20,2012f50 <_malloc_r+0x74c>
 2012bb8:	b9000017 	ldw	r4,0(r23)
 2012bbc:	00bfffc4 	movi	r2,-1
 2012bc0:	2080ee26 	beq	r4,r2,2012f7c <_malloc_r+0x778>
 2012bc4:	a185c83a 	sub	r2,r20,r6
 2012bc8:	10c5883a 	add	r2,r2,r3
 2012bcc:	e0800015 	stw	r2,0(fp)
 2012bd0:	a0c001cc 	andi	r3,r20,7
 2012bd4:	1800bc26 	beq	r3,zero,2012ec8 <_malloc_r+0x6c4>
 2012bd8:	a0e9c83a 	sub	r20,r20,r3
 2012bdc:	00840204 	movi	r2,4104
 2012be0:	a5000204 	addi	r20,r20,8
 2012be4:	10c7c83a 	sub	r3,r2,r3
 2012be8:	a545883a 	add	r2,r20,r21
 2012bec:	1083ffcc 	andi	r2,r2,4095
 2012bf0:	18abc83a 	sub	r21,r3,r2
 2012bf4:	a80b883a 	mov	r5,r21
 2012bf8:	9009883a 	mov	r4,r18
 2012bfc:	2013a240 	call	2013a24 <_sbrk_r>
 2012c00:	00ffffc4 	movi	r3,-1
 2012c04:	10c0e126 	beq	r2,r3,2012f8c <_malloc_r+0x788>
 2012c08:	1505c83a 	sub	r2,r2,r20
 2012c0c:	1545883a 	add	r2,r2,r21
 2012c10:	10800054 	ori	r2,r2,1
 2012c14:	e0c00017 	ldw	r3,0(fp)
 2012c18:	9d000215 	stw	r20,8(r19)
 2012c1c:	a0800115 	stw	r2,4(r20)
 2012c20:	a8c7883a 	add	r3,r21,r3
 2012c24:	e0c00015 	stw	r3,0(fp)
 2012c28:	84c00e26 	beq	r16,r19,2012c64 <_malloc_r+0x460>
 2012c2c:	018003c4 	movi	r6,15
 2012c30:	3580a72e 	bgeu	r6,r22,2012ed0 <_malloc_r+0x6cc>
 2012c34:	81400117 	ldw	r5,4(r16)
 2012c38:	013ffe04 	movi	r4,-8
 2012c3c:	b0bffd04 	addi	r2,r22,-12
 2012c40:	1104703a 	and	r2,r2,r4
 2012c44:	2900004c 	andi	r4,r5,1
 2012c48:	2088b03a 	or	r4,r4,r2
 2012c4c:	81000115 	stw	r4,4(r16)
 2012c50:	01400144 	movi	r5,5
 2012c54:	8089883a 	add	r4,r16,r2
 2012c58:	21400115 	stw	r5,4(r4)
 2012c5c:	21400215 	stw	r5,8(r4)
 2012c60:	3080cd36 	bltu	r6,r2,2012f98 <_malloc_r+0x794>
 2012c64:	00808074 	movhi	r2,513
 2012c68:	109ec904 	addi	r2,r2,31524
 2012c6c:	11000017 	ldw	r4,0(r2)
 2012c70:	20c0012e 	bgeu	r4,r3,2012c78 <_malloc_r+0x474>
 2012c74:	10c00015 	stw	r3,0(r2)
 2012c78:	00808074 	movhi	r2,513
 2012c7c:	109ec804 	addi	r2,r2,31520
 2012c80:	11000017 	ldw	r4,0(r2)
 2012c84:	9c000217 	ldw	r16,8(r19)
 2012c88:	20c0012e 	bgeu	r4,r3,2012c90 <_malloc_r+0x48c>
 2012c8c:	10c00015 	stw	r3,0(r2)
 2012c90:	80c00117 	ldw	r3,4(r16)
 2012c94:	00bfff04 	movi	r2,-4
 2012c98:	1886703a 	and	r3,r3,r2
 2012c9c:	1c45c83a 	sub	r2,r3,r17
 2012ca0:	1c400236 	bltu	r3,r17,2012cac <_malloc_r+0x4a8>
 2012ca4:	00c003c4 	movi	r3,15
 2012ca8:	18800416 	blt	r3,r2,2012cbc <_malloc_r+0x4b8>
 2012cac:	9009883a 	mov	r4,r18
 2012cb0:	2014cec0 	call	2014cec <__malloc_unlock>
 2012cb4:	0005883a 	mov	r2,zero
 2012cb8:	003f7b06 	br	2012aa8 <_gp+0xffff39e8>
 2012cbc:	88c00054 	ori	r3,r17,1
 2012cc0:	80c00115 	stw	r3,4(r16)
 2012cc4:	8463883a 	add	r17,r16,r17
 2012cc8:	10800054 	ori	r2,r2,1
 2012ccc:	9c400215 	stw	r17,8(r19)
 2012cd0:	88800115 	stw	r2,4(r17)
 2012cd4:	9009883a 	mov	r4,r18
 2012cd8:	2014cec0 	call	2014cec <__malloc_unlock>
 2012cdc:	80800204 	addi	r2,r16,8
 2012ce0:	003f7106 	br	2012aa8 <_gp+0xffff39e8>
 2012ce4:	00c00504 	movi	r3,20
 2012ce8:	18804a2e 	bgeu	r3,r2,2012e14 <_malloc_r+0x610>
 2012cec:	00c01504 	movi	r3,84
 2012cf0:	18806e36 	bltu	r3,r2,2012eac <_malloc_r+0x6a8>
 2012cf4:	8804d33a 	srli	r2,r17,12
 2012cf8:	12001bc4 	addi	r8,r2,111
 2012cfc:	11c01b84 	addi	r7,r2,110
 2012d00:	4209883a 	add	r4,r8,r8
 2012d04:	003edd06 	br	201287c <_gp+0xffff37bc>
 2012d08:	3804d27a 	srli	r2,r7,9
 2012d0c:	00c00104 	movi	r3,4
 2012d10:	1880442e 	bgeu	r3,r2,2012e24 <_malloc_r+0x620>
 2012d14:	00c00504 	movi	r3,20
 2012d18:	18808136 	bltu	r3,r2,2012f20 <_malloc_r+0x71c>
 2012d1c:	11401704 	addi	r5,r2,92
 2012d20:	10c016c4 	addi	r3,r2,91
 2012d24:	294b883a 	add	r5,r5,r5
 2012d28:	294b883a 	add	r5,r5,r5
 2012d2c:	294b883a 	add	r5,r5,r5
 2012d30:	994b883a 	add	r5,r19,r5
 2012d34:	28800017 	ldw	r2,0(r5)
 2012d38:	01808074 	movhi	r6,513
 2012d3c:	297ffe04 	addi	r5,r5,-8
 2012d40:	319ab904 	addi	r6,r6,27364
 2012d44:	28806526 	beq	r5,r2,2012edc <_malloc_r+0x6d8>
 2012d48:	01bfff04 	movi	r6,-4
 2012d4c:	10c00117 	ldw	r3,4(r2)
 2012d50:	1986703a 	and	r3,r3,r6
 2012d54:	38c0022e 	bgeu	r7,r3,2012d60 <_malloc_r+0x55c>
 2012d58:	10800217 	ldw	r2,8(r2)
 2012d5c:	28bffb1e 	bne	r5,r2,2012d4c <_gp+0xffff3c8c>
 2012d60:	11400317 	ldw	r5,12(r2)
 2012d64:	98c00117 	ldw	r3,4(r19)
 2012d68:	81400315 	stw	r5,12(r16)
 2012d6c:	80800215 	stw	r2,8(r16)
 2012d70:	2c000215 	stw	r16,8(r5)
 2012d74:	14000315 	stw	r16,12(r2)
 2012d78:	003ef806 	br	201295c <_gp+0xffff389c>
 2012d7c:	88c00054 	ori	r3,r17,1
 2012d80:	80c00115 	stw	r3,4(r16)
 2012d84:	8463883a 	add	r17,r16,r17
 2012d88:	34400515 	stw	r17,20(r6)
 2012d8c:	34400415 	stw	r17,16(r6)
 2012d90:	10c00054 	ori	r3,r2,1
 2012d94:	8a000315 	stw	r8,12(r17)
 2012d98:	8a000215 	stw	r8,8(r17)
 2012d9c:	88c00115 	stw	r3,4(r17)
 2012da0:	88a3883a 	add	r17,r17,r2
 2012da4:	88800015 	stw	r2,0(r17)
 2012da8:	9009883a 	mov	r4,r18
 2012dac:	2014cec0 	call	2014cec <__malloc_unlock>
 2012db0:	80800204 	addi	r2,r16,8
 2012db4:	003f3c06 	br	2012aa8 <_gp+0xffff39e8>
 2012db8:	30c00117 	ldw	r3,4(r6)
 2012dbc:	003ee706 	br	201295c <_gp+0xffff389c>
 2012dc0:	5ac00044 	addi	r11,r11,1
 2012dc4:	588000cc 	andi	r2,r11,3
 2012dc8:	31800204 	addi	r6,r6,8
 2012dcc:	103efd1e 	bne	r2,zero,20129c4 <_gp+0xffff3904>
 2012dd0:	00002406 	br	2012e64 <_malloc_r+0x660>
 2012dd4:	14000317 	ldw	r16,12(r2)
 2012dd8:	143f251e 	bne	r2,r16,2012a70 <_gp+0xffff39b0>
 2012ddc:	21000084 	addi	r4,r4,2
 2012de0:	003ebc06 	br	20128d4 <_gp+0xffff3814>
 2012de4:	8085883a 	add	r2,r16,r2
 2012de8:	10c00117 	ldw	r3,4(r2)
 2012dec:	81000317 	ldw	r4,12(r16)
 2012df0:	81400217 	ldw	r5,8(r16)
 2012df4:	18c00054 	ori	r3,r3,1
 2012df8:	10c00115 	stw	r3,4(r2)
 2012dfc:	29000315 	stw	r4,12(r5)
 2012e00:	21400215 	stw	r5,8(r4)
 2012e04:	9009883a 	mov	r4,r18
 2012e08:	2014cec0 	call	2014cec <__malloc_unlock>
 2012e0c:	80800204 	addi	r2,r16,8
 2012e10:	003f2506 	br	2012aa8 <_gp+0xffff39e8>
 2012e14:	12001704 	addi	r8,r2,92
 2012e18:	11c016c4 	addi	r7,r2,91
 2012e1c:	4209883a 	add	r4,r8,r8
 2012e20:	003e9606 	br	201287c <_gp+0xffff37bc>
 2012e24:	3804d1ba 	srli	r2,r7,6
 2012e28:	11400e44 	addi	r5,r2,57
 2012e2c:	10c00e04 	addi	r3,r2,56
 2012e30:	294b883a 	add	r5,r5,r5
 2012e34:	003fbc06 	br	2012d28 <_gp+0xffff3c68>
 2012e38:	84ff5926 	beq	r16,r19,2012ba0 <_gp+0xffff3ae0>
 2012e3c:	00808074 	movhi	r2,513
 2012e40:	109ab904 	addi	r2,r2,27364
 2012e44:	14000217 	ldw	r16,8(r2)
 2012e48:	00bfff04 	movi	r2,-4
 2012e4c:	80c00117 	ldw	r3,4(r16)
 2012e50:	1886703a 	and	r3,r3,r2
 2012e54:	003f9106 	br	2012c9c <_gp+0xffff3bdc>
 2012e58:	60800217 	ldw	r2,8(r12)
 2012e5c:	213fffc4 	addi	r4,r4,-1
 2012e60:	1300651e 	bne	r2,r12,2012ff8 <_malloc_r+0x7f4>
 2012e64:	208000cc 	andi	r2,r4,3
 2012e68:	633ffe04 	addi	r12,r12,-8
 2012e6c:	103ffa1e 	bne	r2,zero,2012e58 <_gp+0xffff3d98>
 2012e70:	98800117 	ldw	r2,4(r19)
 2012e74:	0146303a 	nor	r3,zero,r5
 2012e78:	1884703a 	and	r2,r3,r2
 2012e7c:	98800115 	stw	r2,4(r19)
 2012e80:	294b883a 	add	r5,r5,r5
 2012e84:	117f2836 	bltu	r2,r5,2012b28 <_gp+0xffff3a68>
 2012e88:	283f2726 	beq	r5,zero,2012b28 <_gp+0xffff3a68>
 2012e8c:	2886703a 	and	r3,r5,r2
 2012e90:	5809883a 	mov	r4,r11
 2012e94:	183ec31e 	bne	r3,zero,20129a4 <_gp+0xffff38e4>
 2012e98:	294b883a 	add	r5,r5,r5
 2012e9c:	2886703a 	and	r3,r5,r2
 2012ea0:	21000104 	addi	r4,r4,4
 2012ea4:	183ffc26 	beq	r3,zero,2012e98 <_gp+0xffff3dd8>
 2012ea8:	003ebe06 	br	20129a4 <_gp+0xffff38e4>
 2012eac:	00c05504 	movi	r3,340
 2012eb0:	18801236 	bltu	r3,r2,2012efc <_malloc_r+0x6f8>
 2012eb4:	8804d3fa 	srli	r2,r17,15
 2012eb8:	12001e04 	addi	r8,r2,120
 2012ebc:	11c01dc4 	addi	r7,r2,119
 2012ec0:	4209883a 	add	r4,r8,r8
 2012ec4:	003e6d06 	br	201287c <_gp+0xffff37bc>
 2012ec8:	00c40004 	movi	r3,4096
 2012ecc:	003f4606 	br	2012be8 <_gp+0xffff3b28>
 2012ed0:	00800044 	movi	r2,1
 2012ed4:	a0800115 	stw	r2,4(r20)
 2012ed8:	003f7406 	br	2012cac <_gp+0xffff3bec>
 2012edc:	1805d0ba 	srai	r2,r3,2
 2012ee0:	01c00044 	movi	r7,1
 2012ee4:	30c00117 	ldw	r3,4(r6)
 2012ee8:	388e983a 	sll	r7,r7,r2
 2012eec:	2805883a 	mov	r2,r5
 2012ef0:	38c6b03a 	or	r3,r7,r3
 2012ef4:	30c00115 	stw	r3,4(r6)
 2012ef8:	003f9b06 	br	2012d68 <_gp+0xffff3ca8>
 2012efc:	00c15504 	movi	r3,1364
 2012f00:	18801a36 	bltu	r3,r2,2012f6c <_malloc_r+0x768>
 2012f04:	8804d4ba 	srli	r2,r17,18
 2012f08:	12001f44 	addi	r8,r2,125
 2012f0c:	11c01f04 	addi	r7,r2,124
 2012f10:	4209883a 	add	r4,r8,r8
 2012f14:	003e5906 	br	201287c <_gp+0xffff37bc>
 2012f18:	ad400404 	addi	r21,r21,16
 2012f1c:	003f1706 	br	2012b7c <_gp+0xffff3abc>
 2012f20:	00c01504 	movi	r3,84
 2012f24:	18802336 	bltu	r3,r2,2012fb4 <_malloc_r+0x7b0>
 2012f28:	3804d33a 	srli	r2,r7,12
 2012f2c:	11401bc4 	addi	r5,r2,111
 2012f30:	10c01b84 	addi	r3,r2,110
 2012f34:	294b883a 	add	r5,r5,r5
 2012f38:	003f7b06 	br	2012d28 <_gp+0xffff3c68>
 2012f3c:	9c000217 	ldw	r16,8(r19)
 2012f40:	00bfff04 	movi	r2,-4
 2012f44:	80c00117 	ldw	r3,4(r16)
 2012f48:	1886703a 	and	r3,r3,r2
 2012f4c:	003f5306 	br	2012c9c <_gp+0xffff3bdc>
 2012f50:	3083ffcc 	andi	r2,r6,4095
 2012f54:	103f181e 	bne	r2,zero,2012bb8 <_gp+0xffff3af8>
 2012f58:	99000217 	ldw	r4,8(r19)
 2012f5c:	b545883a 	add	r2,r22,r21
 2012f60:	10800054 	ori	r2,r2,1
 2012f64:	20800115 	stw	r2,4(r4)
 2012f68:	003f3e06 	br	2012c64 <_gp+0xffff3ba4>
 2012f6c:	01003f84 	movi	r4,254
 2012f70:	02001fc4 	movi	r8,127
 2012f74:	01c01f84 	movi	r7,126
 2012f78:	003e4006 	br	201287c <_gp+0xffff37bc>
 2012f7c:	00808074 	movhi	r2,513
 2012f80:	109c3304 	addi	r2,r2,28876
 2012f84:	15000015 	stw	r20,0(r2)
 2012f88:	003f1106 	br	2012bd0 <_gp+0xffff3b10>
 2012f8c:	00800044 	movi	r2,1
 2012f90:	002b883a 	mov	r21,zero
 2012f94:	003f1f06 	br	2012c14 <_gp+0xffff3b54>
 2012f98:	81400204 	addi	r5,r16,8
 2012f9c:	9009883a 	mov	r4,r18
 2012fa0:	201428c0 	call	201428c <_free_r>
 2012fa4:	00808074 	movhi	r2,513
 2012fa8:	109ecf04 	addi	r2,r2,31548
 2012fac:	10c00017 	ldw	r3,0(r2)
 2012fb0:	003f2c06 	br	2012c64 <_gp+0xffff3ba4>
 2012fb4:	00c05504 	movi	r3,340
 2012fb8:	18800536 	bltu	r3,r2,2012fd0 <_malloc_r+0x7cc>
 2012fbc:	3804d3fa 	srli	r2,r7,15
 2012fc0:	11401e04 	addi	r5,r2,120
 2012fc4:	10c01dc4 	addi	r3,r2,119
 2012fc8:	294b883a 	add	r5,r5,r5
 2012fcc:	003f5606 	br	2012d28 <_gp+0xffff3c68>
 2012fd0:	00c15504 	movi	r3,1364
 2012fd4:	18800536 	bltu	r3,r2,2012fec <_malloc_r+0x7e8>
 2012fd8:	3804d4ba 	srli	r2,r7,18
 2012fdc:	11401f44 	addi	r5,r2,125
 2012fe0:	10c01f04 	addi	r3,r2,124
 2012fe4:	294b883a 	add	r5,r5,r5
 2012fe8:	003f4f06 	br	2012d28 <_gp+0xffff3c68>
 2012fec:	01403f84 	movi	r5,254
 2012ff0:	00c01f84 	movi	r3,126
 2012ff4:	003f4c06 	br	2012d28 <_gp+0xffff3c68>
 2012ff8:	98800117 	ldw	r2,4(r19)
 2012ffc:	003fa006 	br	2012e80 <_gp+0xffff3dc0>
 2013000:	8808d0fa 	srli	r4,r17,3
 2013004:	20800044 	addi	r2,r4,1
 2013008:	1085883a 	add	r2,r2,r2
 201300c:	003e9006 	br	2012a50 <_gp+0xffff3990>

02013010 <memchr>:
 2013010:	208000cc 	andi	r2,r4,3
 2013014:	280f883a 	mov	r7,r5
 2013018:	10003426 	beq	r2,zero,20130ec <memchr+0xdc>
 201301c:	30bfffc4 	addi	r2,r6,-1
 2013020:	30001a26 	beq	r6,zero,201308c <memchr+0x7c>
 2013024:	20c00003 	ldbu	r3,0(r4)
 2013028:	29803fcc 	andi	r6,r5,255
 201302c:	30c0051e 	bne	r6,r3,2013044 <memchr+0x34>
 2013030:	00001806 	br	2013094 <memchr+0x84>
 2013034:	10001526 	beq	r2,zero,201308c <memchr+0x7c>
 2013038:	20c00003 	ldbu	r3,0(r4)
 201303c:	10bfffc4 	addi	r2,r2,-1
 2013040:	30c01426 	beq	r6,r3,2013094 <memchr+0x84>
 2013044:	21000044 	addi	r4,r4,1
 2013048:	20c000cc 	andi	r3,r4,3
 201304c:	183ff91e 	bne	r3,zero,2013034 <_gp+0xffff3f74>
 2013050:	020000c4 	movi	r8,3
 2013054:	40801136 	bltu	r8,r2,201309c <memchr+0x8c>
 2013058:	10000c26 	beq	r2,zero,201308c <memchr+0x7c>
 201305c:	20c00003 	ldbu	r3,0(r4)
 2013060:	29403fcc 	andi	r5,r5,255
 2013064:	28c00b26 	beq	r5,r3,2013094 <memchr+0x84>
 2013068:	20c00044 	addi	r3,r4,1
 201306c:	39803fcc 	andi	r6,r7,255
 2013070:	2089883a 	add	r4,r4,r2
 2013074:	00000306 	br	2013084 <memchr+0x74>
 2013078:	18c00044 	addi	r3,r3,1
 201307c:	197fffc3 	ldbu	r5,-1(r3)
 2013080:	31400526 	beq	r6,r5,2013098 <memchr+0x88>
 2013084:	1805883a 	mov	r2,r3
 2013088:	20fffb1e 	bne	r4,r3,2013078 <_gp+0xffff3fb8>
 201308c:	0005883a 	mov	r2,zero
 2013090:	f800283a 	ret
 2013094:	2005883a 	mov	r2,r4
 2013098:	f800283a 	ret
 201309c:	28c03fcc 	andi	r3,r5,255
 20130a0:	1812923a 	slli	r9,r3,8
 20130a4:	02ffbff4 	movhi	r11,65279
 20130a8:	02a02074 	movhi	r10,32897
 20130ac:	48d2b03a 	or	r9,r9,r3
 20130b0:	4806943a 	slli	r3,r9,16
 20130b4:	5affbfc4 	addi	r11,r11,-257
 20130b8:	52a02004 	addi	r10,r10,-32640
 20130bc:	48d2b03a 	or	r9,r9,r3
 20130c0:	20c00017 	ldw	r3,0(r4)
 20130c4:	48c6f03a 	xor	r3,r9,r3
 20130c8:	1acd883a 	add	r6,r3,r11
 20130cc:	00c6303a 	nor	r3,zero,r3
 20130d0:	30c6703a 	and	r3,r6,r3
 20130d4:	1a86703a 	and	r3,r3,r10
 20130d8:	183fe01e 	bne	r3,zero,201305c <_gp+0xffff3f9c>
 20130dc:	10bfff04 	addi	r2,r2,-4
 20130e0:	21000104 	addi	r4,r4,4
 20130e4:	40bff636 	bltu	r8,r2,20130c0 <_gp+0xffff4000>
 20130e8:	003fdb06 	br	2013058 <_gp+0xffff3f98>
 20130ec:	3005883a 	mov	r2,r6
 20130f0:	003fd706 	br	2013050 <_gp+0xffff3f90>

020130f4 <memcpy>:
 20130f4:	defffd04 	addi	sp,sp,-12
 20130f8:	dfc00215 	stw	ra,8(sp)
 20130fc:	dc400115 	stw	r17,4(sp)
 2013100:	dc000015 	stw	r16,0(sp)
 2013104:	00c003c4 	movi	r3,15
 2013108:	2005883a 	mov	r2,r4
 201310c:	1980452e 	bgeu	r3,r6,2013224 <memcpy+0x130>
 2013110:	2906b03a 	or	r3,r5,r4
 2013114:	18c000cc 	andi	r3,r3,3
 2013118:	1800441e 	bne	r3,zero,201322c <memcpy+0x138>
 201311c:	347ffc04 	addi	r17,r6,-16
 2013120:	8822d13a 	srli	r17,r17,4
 2013124:	28c00104 	addi	r3,r5,4
 2013128:	23400104 	addi	r13,r4,4
 201312c:	8820913a 	slli	r16,r17,4
 2013130:	2b000204 	addi	r12,r5,8
 2013134:	22c00204 	addi	r11,r4,8
 2013138:	84000504 	addi	r16,r16,20
 201313c:	2a800304 	addi	r10,r5,12
 2013140:	22400304 	addi	r9,r4,12
 2013144:	2c21883a 	add	r16,r5,r16
 2013148:	2811883a 	mov	r8,r5
 201314c:	200f883a 	mov	r7,r4
 2013150:	41000017 	ldw	r4,0(r8)
 2013154:	1fc00017 	ldw	ra,0(r3)
 2013158:	63c00017 	ldw	r15,0(r12)
 201315c:	39000015 	stw	r4,0(r7)
 2013160:	53800017 	ldw	r14,0(r10)
 2013164:	6fc00015 	stw	ra,0(r13)
 2013168:	5bc00015 	stw	r15,0(r11)
 201316c:	4b800015 	stw	r14,0(r9)
 2013170:	18c00404 	addi	r3,r3,16
 2013174:	39c00404 	addi	r7,r7,16
 2013178:	42000404 	addi	r8,r8,16
 201317c:	6b400404 	addi	r13,r13,16
 2013180:	63000404 	addi	r12,r12,16
 2013184:	5ac00404 	addi	r11,r11,16
 2013188:	52800404 	addi	r10,r10,16
 201318c:	4a400404 	addi	r9,r9,16
 2013190:	1c3fef1e 	bne	r3,r16,2013150 <_gp+0xffff4090>
 2013194:	89c00044 	addi	r7,r17,1
 2013198:	380e913a 	slli	r7,r7,4
 201319c:	310003cc 	andi	r4,r6,15
 20131a0:	02c000c4 	movi	r11,3
 20131a4:	11c7883a 	add	r3,r2,r7
 20131a8:	29cb883a 	add	r5,r5,r7
 20131ac:	5900212e 	bgeu	r11,r4,2013234 <memcpy+0x140>
 20131b0:	1813883a 	mov	r9,r3
 20131b4:	2811883a 	mov	r8,r5
 20131b8:	200f883a 	mov	r7,r4
 20131bc:	42800017 	ldw	r10,0(r8)
 20131c0:	4a400104 	addi	r9,r9,4
 20131c4:	39ffff04 	addi	r7,r7,-4
 20131c8:	4abfff15 	stw	r10,-4(r9)
 20131cc:	42000104 	addi	r8,r8,4
 20131d0:	59fffa36 	bltu	r11,r7,20131bc <_gp+0xffff40fc>
 20131d4:	213fff04 	addi	r4,r4,-4
 20131d8:	2008d0ba 	srli	r4,r4,2
 20131dc:	318000cc 	andi	r6,r6,3
 20131e0:	21000044 	addi	r4,r4,1
 20131e4:	2109883a 	add	r4,r4,r4
 20131e8:	2109883a 	add	r4,r4,r4
 20131ec:	1907883a 	add	r3,r3,r4
 20131f0:	290b883a 	add	r5,r5,r4
 20131f4:	30000626 	beq	r6,zero,2013210 <memcpy+0x11c>
 20131f8:	198d883a 	add	r6,r3,r6
 20131fc:	29c00003 	ldbu	r7,0(r5)
 2013200:	18c00044 	addi	r3,r3,1
 2013204:	29400044 	addi	r5,r5,1
 2013208:	19ffffc5 	stb	r7,-1(r3)
 201320c:	19bffb1e 	bne	r3,r6,20131fc <_gp+0xffff413c>
 2013210:	dfc00217 	ldw	ra,8(sp)
 2013214:	dc400117 	ldw	r17,4(sp)
 2013218:	dc000017 	ldw	r16,0(sp)
 201321c:	dec00304 	addi	sp,sp,12
 2013220:	f800283a 	ret
 2013224:	2007883a 	mov	r3,r4
 2013228:	003ff206 	br	20131f4 <_gp+0xffff4134>
 201322c:	2007883a 	mov	r3,r4
 2013230:	003ff106 	br	20131f8 <_gp+0xffff4138>
 2013234:	200d883a 	mov	r6,r4
 2013238:	003fee06 	br	20131f4 <_gp+0xffff4134>

0201323c <memmove>:
 201323c:	2005883a 	mov	r2,r4
 2013240:	29000b2e 	bgeu	r5,r4,2013270 <memmove+0x34>
 2013244:	298f883a 	add	r7,r5,r6
 2013248:	21c0092e 	bgeu	r4,r7,2013270 <memmove+0x34>
 201324c:	2187883a 	add	r3,r4,r6
 2013250:	198bc83a 	sub	r5,r3,r6
 2013254:	30004826 	beq	r6,zero,2013378 <memmove+0x13c>
 2013258:	39ffffc4 	addi	r7,r7,-1
 201325c:	39000003 	ldbu	r4,0(r7)
 2013260:	18ffffc4 	addi	r3,r3,-1
 2013264:	19000005 	stb	r4,0(r3)
 2013268:	28fffb1e 	bne	r5,r3,2013258 <_gp+0xffff4198>
 201326c:	f800283a 	ret
 2013270:	00c003c4 	movi	r3,15
 2013274:	1980412e 	bgeu	r3,r6,201337c <memmove+0x140>
 2013278:	2886b03a 	or	r3,r5,r2
 201327c:	18c000cc 	andi	r3,r3,3
 2013280:	1800401e 	bne	r3,zero,2013384 <memmove+0x148>
 2013284:	33fffc04 	addi	r15,r6,-16
 2013288:	781ed13a 	srli	r15,r15,4
 201328c:	28c00104 	addi	r3,r5,4
 2013290:	13400104 	addi	r13,r2,4
 2013294:	781c913a 	slli	r14,r15,4
 2013298:	2b000204 	addi	r12,r5,8
 201329c:	12c00204 	addi	r11,r2,8
 20132a0:	73800504 	addi	r14,r14,20
 20132a4:	2a800304 	addi	r10,r5,12
 20132a8:	12400304 	addi	r9,r2,12
 20132ac:	2b9d883a 	add	r14,r5,r14
 20132b0:	2811883a 	mov	r8,r5
 20132b4:	100f883a 	mov	r7,r2
 20132b8:	41000017 	ldw	r4,0(r8)
 20132bc:	39c00404 	addi	r7,r7,16
 20132c0:	18c00404 	addi	r3,r3,16
 20132c4:	393ffc15 	stw	r4,-16(r7)
 20132c8:	193ffc17 	ldw	r4,-16(r3)
 20132cc:	6b400404 	addi	r13,r13,16
 20132d0:	5ac00404 	addi	r11,r11,16
 20132d4:	693ffc15 	stw	r4,-16(r13)
 20132d8:	61000017 	ldw	r4,0(r12)
 20132dc:	4a400404 	addi	r9,r9,16
 20132e0:	42000404 	addi	r8,r8,16
 20132e4:	593ffc15 	stw	r4,-16(r11)
 20132e8:	51000017 	ldw	r4,0(r10)
 20132ec:	63000404 	addi	r12,r12,16
 20132f0:	52800404 	addi	r10,r10,16
 20132f4:	493ffc15 	stw	r4,-16(r9)
 20132f8:	1bbfef1e 	bne	r3,r14,20132b8 <_gp+0xffff41f8>
 20132fc:	79000044 	addi	r4,r15,1
 2013300:	2008913a 	slli	r4,r4,4
 2013304:	328003cc 	andi	r10,r6,15
 2013308:	02c000c4 	movi	r11,3
 201330c:	1107883a 	add	r3,r2,r4
 2013310:	290b883a 	add	r5,r5,r4
 2013314:	5a801e2e 	bgeu	r11,r10,2013390 <memmove+0x154>
 2013318:	1813883a 	mov	r9,r3
 201331c:	2811883a 	mov	r8,r5
 2013320:	500f883a 	mov	r7,r10
 2013324:	41000017 	ldw	r4,0(r8)
 2013328:	4a400104 	addi	r9,r9,4
 201332c:	39ffff04 	addi	r7,r7,-4
 2013330:	493fff15 	stw	r4,-4(r9)
 2013334:	42000104 	addi	r8,r8,4
 2013338:	59fffa36 	bltu	r11,r7,2013324 <_gp+0xffff4264>
 201333c:	513fff04 	addi	r4,r10,-4
 2013340:	2008d0ba 	srli	r4,r4,2
 2013344:	318000cc 	andi	r6,r6,3
 2013348:	21000044 	addi	r4,r4,1
 201334c:	2109883a 	add	r4,r4,r4
 2013350:	2109883a 	add	r4,r4,r4
 2013354:	1907883a 	add	r3,r3,r4
 2013358:	290b883a 	add	r5,r5,r4
 201335c:	30000b26 	beq	r6,zero,201338c <memmove+0x150>
 2013360:	198d883a 	add	r6,r3,r6
 2013364:	29c00003 	ldbu	r7,0(r5)
 2013368:	18c00044 	addi	r3,r3,1
 201336c:	29400044 	addi	r5,r5,1
 2013370:	19ffffc5 	stb	r7,-1(r3)
 2013374:	19bffb1e 	bne	r3,r6,2013364 <_gp+0xffff42a4>
 2013378:	f800283a 	ret
 201337c:	1007883a 	mov	r3,r2
 2013380:	003ff606 	br	201335c <_gp+0xffff429c>
 2013384:	1007883a 	mov	r3,r2
 2013388:	003ff506 	br	2013360 <_gp+0xffff42a0>
 201338c:	f800283a 	ret
 2013390:	500d883a 	mov	r6,r10
 2013394:	003ff106 	br	201335c <_gp+0xffff429c>

02013398 <memset>:
 2013398:	20c000cc 	andi	r3,r4,3
 201339c:	2005883a 	mov	r2,r4
 20133a0:	18004426 	beq	r3,zero,20134b4 <memset+0x11c>
 20133a4:	31ffffc4 	addi	r7,r6,-1
 20133a8:	30004026 	beq	r6,zero,20134ac <memset+0x114>
 20133ac:	2813883a 	mov	r9,r5
 20133b0:	200d883a 	mov	r6,r4
 20133b4:	2007883a 	mov	r3,r4
 20133b8:	00000406 	br	20133cc <memset+0x34>
 20133bc:	3a3fffc4 	addi	r8,r7,-1
 20133c0:	31800044 	addi	r6,r6,1
 20133c4:	38003926 	beq	r7,zero,20134ac <memset+0x114>
 20133c8:	400f883a 	mov	r7,r8
 20133cc:	18c00044 	addi	r3,r3,1
 20133d0:	32400005 	stb	r9,0(r6)
 20133d4:	1a0000cc 	andi	r8,r3,3
 20133d8:	403ff81e 	bne	r8,zero,20133bc <_gp+0xffff42fc>
 20133dc:	010000c4 	movi	r4,3
 20133e0:	21c02d2e 	bgeu	r4,r7,2013498 <memset+0x100>
 20133e4:	29003fcc 	andi	r4,r5,255
 20133e8:	200c923a 	slli	r6,r4,8
 20133ec:	3108b03a 	or	r4,r6,r4
 20133f0:	200c943a 	slli	r6,r4,16
 20133f4:	218cb03a 	or	r6,r4,r6
 20133f8:	010003c4 	movi	r4,15
 20133fc:	21c0182e 	bgeu	r4,r7,2013460 <memset+0xc8>
 2013400:	3b3ffc04 	addi	r12,r7,-16
 2013404:	6018d13a 	srli	r12,r12,4
 2013408:	1a000104 	addi	r8,r3,4
 201340c:	1ac00204 	addi	r11,r3,8
 2013410:	6008913a 	slli	r4,r12,4
 2013414:	1a800304 	addi	r10,r3,12
 2013418:	1813883a 	mov	r9,r3
 201341c:	21000504 	addi	r4,r4,20
 2013420:	1909883a 	add	r4,r3,r4
 2013424:	49800015 	stw	r6,0(r9)
 2013428:	41800015 	stw	r6,0(r8)
 201342c:	59800015 	stw	r6,0(r11)
 2013430:	51800015 	stw	r6,0(r10)
 2013434:	42000404 	addi	r8,r8,16
 2013438:	4a400404 	addi	r9,r9,16
 201343c:	5ac00404 	addi	r11,r11,16
 2013440:	52800404 	addi	r10,r10,16
 2013444:	413ff71e 	bne	r8,r4,2013424 <_gp+0xffff4364>
 2013448:	63000044 	addi	r12,r12,1
 201344c:	6018913a 	slli	r12,r12,4
 2013450:	39c003cc 	andi	r7,r7,15
 2013454:	010000c4 	movi	r4,3
 2013458:	1b07883a 	add	r3,r3,r12
 201345c:	21c00e2e 	bgeu	r4,r7,2013498 <memset+0x100>
 2013460:	1813883a 	mov	r9,r3
 2013464:	3811883a 	mov	r8,r7
 2013468:	010000c4 	movi	r4,3
 201346c:	49800015 	stw	r6,0(r9)
 2013470:	423fff04 	addi	r8,r8,-4
 2013474:	4a400104 	addi	r9,r9,4
 2013478:	223ffc36 	bltu	r4,r8,201346c <_gp+0xffff43ac>
 201347c:	393fff04 	addi	r4,r7,-4
 2013480:	2008d0ba 	srli	r4,r4,2
 2013484:	39c000cc 	andi	r7,r7,3
 2013488:	21000044 	addi	r4,r4,1
 201348c:	2109883a 	add	r4,r4,r4
 2013490:	2109883a 	add	r4,r4,r4
 2013494:	1907883a 	add	r3,r3,r4
 2013498:	38000526 	beq	r7,zero,20134b0 <memset+0x118>
 201349c:	19cf883a 	add	r7,r3,r7
 20134a0:	19400005 	stb	r5,0(r3)
 20134a4:	18c00044 	addi	r3,r3,1
 20134a8:	38fffd1e 	bne	r7,r3,20134a0 <_gp+0xffff43e0>
 20134ac:	f800283a 	ret
 20134b0:	f800283a 	ret
 20134b4:	2007883a 	mov	r3,r4
 20134b8:	300f883a 	mov	r7,r6
 20134bc:	003fc706 	br	20133dc <_gp+0xffff431c>

020134c0 <_realloc_r>:
 20134c0:	defff604 	addi	sp,sp,-40
 20134c4:	dc800215 	stw	r18,8(sp)
 20134c8:	dfc00915 	stw	ra,36(sp)
 20134cc:	df000815 	stw	fp,32(sp)
 20134d0:	ddc00715 	stw	r23,28(sp)
 20134d4:	dd800615 	stw	r22,24(sp)
 20134d8:	dd400515 	stw	r21,20(sp)
 20134dc:	dd000415 	stw	r20,16(sp)
 20134e0:	dcc00315 	stw	r19,12(sp)
 20134e4:	dc400115 	stw	r17,4(sp)
 20134e8:	dc000015 	stw	r16,0(sp)
 20134ec:	3025883a 	mov	r18,r6
 20134f0:	2800b726 	beq	r5,zero,20137d0 <_realloc_r+0x310>
 20134f4:	282b883a 	mov	r21,r5
 20134f8:	2029883a 	mov	r20,r4
 20134fc:	2014ce80 	call	2014ce8 <__malloc_lock>
 2013500:	a8bfff17 	ldw	r2,-4(r21)
 2013504:	043fff04 	movi	r16,-4
 2013508:	90c002c4 	addi	r3,r18,11
 201350c:	01000584 	movi	r4,22
 2013510:	acfffe04 	addi	r19,r21,-8
 2013514:	1420703a 	and	r16,r2,r16
 2013518:	20c0332e 	bgeu	r4,r3,20135e8 <_realloc_r+0x128>
 201351c:	047ffe04 	movi	r17,-8
 2013520:	1c62703a 	and	r17,r3,r17
 2013524:	8807883a 	mov	r3,r17
 2013528:	88005816 	blt	r17,zero,201368c <_realloc_r+0x1cc>
 201352c:	8c805736 	bltu	r17,r18,201368c <_realloc_r+0x1cc>
 2013530:	80c0300e 	bge	r16,r3,20135f4 <_realloc_r+0x134>
 2013534:	07008074 	movhi	fp,513
 2013538:	e71ab904 	addi	fp,fp,27364
 201353c:	e1c00217 	ldw	r7,8(fp)
 2013540:	9c09883a 	add	r4,r19,r16
 2013544:	22000117 	ldw	r8,4(r4)
 2013548:	21c06326 	beq	r4,r7,20136d8 <_realloc_r+0x218>
 201354c:	017fff84 	movi	r5,-2
 2013550:	414a703a 	and	r5,r8,r5
 2013554:	214b883a 	add	r5,r4,r5
 2013558:	29800117 	ldw	r6,4(r5)
 201355c:	3180004c 	andi	r6,r6,1
 2013560:	30003f26 	beq	r6,zero,2013660 <_realloc_r+0x1a0>
 2013564:	1080004c 	andi	r2,r2,1
 2013568:	10008326 	beq	r2,zero,2013778 <_realloc_r+0x2b8>
 201356c:	900b883a 	mov	r5,r18
 2013570:	a009883a 	mov	r4,r20
 2013574:	20128040 	call	2012804 <_malloc_r>
 2013578:	1025883a 	mov	r18,r2
 201357c:	10011e26 	beq	r2,zero,20139f8 <_realloc_r+0x538>
 2013580:	a93fff17 	ldw	r4,-4(r21)
 2013584:	10fffe04 	addi	r3,r2,-8
 2013588:	00bfff84 	movi	r2,-2
 201358c:	2084703a 	and	r2,r4,r2
 2013590:	9885883a 	add	r2,r19,r2
 2013594:	1880ee26 	beq	r3,r2,2013950 <_realloc_r+0x490>
 2013598:	81bfff04 	addi	r6,r16,-4
 201359c:	00800904 	movi	r2,36
 20135a0:	1180b836 	bltu	r2,r6,2013884 <_realloc_r+0x3c4>
 20135a4:	00c004c4 	movi	r3,19
 20135a8:	19809636 	bltu	r3,r6,2013804 <_realloc_r+0x344>
 20135ac:	9005883a 	mov	r2,r18
 20135b0:	a807883a 	mov	r3,r21
 20135b4:	19000017 	ldw	r4,0(r3)
 20135b8:	11000015 	stw	r4,0(r2)
 20135bc:	19000117 	ldw	r4,4(r3)
 20135c0:	11000115 	stw	r4,4(r2)
 20135c4:	18c00217 	ldw	r3,8(r3)
 20135c8:	10c00215 	stw	r3,8(r2)
 20135cc:	a80b883a 	mov	r5,r21
 20135d0:	a009883a 	mov	r4,r20
 20135d4:	201428c0 	call	201428c <_free_r>
 20135d8:	a009883a 	mov	r4,r20
 20135dc:	2014cec0 	call	2014cec <__malloc_unlock>
 20135e0:	9005883a 	mov	r2,r18
 20135e4:	00001206 	br	2013630 <_realloc_r+0x170>
 20135e8:	00c00404 	movi	r3,16
 20135ec:	1823883a 	mov	r17,r3
 20135f0:	003fce06 	br	201352c <_gp+0xffff446c>
 20135f4:	a825883a 	mov	r18,r21
 20135f8:	8445c83a 	sub	r2,r16,r17
 20135fc:	00c003c4 	movi	r3,15
 2013600:	18802636 	bltu	r3,r2,201369c <_realloc_r+0x1dc>
 2013604:	99800117 	ldw	r6,4(r19)
 2013608:	9c07883a 	add	r3,r19,r16
 201360c:	3180004c 	andi	r6,r6,1
 2013610:	3420b03a 	or	r16,r6,r16
 2013614:	9c000115 	stw	r16,4(r19)
 2013618:	18800117 	ldw	r2,4(r3)
 201361c:	10800054 	ori	r2,r2,1
 2013620:	18800115 	stw	r2,4(r3)
 2013624:	a009883a 	mov	r4,r20
 2013628:	2014cec0 	call	2014cec <__malloc_unlock>
 201362c:	9005883a 	mov	r2,r18
 2013630:	dfc00917 	ldw	ra,36(sp)
 2013634:	df000817 	ldw	fp,32(sp)
 2013638:	ddc00717 	ldw	r23,28(sp)
 201363c:	dd800617 	ldw	r22,24(sp)
 2013640:	dd400517 	ldw	r21,20(sp)
 2013644:	dd000417 	ldw	r20,16(sp)
 2013648:	dcc00317 	ldw	r19,12(sp)
 201364c:	dc800217 	ldw	r18,8(sp)
 2013650:	dc400117 	ldw	r17,4(sp)
 2013654:	dc000017 	ldw	r16,0(sp)
 2013658:	dec00a04 	addi	sp,sp,40
 201365c:	f800283a 	ret
 2013660:	017fff04 	movi	r5,-4
 2013664:	414a703a 	and	r5,r8,r5
 2013668:	814d883a 	add	r6,r16,r5
 201366c:	30c01f16 	blt	r6,r3,20136ec <_realloc_r+0x22c>
 2013670:	20800317 	ldw	r2,12(r4)
 2013674:	20c00217 	ldw	r3,8(r4)
 2013678:	a825883a 	mov	r18,r21
 201367c:	3021883a 	mov	r16,r6
 2013680:	18800315 	stw	r2,12(r3)
 2013684:	10c00215 	stw	r3,8(r2)
 2013688:	003fdb06 	br	20135f8 <_gp+0xffff4538>
 201368c:	00800304 	movi	r2,12
 2013690:	a0800015 	stw	r2,0(r20)
 2013694:	0005883a 	mov	r2,zero
 2013698:	003fe506 	br	2013630 <_gp+0xffff4570>
 201369c:	98c00117 	ldw	r3,4(r19)
 20136a0:	9c4b883a 	add	r5,r19,r17
 20136a4:	11000054 	ori	r4,r2,1
 20136a8:	18c0004c 	andi	r3,r3,1
 20136ac:	1c62b03a 	or	r17,r3,r17
 20136b0:	9c400115 	stw	r17,4(r19)
 20136b4:	29000115 	stw	r4,4(r5)
 20136b8:	2885883a 	add	r2,r5,r2
 20136bc:	10c00117 	ldw	r3,4(r2)
 20136c0:	29400204 	addi	r5,r5,8
 20136c4:	a009883a 	mov	r4,r20
 20136c8:	18c00054 	ori	r3,r3,1
 20136cc:	10c00115 	stw	r3,4(r2)
 20136d0:	201428c0 	call	201428c <_free_r>
 20136d4:	003fd306 	br	2013624 <_gp+0xffff4564>
 20136d8:	017fff04 	movi	r5,-4
 20136dc:	414a703a 	and	r5,r8,r5
 20136e0:	89800404 	addi	r6,r17,16
 20136e4:	8151883a 	add	r8,r16,r5
 20136e8:	4180590e 	bge	r8,r6,2013850 <_realloc_r+0x390>
 20136ec:	1080004c 	andi	r2,r2,1
 20136f0:	103f9e1e 	bne	r2,zero,201356c <_gp+0xffff44ac>
 20136f4:	adbffe17 	ldw	r22,-8(r21)
 20136f8:	00bfff04 	movi	r2,-4
 20136fc:	9dadc83a 	sub	r22,r19,r22
 2013700:	b1800117 	ldw	r6,4(r22)
 2013704:	3084703a 	and	r2,r6,r2
 2013708:	20002026 	beq	r4,zero,201378c <_realloc_r+0x2cc>
 201370c:	80af883a 	add	r23,r16,r2
 2013710:	b96f883a 	add	r23,r23,r5
 2013714:	21c05f26 	beq	r4,r7,2013894 <_realloc_r+0x3d4>
 2013718:	b8c01c16 	blt	r23,r3,201378c <_realloc_r+0x2cc>
 201371c:	20800317 	ldw	r2,12(r4)
 2013720:	20c00217 	ldw	r3,8(r4)
 2013724:	81bfff04 	addi	r6,r16,-4
 2013728:	01000904 	movi	r4,36
 201372c:	18800315 	stw	r2,12(r3)
 2013730:	10c00215 	stw	r3,8(r2)
 2013734:	b0c00217 	ldw	r3,8(r22)
 2013738:	b0800317 	ldw	r2,12(r22)
 201373c:	b4800204 	addi	r18,r22,8
 2013740:	18800315 	stw	r2,12(r3)
 2013744:	10c00215 	stw	r3,8(r2)
 2013748:	21801b36 	bltu	r4,r6,20137b8 <_realloc_r+0x2f8>
 201374c:	008004c4 	movi	r2,19
 2013750:	1180352e 	bgeu	r2,r6,2013828 <_realloc_r+0x368>
 2013754:	a8800017 	ldw	r2,0(r21)
 2013758:	b0800215 	stw	r2,8(r22)
 201375c:	a8800117 	ldw	r2,4(r21)
 2013760:	b0800315 	stw	r2,12(r22)
 2013764:	008006c4 	movi	r2,27
 2013768:	11807f36 	bltu	r2,r6,2013968 <_realloc_r+0x4a8>
 201376c:	b0800404 	addi	r2,r22,16
 2013770:	ad400204 	addi	r21,r21,8
 2013774:	00002d06 	br	201382c <_realloc_r+0x36c>
 2013778:	adbffe17 	ldw	r22,-8(r21)
 201377c:	00bfff04 	movi	r2,-4
 2013780:	9dadc83a 	sub	r22,r19,r22
 2013784:	b1000117 	ldw	r4,4(r22)
 2013788:	2084703a 	and	r2,r4,r2
 201378c:	b03f7726 	beq	r22,zero,201356c <_gp+0xffff44ac>
 2013790:	80af883a 	add	r23,r16,r2
 2013794:	b8ff7516 	blt	r23,r3,201356c <_gp+0xffff44ac>
 2013798:	b0800317 	ldw	r2,12(r22)
 201379c:	b0c00217 	ldw	r3,8(r22)
 20137a0:	81bfff04 	addi	r6,r16,-4
 20137a4:	01000904 	movi	r4,36
 20137a8:	18800315 	stw	r2,12(r3)
 20137ac:	10c00215 	stw	r3,8(r2)
 20137b0:	b4800204 	addi	r18,r22,8
 20137b4:	21bfe52e 	bgeu	r4,r6,201374c <_gp+0xffff468c>
 20137b8:	a80b883a 	mov	r5,r21
 20137bc:	9009883a 	mov	r4,r18
 20137c0:	201323c0 	call	201323c <memmove>
 20137c4:	b821883a 	mov	r16,r23
 20137c8:	b027883a 	mov	r19,r22
 20137cc:	003f8a06 	br	20135f8 <_gp+0xffff4538>
 20137d0:	300b883a 	mov	r5,r6
 20137d4:	dfc00917 	ldw	ra,36(sp)
 20137d8:	df000817 	ldw	fp,32(sp)
 20137dc:	ddc00717 	ldw	r23,28(sp)
 20137e0:	dd800617 	ldw	r22,24(sp)
 20137e4:	dd400517 	ldw	r21,20(sp)
 20137e8:	dd000417 	ldw	r20,16(sp)
 20137ec:	dcc00317 	ldw	r19,12(sp)
 20137f0:	dc800217 	ldw	r18,8(sp)
 20137f4:	dc400117 	ldw	r17,4(sp)
 20137f8:	dc000017 	ldw	r16,0(sp)
 20137fc:	dec00a04 	addi	sp,sp,40
 2013800:	20128041 	jmpi	2012804 <_malloc_r>
 2013804:	a8c00017 	ldw	r3,0(r21)
 2013808:	90c00015 	stw	r3,0(r18)
 201380c:	a8c00117 	ldw	r3,4(r21)
 2013810:	90c00115 	stw	r3,4(r18)
 2013814:	00c006c4 	movi	r3,27
 2013818:	19804536 	bltu	r3,r6,2013930 <_realloc_r+0x470>
 201381c:	90800204 	addi	r2,r18,8
 2013820:	a8c00204 	addi	r3,r21,8
 2013824:	003f6306 	br	20135b4 <_gp+0xffff44f4>
 2013828:	9005883a 	mov	r2,r18
 201382c:	a8c00017 	ldw	r3,0(r21)
 2013830:	b821883a 	mov	r16,r23
 2013834:	b027883a 	mov	r19,r22
 2013838:	10c00015 	stw	r3,0(r2)
 201383c:	a8c00117 	ldw	r3,4(r21)
 2013840:	10c00115 	stw	r3,4(r2)
 2013844:	a8c00217 	ldw	r3,8(r21)
 2013848:	10c00215 	stw	r3,8(r2)
 201384c:	003f6a06 	br	20135f8 <_gp+0xffff4538>
 2013850:	9c67883a 	add	r19,r19,r17
 2013854:	4445c83a 	sub	r2,r8,r17
 2013858:	e4c00215 	stw	r19,8(fp)
 201385c:	10800054 	ori	r2,r2,1
 2013860:	98800115 	stw	r2,4(r19)
 2013864:	a8bfff17 	ldw	r2,-4(r21)
 2013868:	a009883a 	mov	r4,r20
 201386c:	1080004c 	andi	r2,r2,1
 2013870:	1462b03a 	or	r17,r2,r17
 2013874:	ac7fff15 	stw	r17,-4(r21)
 2013878:	2014cec0 	call	2014cec <__malloc_unlock>
 201387c:	a805883a 	mov	r2,r21
 2013880:	003f6b06 	br	2013630 <_gp+0xffff4570>
 2013884:	a80b883a 	mov	r5,r21
 2013888:	9009883a 	mov	r4,r18
 201388c:	201323c0 	call	201323c <memmove>
 2013890:	003f4e06 	br	20135cc <_gp+0xffff450c>
 2013894:	89000404 	addi	r4,r17,16
 2013898:	b93fbc16 	blt	r23,r4,201378c <_gp+0xffff46cc>
 201389c:	b0800317 	ldw	r2,12(r22)
 20138a0:	b0c00217 	ldw	r3,8(r22)
 20138a4:	81bfff04 	addi	r6,r16,-4
 20138a8:	01000904 	movi	r4,36
 20138ac:	18800315 	stw	r2,12(r3)
 20138b0:	10c00215 	stw	r3,8(r2)
 20138b4:	b4800204 	addi	r18,r22,8
 20138b8:	21804336 	bltu	r4,r6,20139c8 <_realloc_r+0x508>
 20138bc:	008004c4 	movi	r2,19
 20138c0:	11803f2e 	bgeu	r2,r6,20139c0 <_realloc_r+0x500>
 20138c4:	a8800017 	ldw	r2,0(r21)
 20138c8:	b0800215 	stw	r2,8(r22)
 20138cc:	a8800117 	ldw	r2,4(r21)
 20138d0:	b0800315 	stw	r2,12(r22)
 20138d4:	008006c4 	movi	r2,27
 20138d8:	11803f36 	bltu	r2,r6,20139d8 <_realloc_r+0x518>
 20138dc:	b0800404 	addi	r2,r22,16
 20138e0:	ad400204 	addi	r21,r21,8
 20138e4:	a8c00017 	ldw	r3,0(r21)
 20138e8:	10c00015 	stw	r3,0(r2)
 20138ec:	a8c00117 	ldw	r3,4(r21)
 20138f0:	10c00115 	stw	r3,4(r2)
 20138f4:	a8c00217 	ldw	r3,8(r21)
 20138f8:	10c00215 	stw	r3,8(r2)
 20138fc:	b447883a 	add	r3,r22,r17
 2013900:	bc45c83a 	sub	r2,r23,r17
 2013904:	e0c00215 	stw	r3,8(fp)
 2013908:	10800054 	ori	r2,r2,1
 201390c:	18800115 	stw	r2,4(r3)
 2013910:	b0800117 	ldw	r2,4(r22)
 2013914:	a009883a 	mov	r4,r20
 2013918:	1080004c 	andi	r2,r2,1
 201391c:	1462b03a 	or	r17,r2,r17
 2013920:	b4400115 	stw	r17,4(r22)
 2013924:	2014cec0 	call	2014cec <__malloc_unlock>
 2013928:	9005883a 	mov	r2,r18
 201392c:	003f4006 	br	2013630 <_gp+0xffff4570>
 2013930:	a8c00217 	ldw	r3,8(r21)
 2013934:	90c00215 	stw	r3,8(r18)
 2013938:	a8c00317 	ldw	r3,12(r21)
 201393c:	90c00315 	stw	r3,12(r18)
 2013940:	30801126 	beq	r6,r2,2013988 <_realloc_r+0x4c8>
 2013944:	90800404 	addi	r2,r18,16
 2013948:	a8c00404 	addi	r3,r21,16
 201394c:	003f1906 	br	20135b4 <_gp+0xffff44f4>
 2013950:	90ffff17 	ldw	r3,-4(r18)
 2013954:	00bfff04 	movi	r2,-4
 2013958:	a825883a 	mov	r18,r21
 201395c:	1884703a 	and	r2,r3,r2
 2013960:	80a1883a 	add	r16,r16,r2
 2013964:	003f2406 	br	20135f8 <_gp+0xffff4538>
 2013968:	a8800217 	ldw	r2,8(r21)
 201396c:	b0800415 	stw	r2,16(r22)
 2013970:	a8800317 	ldw	r2,12(r21)
 2013974:	b0800515 	stw	r2,20(r22)
 2013978:	31000a26 	beq	r6,r4,20139a4 <_realloc_r+0x4e4>
 201397c:	b0800604 	addi	r2,r22,24
 2013980:	ad400404 	addi	r21,r21,16
 2013984:	003fa906 	br	201382c <_gp+0xffff476c>
 2013988:	a9000417 	ldw	r4,16(r21)
 201398c:	90800604 	addi	r2,r18,24
 2013990:	a8c00604 	addi	r3,r21,24
 2013994:	91000415 	stw	r4,16(r18)
 2013998:	a9000517 	ldw	r4,20(r21)
 201399c:	91000515 	stw	r4,20(r18)
 20139a0:	003f0406 	br	20135b4 <_gp+0xffff44f4>
 20139a4:	a8c00417 	ldw	r3,16(r21)
 20139a8:	ad400604 	addi	r21,r21,24
 20139ac:	b0800804 	addi	r2,r22,32
 20139b0:	b0c00615 	stw	r3,24(r22)
 20139b4:	a8ffff17 	ldw	r3,-4(r21)
 20139b8:	b0c00715 	stw	r3,28(r22)
 20139bc:	003f9b06 	br	201382c <_gp+0xffff476c>
 20139c0:	9005883a 	mov	r2,r18
 20139c4:	003fc706 	br	20138e4 <_gp+0xffff4824>
 20139c8:	a80b883a 	mov	r5,r21
 20139cc:	9009883a 	mov	r4,r18
 20139d0:	201323c0 	call	201323c <memmove>
 20139d4:	003fc906 	br	20138fc <_gp+0xffff483c>
 20139d8:	a8800217 	ldw	r2,8(r21)
 20139dc:	b0800415 	stw	r2,16(r22)
 20139e0:	a8800317 	ldw	r2,12(r21)
 20139e4:	b0800515 	stw	r2,20(r22)
 20139e8:	31000726 	beq	r6,r4,2013a08 <_realloc_r+0x548>
 20139ec:	b0800604 	addi	r2,r22,24
 20139f0:	ad400404 	addi	r21,r21,16
 20139f4:	003fbb06 	br	20138e4 <_gp+0xffff4824>
 20139f8:	a009883a 	mov	r4,r20
 20139fc:	2014cec0 	call	2014cec <__malloc_unlock>
 2013a00:	0005883a 	mov	r2,zero
 2013a04:	003f0a06 	br	2013630 <_gp+0xffff4570>
 2013a08:	a8c00417 	ldw	r3,16(r21)
 2013a0c:	ad400604 	addi	r21,r21,24
 2013a10:	b0800804 	addi	r2,r22,32
 2013a14:	b0c00615 	stw	r3,24(r22)
 2013a18:	a8ffff17 	ldw	r3,-4(r21)
 2013a1c:	b0c00715 	stw	r3,28(r22)
 2013a20:	003fb006 	br	20138e4 <_gp+0xffff4824>

02013a24 <_sbrk_r>:
 2013a24:	defffd04 	addi	sp,sp,-12
 2013a28:	dc000015 	stw	r16,0(sp)
 2013a2c:	04008074 	movhi	r16,513
 2013a30:	dc400115 	stw	r17,4(sp)
 2013a34:	841ecb04 	addi	r16,r16,31532
 2013a38:	2023883a 	mov	r17,r4
 2013a3c:	2809883a 	mov	r4,r5
 2013a40:	dfc00215 	stw	ra,8(sp)
 2013a44:	80000015 	stw	zero,0(r16)
 2013a48:	2014e6c0 	call	2014e6c <sbrk>
 2013a4c:	00ffffc4 	movi	r3,-1
 2013a50:	10c00526 	beq	r2,r3,2013a68 <_sbrk_r+0x44>
 2013a54:	dfc00217 	ldw	ra,8(sp)
 2013a58:	dc400117 	ldw	r17,4(sp)
 2013a5c:	dc000017 	ldw	r16,0(sp)
 2013a60:	dec00304 	addi	sp,sp,12
 2013a64:	f800283a 	ret
 2013a68:	80c00017 	ldw	r3,0(r16)
 2013a6c:	183ff926 	beq	r3,zero,2013a54 <_gp+0xffff4994>
 2013a70:	88c00015 	stw	r3,0(r17)
 2013a74:	003ff706 	br	2013a54 <_gp+0xffff4994>

02013a78 <__sread>:
 2013a78:	defffe04 	addi	sp,sp,-8
 2013a7c:	dc000015 	stw	r16,0(sp)
 2013a80:	2821883a 	mov	r16,r5
 2013a84:	2940038f 	ldh	r5,14(r5)
 2013a88:	dfc00115 	stw	ra,4(sp)
 2013a8c:	20147b80 	call	20147b8 <_read_r>
 2013a90:	10000716 	blt	r2,zero,2013ab0 <__sread+0x38>
 2013a94:	80c01417 	ldw	r3,80(r16)
 2013a98:	1887883a 	add	r3,r3,r2
 2013a9c:	80c01415 	stw	r3,80(r16)
 2013aa0:	dfc00117 	ldw	ra,4(sp)
 2013aa4:	dc000017 	ldw	r16,0(sp)
 2013aa8:	dec00204 	addi	sp,sp,8
 2013aac:	f800283a 	ret
 2013ab0:	80c0030b 	ldhu	r3,12(r16)
 2013ab4:	18fbffcc 	andi	r3,r3,61439
 2013ab8:	80c0030d 	sth	r3,12(r16)
 2013abc:	dfc00117 	ldw	ra,4(sp)
 2013ac0:	dc000017 	ldw	r16,0(sp)
 2013ac4:	dec00204 	addi	sp,sp,8
 2013ac8:	f800283a 	ret

02013acc <__seofread>:
 2013acc:	0005883a 	mov	r2,zero
 2013ad0:	f800283a 	ret

02013ad4 <__swrite>:
 2013ad4:	2880030b 	ldhu	r2,12(r5)
 2013ad8:	defffb04 	addi	sp,sp,-20
 2013adc:	dcc00315 	stw	r19,12(sp)
 2013ae0:	dc800215 	stw	r18,8(sp)
 2013ae4:	dc400115 	stw	r17,4(sp)
 2013ae8:	dc000015 	stw	r16,0(sp)
 2013aec:	dfc00415 	stw	ra,16(sp)
 2013af0:	10c0400c 	andi	r3,r2,256
 2013af4:	2821883a 	mov	r16,r5
 2013af8:	2023883a 	mov	r17,r4
 2013afc:	3025883a 	mov	r18,r6
 2013b00:	3827883a 	mov	r19,r7
 2013b04:	18000526 	beq	r3,zero,2013b1c <__swrite+0x48>
 2013b08:	2940038f 	ldh	r5,14(r5)
 2013b0c:	01c00084 	movi	r7,2
 2013b10:	000d883a 	mov	r6,zero
 2013b14:	201459c0 	call	201459c <_lseek_r>
 2013b18:	8080030b 	ldhu	r2,12(r16)
 2013b1c:	8140038f 	ldh	r5,14(r16)
 2013b20:	10bbffcc 	andi	r2,r2,61439
 2013b24:	980f883a 	mov	r7,r19
 2013b28:	900d883a 	mov	r6,r18
 2013b2c:	8809883a 	mov	r4,r17
 2013b30:	8080030d 	sth	r2,12(r16)
 2013b34:	dfc00417 	ldw	ra,16(sp)
 2013b38:	dcc00317 	ldw	r19,12(sp)
 2013b3c:	dc800217 	ldw	r18,8(sp)
 2013b40:	dc400117 	ldw	r17,4(sp)
 2013b44:	dc000017 	ldw	r16,0(sp)
 2013b48:	dec00504 	addi	sp,sp,20
 2013b4c:	2013bb41 	jmpi	2013bb4 <_write_r>

02013b50 <__sseek>:
 2013b50:	defffe04 	addi	sp,sp,-8
 2013b54:	dc000015 	stw	r16,0(sp)
 2013b58:	2821883a 	mov	r16,r5
 2013b5c:	2940038f 	ldh	r5,14(r5)
 2013b60:	dfc00115 	stw	ra,4(sp)
 2013b64:	201459c0 	call	201459c <_lseek_r>
 2013b68:	00ffffc4 	movi	r3,-1
 2013b6c:	10c00826 	beq	r2,r3,2013b90 <__sseek+0x40>
 2013b70:	80c0030b 	ldhu	r3,12(r16)
 2013b74:	80801415 	stw	r2,80(r16)
 2013b78:	18c40014 	ori	r3,r3,4096
 2013b7c:	80c0030d 	sth	r3,12(r16)
 2013b80:	dfc00117 	ldw	ra,4(sp)
 2013b84:	dc000017 	ldw	r16,0(sp)
 2013b88:	dec00204 	addi	sp,sp,8
 2013b8c:	f800283a 	ret
 2013b90:	80c0030b 	ldhu	r3,12(r16)
 2013b94:	18fbffcc 	andi	r3,r3,61439
 2013b98:	80c0030d 	sth	r3,12(r16)
 2013b9c:	dfc00117 	ldw	ra,4(sp)
 2013ba0:	dc000017 	ldw	r16,0(sp)
 2013ba4:	dec00204 	addi	sp,sp,8
 2013ba8:	f800283a 	ret

02013bac <__sclose>:
 2013bac:	2940038f 	ldh	r5,14(r5)
 2013bb0:	2013d681 	jmpi	2013d68 <_close_r>

02013bb4 <_write_r>:
 2013bb4:	defffd04 	addi	sp,sp,-12
 2013bb8:	2805883a 	mov	r2,r5
 2013bbc:	dc000015 	stw	r16,0(sp)
 2013bc0:	04008074 	movhi	r16,513
 2013bc4:	dc400115 	stw	r17,4(sp)
 2013bc8:	300b883a 	mov	r5,r6
 2013bcc:	841ecb04 	addi	r16,r16,31532
 2013bd0:	2023883a 	mov	r17,r4
 2013bd4:	380d883a 	mov	r6,r7
 2013bd8:	1009883a 	mov	r4,r2
 2013bdc:	dfc00215 	stw	ra,8(sp)
 2013be0:	80000015 	stw	zero,0(r16)
 2013be4:	2014ebc0 	call	2014ebc <write>
 2013be8:	00ffffc4 	movi	r3,-1
 2013bec:	10c00526 	beq	r2,r3,2013c04 <_write_r+0x50>
 2013bf0:	dfc00217 	ldw	ra,8(sp)
 2013bf4:	dc400117 	ldw	r17,4(sp)
 2013bf8:	dc000017 	ldw	r16,0(sp)
 2013bfc:	dec00304 	addi	sp,sp,12
 2013c00:	f800283a 	ret
 2013c04:	80c00017 	ldw	r3,0(r16)
 2013c08:	183ff926 	beq	r3,zero,2013bf0 <_gp+0xffff4b30>
 2013c0c:	88c00015 	stw	r3,0(r17)
 2013c10:	003ff706 	br	2013bf0 <_gp+0xffff4b30>

02013c14 <__swsetup_r>:
 2013c14:	00808074 	movhi	r2,513
 2013c18:	defffd04 	addi	sp,sp,-12
 2013c1c:	109c3204 	addi	r2,r2,28872
 2013c20:	dc400115 	stw	r17,4(sp)
 2013c24:	2023883a 	mov	r17,r4
 2013c28:	11000017 	ldw	r4,0(r2)
 2013c2c:	dc000015 	stw	r16,0(sp)
 2013c30:	dfc00215 	stw	ra,8(sp)
 2013c34:	2821883a 	mov	r16,r5
 2013c38:	20000226 	beq	r4,zero,2013c44 <__swsetup_r+0x30>
 2013c3c:	20800e17 	ldw	r2,56(r4)
 2013c40:	10003126 	beq	r2,zero,2013d08 <__swsetup_r+0xf4>
 2013c44:	8080030b 	ldhu	r2,12(r16)
 2013c48:	10c0020c 	andi	r3,r2,8
 2013c4c:	1009883a 	mov	r4,r2
 2013c50:	18000f26 	beq	r3,zero,2013c90 <__swsetup_r+0x7c>
 2013c54:	80c00417 	ldw	r3,16(r16)
 2013c58:	18001526 	beq	r3,zero,2013cb0 <__swsetup_r+0x9c>
 2013c5c:	1100004c 	andi	r4,r2,1
 2013c60:	20001c1e 	bne	r4,zero,2013cd4 <__swsetup_r+0xc0>
 2013c64:	1080008c 	andi	r2,r2,2
 2013c68:	1000291e 	bne	r2,zero,2013d10 <__swsetup_r+0xfc>
 2013c6c:	80800517 	ldw	r2,20(r16)
 2013c70:	80800215 	stw	r2,8(r16)
 2013c74:	18001c26 	beq	r3,zero,2013ce8 <__swsetup_r+0xd4>
 2013c78:	0005883a 	mov	r2,zero
 2013c7c:	dfc00217 	ldw	ra,8(sp)
 2013c80:	dc400117 	ldw	r17,4(sp)
 2013c84:	dc000017 	ldw	r16,0(sp)
 2013c88:	dec00304 	addi	sp,sp,12
 2013c8c:	f800283a 	ret
 2013c90:	2080040c 	andi	r2,r4,16
 2013c94:	10002e26 	beq	r2,zero,2013d50 <__swsetup_r+0x13c>
 2013c98:	2080010c 	andi	r2,r4,4
 2013c9c:	10001e1e 	bne	r2,zero,2013d18 <__swsetup_r+0x104>
 2013ca0:	80c00417 	ldw	r3,16(r16)
 2013ca4:	20800214 	ori	r2,r4,8
 2013ca8:	8080030d 	sth	r2,12(r16)
 2013cac:	183feb1e 	bne	r3,zero,2013c5c <_gp+0xffff4b9c>
 2013cb0:	1100a00c 	andi	r4,r2,640
 2013cb4:	01408004 	movi	r5,512
 2013cb8:	217fe826 	beq	r4,r5,2013c5c <_gp+0xffff4b9c>
 2013cbc:	800b883a 	mov	r5,r16
 2013cc0:	8809883a 	mov	r4,r17
 2013cc4:	20145fc0 	call	20145fc <__smakebuf_r>
 2013cc8:	8080030b 	ldhu	r2,12(r16)
 2013ccc:	80c00417 	ldw	r3,16(r16)
 2013cd0:	003fe206 	br	2013c5c <_gp+0xffff4b9c>
 2013cd4:	80800517 	ldw	r2,20(r16)
 2013cd8:	80000215 	stw	zero,8(r16)
 2013cdc:	0085c83a 	sub	r2,zero,r2
 2013ce0:	80800615 	stw	r2,24(r16)
 2013ce4:	183fe41e 	bne	r3,zero,2013c78 <_gp+0xffff4bb8>
 2013ce8:	80c0030b 	ldhu	r3,12(r16)
 2013cec:	0005883a 	mov	r2,zero
 2013cf0:	1900200c 	andi	r4,r3,128
 2013cf4:	203fe126 	beq	r4,zero,2013c7c <_gp+0xffff4bbc>
 2013cf8:	18c01014 	ori	r3,r3,64
 2013cfc:	80c0030d 	sth	r3,12(r16)
 2013d00:	00bfffc4 	movi	r2,-1
 2013d04:	003fdd06 	br	2013c7c <_gp+0xffff4bbc>
 2013d08:	20121640 	call	2012164 <__sinit>
 2013d0c:	003fcd06 	br	2013c44 <_gp+0xffff4b84>
 2013d10:	0005883a 	mov	r2,zero
 2013d14:	003fd606 	br	2013c70 <_gp+0xffff4bb0>
 2013d18:	81400c17 	ldw	r5,48(r16)
 2013d1c:	28000626 	beq	r5,zero,2013d38 <__swsetup_r+0x124>
 2013d20:	80801004 	addi	r2,r16,64
 2013d24:	28800326 	beq	r5,r2,2013d34 <__swsetup_r+0x120>
 2013d28:	8809883a 	mov	r4,r17
 2013d2c:	201428c0 	call	201428c <_free_r>
 2013d30:	8100030b 	ldhu	r4,12(r16)
 2013d34:	80000c15 	stw	zero,48(r16)
 2013d38:	80c00417 	ldw	r3,16(r16)
 2013d3c:	00bff6c4 	movi	r2,-37
 2013d40:	1108703a 	and	r4,r2,r4
 2013d44:	80000115 	stw	zero,4(r16)
 2013d48:	80c00015 	stw	r3,0(r16)
 2013d4c:	003fd506 	br	2013ca4 <_gp+0xffff4be4>
 2013d50:	00800244 	movi	r2,9
 2013d54:	88800015 	stw	r2,0(r17)
 2013d58:	20801014 	ori	r2,r4,64
 2013d5c:	8080030d 	sth	r2,12(r16)
 2013d60:	00bfffc4 	movi	r2,-1
 2013d64:	003fc506 	br	2013c7c <_gp+0xffff4bbc>

02013d68 <_close_r>:
 2013d68:	defffd04 	addi	sp,sp,-12
 2013d6c:	dc000015 	stw	r16,0(sp)
 2013d70:	04008074 	movhi	r16,513
 2013d74:	dc400115 	stw	r17,4(sp)
 2013d78:	841ecb04 	addi	r16,r16,31532
 2013d7c:	2023883a 	mov	r17,r4
 2013d80:	2809883a 	mov	r4,r5
 2013d84:	dfc00215 	stw	ra,8(sp)
 2013d88:	80000015 	stw	zero,0(r16)
 2013d8c:	20148c80 	call	20148c8 <close>
 2013d90:	00ffffc4 	movi	r3,-1
 2013d94:	10c00526 	beq	r2,r3,2013dac <_close_r+0x44>
 2013d98:	dfc00217 	ldw	ra,8(sp)
 2013d9c:	dc400117 	ldw	r17,4(sp)
 2013da0:	dc000017 	ldw	r16,0(sp)
 2013da4:	dec00304 	addi	sp,sp,12
 2013da8:	f800283a 	ret
 2013dac:	80c00017 	ldw	r3,0(r16)
 2013db0:	183ff926 	beq	r3,zero,2013d98 <_gp+0xffff4cd8>
 2013db4:	88c00015 	stw	r3,0(r17)
 2013db8:	003ff706 	br	2013d98 <_gp+0xffff4cd8>

02013dbc <_fclose_r>:
 2013dbc:	28003926 	beq	r5,zero,2013ea4 <_fclose_r+0xe8>
 2013dc0:	defffc04 	addi	sp,sp,-16
 2013dc4:	dc400115 	stw	r17,4(sp)
 2013dc8:	dc000015 	stw	r16,0(sp)
 2013dcc:	dfc00315 	stw	ra,12(sp)
 2013dd0:	dc800215 	stw	r18,8(sp)
 2013dd4:	2023883a 	mov	r17,r4
 2013dd8:	2821883a 	mov	r16,r5
 2013ddc:	20000226 	beq	r4,zero,2013de8 <_fclose_r+0x2c>
 2013de0:	20800e17 	ldw	r2,56(r4)
 2013de4:	10002726 	beq	r2,zero,2013e84 <_fclose_r+0xc8>
 2013de8:	8080030f 	ldh	r2,12(r16)
 2013dec:	1000071e 	bne	r2,zero,2013e0c <_fclose_r+0x50>
 2013df0:	0005883a 	mov	r2,zero
 2013df4:	dfc00317 	ldw	ra,12(sp)
 2013df8:	dc800217 	ldw	r18,8(sp)
 2013dfc:	dc400117 	ldw	r17,4(sp)
 2013e00:	dc000017 	ldw	r16,0(sp)
 2013e04:	dec00404 	addi	sp,sp,16
 2013e08:	f800283a 	ret
 2013e0c:	800b883a 	mov	r5,r16
 2013e10:	8809883a 	mov	r4,r17
 2013e14:	2013ec00 	call	2013ec0 <__sflush_r>
 2013e18:	1025883a 	mov	r18,r2
 2013e1c:	80800b17 	ldw	r2,44(r16)
 2013e20:	10000426 	beq	r2,zero,2013e34 <_fclose_r+0x78>
 2013e24:	81400717 	ldw	r5,28(r16)
 2013e28:	8809883a 	mov	r4,r17
 2013e2c:	103ee83a 	callr	r2
 2013e30:	10001616 	blt	r2,zero,2013e8c <_fclose_r+0xd0>
 2013e34:	8080030b 	ldhu	r2,12(r16)
 2013e38:	1080200c 	andi	r2,r2,128
 2013e3c:	1000151e 	bne	r2,zero,2013e94 <_fclose_r+0xd8>
 2013e40:	81400c17 	ldw	r5,48(r16)
 2013e44:	28000526 	beq	r5,zero,2013e5c <_fclose_r+0xa0>
 2013e48:	80801004 	addi	r2,r16,64
 2013e4c:	28800226 	beq	r5,r2,2013e58 <_fclose_r+0x9c>
 2013e50:	8809883a 	mov	r4,r17
 2013e54:	201428c0 	call	201428c <_free_r>
 2013e58:	80000c15 	stw	zero,48(r16)
 2013e5c:	81401117 	ldw	r5,68(r16)
 2013e60:	28000326 	beq	r5,zero,2013e70 <_fclose_r+0xb4>
 2013e64:	8809883a 	mov	r4,r17
 2013e68:	201428c0 	call	201428c <_free_r>
 2013e6c:	80001115 	stw	zero,68(r16)
 2013e70:	20121740 	call	2012174 <__sfp_lock_acquire>
 2013e74:	8000030d 	sth	zero,12(r16)
 2013e78:	20121780 	call	2012178 <__sfp_lock_release>
 2013e7c:	9005883a 	mov	r2,r18
 2013e80:	003fdc06 	br	2013df4 <_gp+0xffff4d34>
 2013e84:	20121640 	call	2012164 <__sinit>
 2013e88:	003fd706 	br	2013de8 <_gp+0xffff4d28>
 2013e8c:	04bfffc4 	movi	r18,-1
 2013e90:	003fe806 	br	2013e34 <_gp+0xffff4d74>
 2013e94:	81400417 	ldw	r5,16(r16)
 2013e98:	8809883a 	mov	r4,r17
 2013e9c:	201428c0 	call	201428c <_free_r>
 2013ea0:	003fe706 	br	2013e40 <_gp+0xffff4d80>
 2013ea4:	0005883a 	mov	r2,zero
 2013ea8:	f800283a 	ret

02013eac <fclose>:
 2013eac:	00808074 	movhi	r2,513
 2013eb0:	109c3204 	addi	r2,r2,28872
 2013eb4:	200b883a 	mov	r5,r4
 2013eb8:	11000017 	ldw	r4,0(r2)
 2013ebc:	2013dbc1 	jmpi	2013dbc <_fclose_r>

02013ec0 <__sflush_r>:
 2013ec0:	2880030b 	ldhu	r2,12(r5)
 2013ec4:	defffb04 	addi	sp,sp,-20
 2013ec8:	dcc00315 	stw	r19,12(sp)
 2013ecc:	dc400115 	stw	r17,4(sp)
 2013ed0:	dfc00415 	stw	ra,16(sp)
 2013ed4:	dc800215 	stw	r18,8(sp)
 2013ed8:	dc000015 	stw	r16,0(sp)
 2013edc:	10c0020c 	andi	r3,r2,8
 2013ee0:	2823883a 	mov	r17,r5
 2013ee4:	2027883a 	mov	r19,r4
 2013ee8:	1800311e 	bne	r3,zero,2013fb0 <__sflush_r+0xf0>
 2013eec:	28c00117 	ldw	r3,4(r5)
 2013ef0:	10820014 	ori	r2,r2,2048
 2013ef4:	2880030d 	sth	r2,12(r5)
 2013ef8:	00c04b0e 	bge	zero,r3,2014028 <__sflush_r+0x168>
 2013efc:	8a000a17 	ldw	r8,40(r17)
 2013f00:	40002326 	beq	r8,zero,2013f90 <__sflush_r+0xd0>
 2013f04:	9c000017 	ldw	r16,0(r19)
 2013f08:	10c4000c 	andi	r3,r2,4096
 2013f0c:	98000015 	stw	zero,0(r19)
 2013f10:	18004826 	beq	r3,zero,2014034 <__sflush_r+0x174>
 2013f14:	89801417 	ldw	r6,80(r17)
 2013f18:	10c0010c 	andi	r3,r2,4
 2013f1c:	18000626 	beq	r3,zero,2013f38 <__sflush_r+0x78>
 2013f20:	88c00117 	ldw	r3,4(r17)
 2013f24:	88800c17 	ldw	r2,48(r17)
 2013f28:	30cdc83a 	sub	r6,r6,r3
 2013f2c:	10000226 	beq	r2,zero,2013f38 <__sflush_r+0x78>
 2013f30:	88800f17 	ldw	r2,60(r17)
 2013f34:	308dc83a 	sub	r6,r6,r2
 2013f38:	89400717 	ldw	r5,28(r17)
 2013f3c:	000f883a 	mov	r7,zero
 2013f40:	9809883a 	mov	r4,r19
 2013f44:	403ee83a 	callr	r8
 2013f48:	00ffffc4 	movi	r3,-1
 2013f4c:	10c04426 	beq	r2,r3,2014060 <__sflush_r+0x1a0>
 2013f50:	88c0030b 	ldhu	r3,12(r17)
 2013f54:	89000417 	ldw	r4,16(r17)
 2013f58:	88000115 	stw	zero,4(r17)
 2013f5c:	197dffcc 	andi	r5,r3,63487
 2013f60:	8940030d 	sth	r5,12(r17)
 2013f64:	89000015 	stw	r4,0(r17)
 2013f68:	18c4000c 	andi	r3,r3,4096
 2013f6c:	18002c1e 	bne	r3,zero,2014020 <__sflush_r+0x160>
 2013f70:	89400c17 	ldw	r5,48(r17)
 2013f74:	9c000015 	stw	r16,0(r19)
 2013f78:	28000526 	beq	r5,zero,2013f90 <__sflush_r+0xd0>
 2013f7c:	88801004 	addi	r2,r17,64
 2013f80:	28800226 	beq	r5,r2,2013f8c <__sflush_r+0xcc>
 2013f84:	9809883a 	mov	r4,r19
 2013f88:	201428c0 	call	201428c <_free_r>
 2013f8c:	88000c15 	stw	zero,48(r17)
 2013f90:	0005883a 	mov	r2,zero
 2013f94:	dfc00417 	ldw	ra,16(sp)
 2013f98:	dcc00317 	ldw	r19,12(sp)
 2013f9c:	dc800217 	ldw	r18,8(sp)
 2013fa0:	dc400117 	ldw	r17,4(sp)
 2013fa4:	dc000017 	ldw	r16,0(sp)
 2013fa8:	dec00504 	addi	sp,sp,20
 2013fac:	f800283a 	ret
 2013fb0:	2c800417 	ldw	r18,16(r5)
 2013fb4:	903ff626 	beq	r18,zero,2013f90 <_gp+0xffff4ed0>
 2013fb8:	2c000017 	ldw	r16,0(r5)
 2013fbc:	108000cc 	andi	r2,r2,3
 2013fc0:	2c800015 	stw	r18,0(r5)
 2013fc4:	84a1c83a 	sub	r16,r16,r18
 2013fc8:	1000131e 	bne	r2,zero,2014018 <__sflush_r+0x158>
 2013fcc:	28800517 	ldw	r2,20(r5)
 2013fd0:	88800215 	stw	r2,8(r17)
 2013fd4:	04000316 	blt	zero,r16,2013fe4 <__sflush_r+0x124>
 2013fd8:	003fed06 	br	2013f90 <_gp+0xffff4ed0>
 2013fdc:	90a5883a 	add	r18,r18,r2
 2013fe0:	043feb0e 	bge	zero,r16,2013f90 <_gp+0xffff4ed0>
 2013fe4:	88800917 	ldw	r2,36(r17)
 2013fe8:	89400717 	ldw	r5,28(r17)
 2013fec:	800f883a 	mov	r7,r16
 2013ff0:	900d883a 	mov	r6,r18
 2013ff4:	9809883a 	mov	r4,r19
 2013ff8:	103ee83a 	callr	r2
 2013ffc:	80a1c83a 	sub	r16,r16,r2
 2014000:	00bff616 	blt	zero,r2,2013fdc <_gp+0xffff4f1c>
 2014004:	88c0030b 	ldhu	r3,12(r17)
 2014008:	00bfffc4 	movi	r2,-1
 201400c:	18c01014 	ori	r3,r3,64
 2014010:	88c0030d 	sth	r3,12(r17)
 2014014:	003fdf06 	br	2013f94 <_gp+0xffff4ed4>
 2014018:	0005883a 	mov	r2,zero
 201401c:	003fec06 	br	2013fd0 <_gp+0xffff4f10>
 2014020:	88801415 	stw	r2,80(r17)
 2014024:	003fd206 	br	2013f70 <_gp+0xffff4eb0>
 2014028:	28c00f17 	ldw	r3,60(r5)
 201402c:	00ffb316 	blt	zero,r3,2013efc <_gp+0xffff4e3c>
 2014030:	003fd706 	br	2013f90 <_gp+0xffff4ed0>
 2014034:	89400717 	ldw	r5,28(r17)
 2014038:	000d883a 	mov	r6,zero
 201403c:	01c00044 	movi	r7,1
 2014040:	9809883a 	mov	r4,r19
 2014044:	403ee83a 	callr	r8
 2014048:	100d883a 	mov	r6,r2
 201404c:	00bfffc4 	movi	r2,-1
 2014050:	30801426 	beq	r6,r2,20140a4 <__sflush_r+0x1e4>
 2014054:	8880030b 	ldhu	r2,12(r17)
 2014058:	8a000a17 	ldw	r8,40(r17)
 201405c:	003fae06 	br	2013f18 <_gp+0xffff4e58>
 2014060:	98c00017 	ldw	r3,0(r19)
 2014064:	183fba26 	beq	r3,zero,2013f50 <_gp+0xffff4e90>
 2014068:	01000744 	movi	r4,29
 201406c:	19000626 	beq	r3,r4,2014088 <__sflush_r+0x1c8>
 2014070:	01000584 	movi	r4,22
 2014074:	19000426 	beq	r3,r4,2014088 <__sflush_r+0x1c8>
 2014078:	88c0030b 	ldhu	r3,12(r17)
 201407c:	18c01014 	ori	r3,r3,64
 2014080:	88c0030d 	sth	r3,12(r17)
 2014084:	003fc306 	br	2013f94 <_gp+0xffff4ed4>
 2014088:	8880030b 	ldhu	r2,12(r17)
 201408c:	88c00417 	ldw	r3,16(r17)
 2014090:	88000115 	stw	zero,4(r17)
 2014094:	10bdffcc 	andi	r2,r2,63487
 2014098:	8880030d 	sth	r2,12(r17)
 201409c:	88c00015 	stw	r3,0(r17)
 20140a0:	003fb306 	br	2013f70 <_gp+0xffff4eb0>
 20140a4:	98800017 	ldw	r2,0(r19)
 20140a8:	103fea26 	beq	r2,zero,2014054 <_gp+0xffff4f94>
 20140ac:	00c00744 	movi	r3,29
 20140b0:	10c00226 	beq	r2,r3,20140bc <__sflush_r+0x1fc>
 20140b4:	00c00584 	movi	r3,22
 20140b8:	10c0031e 	bne	r2,r3,20140c8 <__sflush_r+0x208>
 20140bc:	9c000015 	stw	r16,0(r19)
 20140c0:	0005883a 	mov	r2,zero
 20140c4:	003fb306 	br	2013f94 <_gp+0xffff4ed4>
 20140c8:	88c0030b 	ldhu	r3,12(r17)
 20140cc:	3005883a 	mov	r2,r6
 20140d0:	18c01014 	ori	r3,r3,64
 20140d4:	88c0030d 	sth	r3,12(r17)
 20140d8:	003fae06 	br	2013f94 <_gp+0xffff4ed4>

020140dc <_fflush_r>:
 20140dc:	defffd04 	addi	sp,sp,-12
 20140e0:	dc000115 	stw	r16,4(sp)
 20140e4:	dfc00215 	stw	ra,8(sp)
 20140e8:	2021883a 	mov	r16,r4
 20140ec:	20000226 	beq	r4,zero,20140f8 <_fflush_r+0x1c>
 20140f0:	20800e17 	ldw	r2,56(r4)
 20140f4:	10000c26 	beq	r2,zero,2014128 <_fflush_r+0x4c>
 20140f8:	2880030f 	ldh	r2,12(r5)
 20140fc:	1000051e 	bne	r2,zero,2014114 <_fflush_r+0x38>
 2014100:	0005883a 	mov	r2,zero
 2014104:	dfc00217 	ldw	ra,8(sp)
 2014108:	dc000117 	ldw	r16,4(sp)
 201410c:	dec00304 	addi	sp,sp,12
 2014110:	f800283a 	ret
 2014114:	8009883a 	mov	r4,r16
 2014118:	dfc00217 	ldw	ra,8(sp)
 201411c:	dc000117 	ldw	r16,4(sp)
 2014120:	dec00304 	addi	sp,sp,12
 2014124:	2013ec01 	jmpi	2013ec0 <__sflush_r>
 2014128:	d9400015 	stw	r5,0(sp)
 201412c:	20121640 	call	2012164 <__sinit>
 2014130:	d9400017 	ldw	r5,0(sp)
 2014134:	003ff006 	br	20140f8 <_gp+0xffff5038>

02014138 <fflush>:
 2014138:	20000526 	beq	r4,zero,2014150 <fflush+0x18>
 201413c:	00808074 	movhi	r2,513
 2014140:	109c3204 	addi	r2,r2,28872
 2014144:	200b883a 	mov	r5,r4
 2014148:	11000017 	ldw	r4,0(r2)
 201414c:	20140dc1 	jmpi	20140dc <_fflush_r>
 2014150:	00808074 	movhi	r2,513
 2014154:	109c3104 	addi	r2,r2,28868
 2014158:	11000017 	ldw	r4,0(r2)
 201415c:	01408074 	movhi	r5,513
 2014160:	29503704 	addi	r5,r5,16604
 2014164:	20127401 	jmpi	2012740 <_fwalk_reent>

02014168 <_malloc_trim_r>:
 2014168:	defffb04 	addi	sp,sp,-20
 201416c:	dcc00315 	stw	r19,12(sp)
 2014170:	04c08074 	movhi	r19,513
 2014174:	dc800215 	stw	r18,8(sp)
 2014178:	dc400115 	stw	r17,4(sp)
 201417c:	dc000015 	stw	r16,0(sp)
 2014180:	dfc00415 	stw	ra,16(sp)
 2014184:	2821883a 	mov	r16,r5
 2014188:	9cdab904 	addi	r19,r19,27364
 201418c:	2025883a 	mov	r18,r4
 2014190:	2014ce80 	call	2014ce8 <__malloc_lock>
 2014194:	98800217 	ldw	r2,8(r19)
 2014198:	14400117 	ldw	r17,4(r2)
 201419c:	00bfff04 	movi	r2,-4
 20141a0:	88a2703a 	and	r17,r17,r2
 20141a4:	8c21c83a 	sub	r16,r17,r16
 20141a8:	8403fbc4 	addi	r16,r16,4079
 20141ac:	8020d33a 	srli	r16,r16,12
 20141b0:	0083ffc4 	movi	r2,4095
 20141b4:	843fffc4 	addi	r16,r16,-1
 20141b8:	8020933a 	slli	r16,r16,12
 20141bc:	1400060e 	bge	r2,r16,20141d8 <_malloc_trim_r+0x70>
 20141c0:	000b883a 	mov	r5,zero
 20141c4:	9009883a 	mov	r4,r18
 20141c8:	2013a240 	call	2013a24 <_sbrk_r>
 20141cc:	98c00217 	ldw	r3,8(r19)
 20141d0:	1c47883a 	add	r3,r3,r17
 20141d4:	10c00a26 	beq	r2,r3,2014200 <_malloc_trim_r+0x98>
 20141d8:	9009883a 	mov	r4,r18
 20141dc:	2014cec0 	call	2014cec <__malloc_unlock>
 20141e0:	0005883a 	mov	r2,zero
 20141e4:	dfc00417 	ldw	ra,16(sp)
 20141e8:	dcc00317 	ldw	r19,12(sp)
 20141ec:	dc800217 	ldw	r18,8(sp)
 20141f0:	dc400117 	ldw	r17,4(sp)
 20141f4:	dc000017 	ldw	r16,0(sp)
 20141f8:	dec00504 	addi	sp,sp,20
 20141fc:	f800283a 	ret
 2014200:	040bc83a 	sub	r5,zero,r16
 2014204:	9009883a 	mov	r4,r18
 2014208:	2013a240 	call	2013a24 <_sbrk_r>
 201420c:	00ffffc4 	movi	r3,-1
 2014210:	10c00d26 	beq	r2,r3,2014248 <_malloc_trim_r+0xe0>
 2014214:	00c08074 	movhi	r3,513
 2014218:	18decf04 	addi	r3,r3,31548
 201421c:	18800017 	ldw	r2,0(r3)
 2014220:	99000217 	ldw	r4,8(r19)
 2014224:	8c23c83a 	sub	r17,r17,r16
 2014228:	8c400054 	ori	r17,r17,1
 201422c:	1421c83a 	sub	r16,r2,r16
 2014230:	24400115 	stw	r17,4(r4)
 2014234:	9009883a 	mov	r4,r18
 2014238:	1c000015 	stw	r16,0(r3)
 201423c:	2014cec0 	call	2014cec <__malloc_unlock>
 2014240:	00800044 	movi	r2,1
 2014244:	003fe706 	br	20141e4 <_gp+0xffff5124>
 2014248:	000b883a 	mov	r5,zero
 201424c:	9009883a 	mov	r4,r18
 2014250:	2013a240 	call	2013a24 <_sbrk_r>
 2014254:	99000217 	ldw	r4,8(r19)
 2014258:	014003c4 	movi	r5,15
 201425c:	1107c83a 	sub	r3,r2,r4
 2014260:	28ffdd0e 	bge	r5,r3,20141d8 <_gp+0xffff5118>
 2014264:	01408074 	movhi	r5,513
 2014268:	295c3304 	addi	r5,r5,28876
 201426c:	29400017 	ldw	r5,0(r5)
 2014270:	18c00054 	ori	r3,r3,1
 2014274:	20c00115 	stw	r3,4(r4)
 2014278:	00c08074 	movhi	r3,513
 201427c:	1145c83a 	sub	r2,r2,r5
 2014280:	18decf04 	addi	r3,r3,31548
 2014284:	18800015 	stw	r2,0(r3)
 2014288:	003fd306 	br	20141d8 <_gp+0xffff5118>

0201428c <_free_r>:
 201428c:	28004126 	beq	r5,zero,2014394 <_free_r+0x108>
 2014290:	defffd04 	addi	sp,sp,-12
 2014294:	dc400115 	stw	r17,4(sp)
 2014298:	dc000015 	stw	r16,0(sp)
 201429c:	2023883a 	mov	r17,r4
 20142a0:	2821883a 	mov	r16,r5
 20142a4:	dfc00215 	stw	ra,8(sp)
 20142a8:	2014ce80 	call	2014ce8 <__malloc_lock>
 20142ac:	81ffff17 	ldw	r7,-4(r16)
 20142b0:	00bfff84 	movi	r2,-2
 20142b4:	01008074 	movhi	r4,513
 20142b8:	81bffe04 	addi	r6,r16,-8
 20142bc:	3884703a 	and	r2,r7,r2
 20142c0:	211ab904 	addi	r4,r4,27364
 20142c4:	308b883a 	add	r5,r6,r2
 20142c8:	2a400117 	ldw	r9,4(r5)
 20142cc:	22000217 	ldw	r8,8(r4)
 20142d0:	00ffff04 	movi	r3,-4
 20142d4:	48c6703a 	and	r3,r9,r3
 20142d8:	2a005726 	beq	r5,r8,2014438 <_free_r+0x1ac>
 20142dc:	28c00115 	stw	r3,4(r5)
 20142e0:	39c0004c 	andi	r7,r7,1
 20142e4:	3800091e 	bne	r7,zero,201430c <_free_r+0x80>
 20142e8:	823ffe17 	ldw	r8,-8(r16)
 20142ec:	22400204 	addi	r9,r4,8
 20142f0:	320dc83a 	sub	r6,r6,r8
 20142f4:	31c00217 	ldw	r7,8(r6)
 20142f8:	1205883a 	add	r2,r2,r8
 20142fc:	3a406526 	beq	r7,r9,2014494 <_free_r+0x208>
 2014300:	32000317 	ldw	r8,12(r6)
 2014304:	3a000315 	stw	r8,12(r7)
 2014308:	41c00215 	stw	r7,8(r8)
 201430c:	28cf883a 	add	r7,r5,r3
 2014310:	39c00117 	ldw	r7,4(r7)
 2014314:	39c0004c 	andi	r7,r7,1
 2014318:	38003a26 	beq	r7,zero,2014404 <_free_r+0x178>
 201431c:	10c00054 	ori	r3,r2,1
 2014320:	30c00115 	stw	r3,4(r6)
 2014324:	3087883a 	add	r3,r6,r2
 2014328:	18800015 	stw	r2,0(r3)
 201432c:	00c07fc4 	movi	r3,511
 2014330:	18801936 	bltu	r3,r2,2014398 <_free_r+0x10c>
 2014334:	1004d0fa 	srli	r2,r2,3
 2014338:	01c00044 	movi	r7,1
 201433c:	21400117 	ldw	r5,4(r4)
 2014340:	10c00044 	addi	r3,r2,1
 2014344:	18c7883a 	add	r3,r3,r3
 2014348:	1005d0ba 	srai	r2,r2,2
 201434c:	18c7883a 	add	r3,r3,r3
 2014350:	18c7883a 	add	r3,r3,r3
 2014354:	1907883a 	add	r3,r3,r4
 2014358:	3884983a 	sll	r2,r7,r2
 201435c:	19c00017 	ldw	r7,0(r3)
 2014360:	1a3ffe04 	addi	r8,r3,-8
 2014364:	1144b03a 	or	r2,r2,r5
 2014368:	32000315 	stw	r8,12(r6)
 201436c:	31c00215 	stw	r7,8(r6)
 2014370:	20800115 	stw	r2,4(r4)
 2014374:	19800015 	stw	r6,0(r3)
 2014378:	39800315 	stw	r6,12(r7)
 201437c:	8809883a 	mov	r4,r17
 2014380:	dfc00217 	ldw	ra,8(sp)
 2014384:	dc400117 	ldw	r17,4(sp)
 2014388:	dc000017 	ldw	r16,0(sp)
 201438c:	dec00304 	addi	sp,sp,12
 2014390:	2014cec1 	jmpi	2014cec <__malloc_unlock>
 2014394:	f800283a 	ret
 2014398:	100ad27a 	srli	r5,r2,9
 201439c:	00c00104 	movi	r3,4
 20143a0:	19404a36 	bltu	r3,r5,20144cc <_free_r+0x240>
 20143a4:	100ad1ba 	srli	r5,r2,6
 20143a8:	28c00e44 	addi	r3,r5,57
 20143ac:	18c7883a 	add	r3,r3,r3
 20143b0:	29400e04 	addi	r5,r5,56
 20143b4:	18c7883a 	add	r3,r3,r3
 20143b8:	18c7883a 	add	r3,r3,r3
 20143bc:	1909883a 	add	r4,r3,r4
 20143c0:	20c00017 	ldw	r3,0(r4)
 20143c4:	01c08074 	movhi	r7,513
 20143c8:	213ffe04 	addi	r4,r4,-8
 20143cc:	39dab904 	addi	r7,r7,27364
 20143d0:	20c04426 	beq	r4,r3,20144e4 <_free_r+0x258>
 20143d4:	01ffff04 	movi	r7,-4
 20143d8:	19400117 	ldw	r5,4(r3)
 20143dc:	29ca703a 	and	r5,r5,r7
 20143e0:	1140022e 	bgeu	r2,r5,20143ec <_free_r+0x160>
 20143e4:	18c00217 	ldw	r3,8(r3)
 20143e8:	20fffb1e 	bne	r4,r3,20143d8 <_gp+0xffff5318>
 20143ec:	19000317 	ldw	r4,12(r3)
 20143f0:	31000315 	stw	r4,12(r6)
 20143f4:	30c00215 	stw	r3,8(r6)
 20143f8:	21800215 	stw	r6,8(r4)
 20143fc:	19800315 	stw	r6,12(r3)
 2014400:	003fde06 	br	201437c <_gp+0xffff52bc>
 2014404:	29c00217 	ldw	r7,8(r5)
 2014408:	10c5883a 	add	r2,r2,r3
 201440c:	00c08074 	movhi	r3,513
 2014410:	18dabb04 	addi	r3,r3,27372
 2014414:	38c03b26 	beq	r7,r3,2014504 <_free_r+0x278>
 2014418:	2a000317 	ldw	r8,12(r5)
 201441c:	11400054 	ori	r5,r2,1
 2014420:	3087883a 	add	r3,r6,r2
 2014424:	3a000315 	stw	r8,12(r7)
 2014428:	41c00215 	stw	r7,8(r8)
 201442c:	31400115 	stw	r5,4(r6)
 2014430:	18800015 	stw	r2,0(r3)
 2014434:	003fbd06 	br	201432c <_gp+0xffff526c>
 2014438:	39c0004c 	andi	r7,r7,1
 201443c:	10c5883a 	add	r2,r2,r3
 2014440:	3800071e 	bne	r7,zero,2014460 <_free_r+0x1d4>
 2014444:	81fffe17 	ldw	r7,-8(r16)
 2014448:	31cdc83a 	sub	r6,r6,r7
 201444c:	30c00317 	ldw	r3,12(r6)
 2014450:	31400217 	ldw	r5,8(r6)
 2014454:	11c5883a 	add	r2,r2,r7
 2014458:	28c00315 	stw	r3,12(r5)
 201445c:	19400215 	stw	r5,8(r3)
 2014460:	10c00054 	ori	r3,r2,1
 2014464:	30c00115 	stw	r3,4(r6)
 2014468:	00c08074 	movhi	r3,513
 201446c:	18dc3404 	addi	r3,r3,28880
 2014470:	18c00017 	ldw	r3,0(r3)
 2014474:	21800215 	stw	r6,8(r4)
 2014478:	10ffc036 	bltu	r2,r3,201437c <_gp+0xffff52bc>
 201447c:	00808074 	movhi	r2,513
 2014480:	109eca04 	addi	r2,r2,31528
 2014484:	11400017 	ldw	r5,0(r2)
 2014488:	8809883a 	mov	r4,r17
 201448c:	20141680 	call	2014168 <_malloc_trim_r>
 2014490:	003fba06 	br	201437c <_gp+0xffff52bc>
 2014494:	28c9883a 	add	r4,r5,r3
 2014498:	21000117 	ldw	r4,4(r4)
 201449c:	2100004c 	andi	r4,r4,1
 20144a0:	2000391e 	bne	r4,zero,2014588 <_free_r+0x2fc>
 20144a4:	29c00217 	ldw	r7,8(r5)
 20144a8:	29000317 	ldw	r4,12(r5)
 20144ac:	1885883a 	add	r2,r3,r2
 20144b0:	10c00054 	ori	r3,r2,1
 20144b4:	39000315 	stw	r4,12(r7)
 20144b8:	21c00215 	stw	r7,8(r4)
 20144bc:	30c00115 	stw	r3,4(r6)
 20144c0:	308d883a 	add	r6,r6,r2
 20144c4:	30800015 	stw	r2,0(r6)
 20144c8:	003fac06 	br	201437c <_gp+0xffff52bc>
 20144cc:	00c00504 	movi	r3,20
 20144d0:	19401536 	bltu	r3,r5,2014528 <_free_r+0x29c>
 20144d4:	28c01704 	addi	r3,r5,92
 20144d8:	18c7883a 	add	r3,r3,r3
 20144dc:	294016c4 	addi	r5,r5,91
 20144e0:	003fb406 	br	20143b4 <_gp+0xffff52f4>
 20144e4:	280bd0ba 	srai	r5,r5,2
 20144e8:	00c00044 	movi	r3,1
 20144ec:	38800117 	ldw	r2,4(r7)
 20144f0:	194a983a 	sll	r5,r3,r5
 20144f4:	2007883a 	mov	r3,r4
 20144f8:	2884b03a 	or	r2,r5,r2
 20144fc:	38800115 	stw	r2,4(r7)
 2014500:	003fbb06 	br	20143f0 <_gp+0xffff5330>
 2014504:	21800515 	stw	r6,20(r4)
 2014508:	21800415 	stw	r6,16(r4)
 201450c:	10c00054 	ori	r3,r2,1
 2014510:	31c00315 	stw	r7,12(r6)
 2014514:	31c00215 	stw	r7,8(r6)
 2014518:	30c00115 	stw	r3,4(r6)
 201451c:	308d883a 	add	r6,r6,r2
 2014520:	30800015 	stw	r2,0(r6)
 2014524:	003f9506 	br	201437c <_gp+0xffff52bc>
 2014528:	00c01504 	movi	r3,84
 201452c:	19400536 	bltu	r3,r5,2014544 <_free_r+0x2b8>
 2014530:	100ad33a 	srli	r5,r2,12
 2014534:	28c01bc4 	addi	r3,r5,111
 2014538:	18c7883a 	add	r3,r3,r3
 201453c:	29401b84 	addi	r5,r5,110
 2014540:	003f9c06 	br	20143b4 <_gp+0xffff52f4>
 2014544:	00c05504 	movi	r3,340
 2014548:	19400536 	bltu	r3,r5,2014560 <_free_r+0x2d4>
 201454c:	100ad3fa 	srli	r5,r2,15
 2014550:	28c01e04 	addi	r3,r5,120
 2014554:	18c7883a 	add	r3,r3,r3
 2014558:	29401dc4 	addi	r5,r5,119
 201455c:	003f9506 	br	20143b4 <_gp+0xffff52f4>
 2014560:	00c15504 	movi	r3,1364
 2014564:	19400536 	bltu	r3,r5,201457c <_free_r+0x2f0>
 2014568:	100ad4ba 	srli	r5,r2,18
 201456c:	28c01f44 	addi	r3,r5,125
 2014570:	18c7883a 	add	r3,r3,r3
 2014574:	29401f04 	addi	r5,r5,124
 2014578:	003f8e06 	br	20143b4 <_gp+0xffff52f4>
 201457c:	00c03f84 	movi	r3,254
 2014580:	01401f84 	movi	r5,126
 2014584:	003f8b06 	br	20143b4 <_gp+0xffff52f4>
 2014588:	10c00054 	ori	r3,r2,1
 201458c:	30c00115 	stw	r3,4(r6)
 2014590:	308d883a 	add	r6,r6,r2
 2014594:	30800015 	stw	r2,0(r6)
 2014598:	003f7806 	br	201437c <_gp+0xffff52bc>

0201459c <_lseek_r>:
 201459c:	defffd04 	addi	sp,sp,-12
 20145a0:	2805883a 	mov	r2,r5
 20145a4:	dc000015 	stw	r16,0(sp)
 20145a8:	04008074 	movhi	r16,513
 20145ac:	dc400115 	stw	r17,4(sp)
 20145b0:	300b883a 	mov	r5,r6
 20145b4:	841ecb04 	addi	r16,r16,31532
 20145b8:	2023883a 	mov	r17,r4
 20145bc:	380d883a 	mov	r6,r7
 20145c0:	1009883a 	mov	r4,r2
 20145c4:	dfc00215 	stw	ra,8(sp)
 20145c8:	80000015 	stw	zero,0(r16)
 20145cc:	2014bd00 	call	2014bd0 <lseek>
 20145d0:	00ffffc4 	movi	r3,-1
 20145d4:	10c00526 	beq	r2,r3,20145ec <_lseek_r+0x50>
 20145d8:	dfc00217 	ldw	ra,8(sp)
 20145dc:	dc400117 	ldw	r17,4(sp)
 20145e0:	dc000017 	ldw	r16,0(sp)
 20145e4:	dec00304 	addi	sp,sp,12
 20145e8:	f800283a 	ret
 20145ec:	80c00017 	ldw	r3,0(r16)
 20145f0:	183ff926 	beq	r3,zero,20145d8 <_gp+0xffff5518>
 20145f4:	88c00015 	stw	r3,0(r17)
 20145f8:	003ff706 	br	20145d8 <_gp+0xffff5518>

020145fc <__smakebuf_r>:
 20145fc:	2880030b 	ldhu	r2,12(r5)
 2014600:	10c0008c 	andi	r3,r2,2
 2014604:	1800411e 	bne	r3,zero,201470c <__smakebuf_r+0x110>
 2014608:	deffec04 	addi	sp,sp,-80
 201460c:	dc000f15 	stw	r16,60(sp)
 2014610:	2821883a 	mov	r16,r5
 2014614:	2940038f 	ldh	r5,14(r5)
 2014618:	dc401015 	stw	r17,64(sp)
 201461c:	dfc01315 	stw	ra,76(sp)
 2014620:	dcc01215 	stw	r19,72(sp)
 2014624:	dc801115 	stw	r18,68(sp)
 2014628:	2023883a 	mov	r17,r4
 201462c:	28001c16 	blt	r5,zero,20146a0 <__smakebuf_r+0xa4>
 2014630:	d80d883a 	mov	r6,sp
 2014634:	20148180 	call	2014818 <_fstat_r>
 2014638:	10001816 	blt	r2,zero,201469c <__smakebuf_r+0xa0>
 201463c:	d8800117 	ldw	r2,4(sp)
 2014640:	00e00014 	movui	r3,32768
 2014644:	10bc000c 	andi	r2,r2,61440
 2014648:	14c80020 	cmpeqi	r19,r2,8192
 201464c:	10c03726 	beq	r2,r3,201472c <__smakebuf_r+0x130>
 2014650:	80c0030b 	ldhu	r3,12(r16)
 2014654:	18c20014 	ori	r3,r3,2048
 2014658:	80c0030d 	sth	r3,12(r16)
 201465c:	00c80004 	movi	r3,8192
 2014660:	10c0521e 	bne	r2,r3,20147ac <__smakebuf_r+0x1b0>
 2014664:	8140038f 	ldh	r5,14(r16)
 2014668:	8809883a 	mov	r4,r17
 201466c:	20148740 	call	2014874 <_isatty_r>
 2014670:	10004c26 	beq	r2,zero,20147a4 <__smakebuf_r+0x1a8>
 2014674:	8080030b 	ldhu	r2,12(r16)
 2014678:	80c010c4 	addi	r3,r16,67
 201467c:	80c00015 	stw	r3,0(r16)
 2014680:	10800054 	ori	r2,r2,1
 2014684:	8080030d 	sth	r2,12(r16)
 2014688:	00800044 	movi	r2,1
 201468c:	80c00415 	stw	r3,16(r16)
 2014690:	80800515 	stw	r2,20(r16)
 2014694:	04810004 	movi	r18,1024
 2014698:	00000706 	br	20146b8 <__smakebuf_r+0xbc>
 201469c:	8080030b 	ldhu	r2,12(r16)
 20146a0:	10c0200c 	andi	r3,r2,128
 20146a4:	18001f1e 	bne	r3,zero,2014724 <__smakebuf_r+0x128>
 20146a8:	04810004 	movi	r18,1024
 20146ac:	10820014 	ori	r2,r2,2048
 20146b0:	8080030d 	sth	r2,12(r16)
 20146b4:	0027883a 	mov	r19,zero
 20146b8:	900b883a 	mov	r5,r18
 20146bc:	8809883a 	mov	r4,r17
 20146c0:	20128040 	call	2012804 <_malloc_r>
 20146c4:	10002c26 	beq	r2,zero,2014778 <__smakebuf_r+0x17c>
 20146c8:	80c0030b 	ldhu	r3,12(r16)
 20146cc:	01008074 	movhi	r4,513
 20146d0:	21078304 	addi	r4,r4,7692
 20146d4:	89000f15 	stw	r4,60(r17)
 20146d8:	18c02014 	ori	r3,r3,128
 20146dc:	80c0030d 	sth	r3,12(r16)
 20146e0:	80800015 	stw	r2,0(r16)
 20146e4:	80800415 	stw	r2,16(r16)
 20146e8:	84800515 	stw	r18,20(r16)
 20146ec:	98001a1e 	bne	r19,zero,2014758 <__smakebuf_r+0x15c>
 20146f0:	dfc01317 	ldw	ra,76(sp)
 20146f4:	dcc01217 	ldw	r19,72(sp)
 20146f8:	dc801117 	ldw	r18,68(sp)
 20146fc:	dc401017 	ldw	r17,64(sp)
 2014700:	dc000f17 	ldw	r16,60(sp)
 2014704:	dec01404 	addi	sp,sp,80
 2014708:	f800283a 	ret
 201470c:	288010c4 	addi	r2,r5,67
 2014710:	28800015 	stw	r2,0(r5)
 2014714:	28800415 	stw	r2,16(r5)
 2014718:	00800044 	movi	r2,1
 201471c:	28800515 	stw	r2,20(r5)
 2014720:	f800283a 	ret
 2014724:	04801004 	movi	r18,64
 2014728:	003fe006 	br	20146ac <_gp+0xffff55ec>
 201472c:	81000a17 	ldw	r4,40(r16)
 2014730:	00c08074 	movhi	r3,513
 2014734:	18ced404 	addi	r3,r3,15184
 2014738:	20ffc51e 	bne	r4,r3,2014650 <_gp+0xffff5590>
 201473c:	8080030b 	ldhu	r2,12(r16)
 2014740:	04810004 	movi	r18,1024
 2014744:	84801315 	stw	r18,76(r16)
 2014748:	1484b03a 	or	r2,r2,r18
 201474c:	8080030d 	sth	r2,12(r16)
 2014750:	0027883a 	mov	r19,zero
 2014754:	003fd806 	br	20146b8 <_gp+0xffff55f8>
 2014758:	8140038f 	ldh	r5,14(r16)
 201475c:	8809883a 	mov	r4,r17
 2014760:	20148740 	call	2014874 <_isatty_r>
 2014764:	103fe226 	beq	r2,zero,20146f0 <_gp+0xffff5630>
 2014768:	8080030b 	ldhu	r2,12(r16)
 201476c:	10800054 	ori	r2,r2,1
 2014770:	8080030d 	sth	r2,12(r16)
 2014774:	003fde06 	br	20146f0 <_gp+0xffff5630>
 2014778:	8080030b 	ldhu	r2,12(r16)
 201477c:	10c0800c 	andi	r3,r2,512
 2014780:	183fdb1e 	bne	r3,zero,20146f0 <_gp+0xffff5630>
 2014784:	10800094 	ori	r2,r2,2
 2014788:	80c010c4 	addi	r3,r16,67
 201478c:	8080030d 	sth	r2,12(r16)
 2014790:	00800044 	movi	r2,1
 2014794:	80c00015 	stw	r3,0(r16)
 2014798:	80c00415 	stw	r3,16(r16)
 201479c:	80800515 	stw	r2,20(r16)
 20147a0:	003fd306 	br	20146f0 <_gp+0xffff5630>
 20147a4:	04810004 	movi	r18,1024
 20147a8:	003fc306 	br	20146b8 <_gp+0xffff55f8>
 20147ac:	0027883a 	mov	r19,zero
 20147b0:	04810004 	movi	r18,1024
 20147b4:	003fc006 	br	20146b8 <_gp+0xffff55f8>

020147b8 <_read_r>:
 20147b8:	defffd04 	addi	sp,sp,-12
 20147bc:	2805883a 	mov	r2,r5
 20147c0:	dc000015 	stw	r16,0(sp)
 20147c4:	04008074 	movhi	r16,513
 20147c8:	dc400115 	stw	r17,4(sp)
 20147cc:	300b883a 	mov	r5,r6
 20147d0:	841ecb04 	addi	r16,r16,31532
 20147d4:	2023883a 	mov	r17,r4
 20147d8:	380d883a 	mov	r6,r7
 20147dc:	1009883a 	mov	r4,r2
 20147e0:	dfc00215 	stw	ra,8(sp)
 20147e4:	80000015 	stw	zero,0(r16)
 20147e8:	2014cfc0 	call	2014cfc <read>
 20147ec:	00ffffc4 	movi	r3,-1
 20147f0:	10c00526 	beq	r2,r3,2014808 <_read_r+0x50>
 20147f4:	dfc00217 	ldw	ra,8(sp)
 20147f8:	dc400117 	ldw	r17,4(sp)
 20147fc:	dc000017 	ldw	r16,0(sp)
 2014800:	dec00304 	addi	sp,sp,12
 2014804:	f800283a 	ret
 2014808:	80c00017 	ldw	r3,0(r16)
 201480c:	183ff926 	beq	r3,zero,20147f4 <_gp+0xffff5734>
 2014810:	88c00015 	stw	r3,0(r17)
 2014814:	003ff706 	br	20147f4 <_gp+0xffff5734>

02014818 <_fstat_r>:
 2014818:	defffd04 	addi	sp,sp,-12
 201481c:	2805883a 	mov	r2,r5
 2014820:	dc000015 	stw	r16,0(sp)
 2014824:	04008074 	movhi	r16,513
 2014828:	dc400115 	stw	r17,4(sp)
 201482c:	841ecb04 	addi	r16,r16,31532
 2014830:	2023883a 	mov	r17,r4
 2014834:	300b883a 	mov	r5,r6
 2014838:	1009883a 	mov	r4,r2
 201483c:	dfc00215 	stw	ra,8(sp)
 2014840:	80000015 	stw	zero,0(r16)
 2014844:	20149900 	call	2014990 <fstat>
 2014848:	00ffffc4 	movi	r3,-1
 201484c:	10c00526 	beq	r2,r3,2014864 <_fstat_r+0x4c>
 2014850:	dfc00217 	ldw	ra,8(sp)
 2014854:	dc400117 	ldw	r17,4(sp)
 2014858:	dc000017 	ldw	r16,0(sp)
 201485c:	dec00304 	addi	sp,sp,12
 2014860:	f800283a 	ret
 2014864:	80c00017 	ldw	r3,0(r16)
 2014868:	183ff926 	beq	r3,zero,2014850 <_gp+0xffff5790>
 201486c:	88c00015 	stw	r3,0(r17)
 2014870:	003ff706 	br	2014850 <_gp+0xffff5790>

02014874 <_isatty_r>:
 2014874:	defffd04 	addi	sp,sp,-12
 2014878:	dc000015 	stw	r16,0(sp)
 201487c:	04008074 	movhi	r16,513
 2014880:	dc400115 	stw	r17,4(sp)
 2014884:	841ecb04 	addi	r16,r16,31532
 2014888:	2023883a 	mov	r17,r4
 201488c:	2809883a 	mov	r4,r5
 2014890:	dfc00215 	stw	ra,8(sp)
 2014894:	80000015 	stw	zero,0(r16)
 2014898:	2014a640 	call	2014a64 <isatty>
 201489c:	00ffffc4 	movi	r3,-1
 20148a0:	10c00526 	beq	r2,r3,20148b8 <_isatty_r+0x44>
 20148a4:	dfc00217 	ldw	ra,8(sp)
 20148a8:	dc400117 	ldw	r17,4(sp)
 20148ac:	dc000017 	ldw	r16,0(sp)
 20148b0:	dec00304 	addi	sp,sp,12
 20148b4:	f800283a 	ret
 20148b8:	80c00017 	ldw	r3,0(r16)
 20148bc:	183ff926 	beq	r3,zero,20148a4 <_gp+0xffff57e4>
 20148c0:	88c00015 	stw	r3,0(r17)
 20148c4:	003ff706 	br	20148a4 <_gp+0xffff57e4>

020148c8 <close>:
 20148c8:	defffd04 	addi	sp,sp,-12
 20148cc:	dfc00215 	stw	ra,8(sp)
 20148d0:	dc400115 	stw	r17,4(sp)
 20148d4:	dc000015 	stw	r16,0(sp)
 20148d8:	20002016 	blt	r4,zero,201495c <close+0x94>
 20148dc:	01400304 	movi	r5,12
 20148e0:	2021883a 	mov	r16,r4
 20148e4:	2011c700 	call	2011c70 <__mulsi3>
 20148e8:	01008074 	movhi	r4,513
 20148ec:	211bbb04 	addi	r4,r4,28396
 20148f0:	2089883a 	add	r4,r4,r2
 20148f4:	20001926 	beq	r4,zero,201495c <close+0x94>
 20148f8:	20800017 	ldw	r2,0(r4)
 20148fc:	10800417 	ldw	r2,16(r2)
 2014900:	10000b26 	beq	r2,zero,2014930 <close+0x68>
 2014904:	103ee83a 	callr	r2
 2014908:	8009883a 	mov	r4,r16
 201490c:	1023883a 	mov	r17,r2
 2014910:	2014e100 	call	2014e10 <alt_release_fd>
 2014914:	0005883a 	mov	r2,zero
 2014918:	88000916 	blt	r17,zero,2014940 <close+0x78>
 201491c:	dfc00217 	ldw	ra,8(sp)
 2014920:	dc400117 	ldw	r17,4(sp)
 2014924:	dc000017 	ldw	r16,0(sp)
 2014928:	dec00304 	addi	sp,sp,12
 201492c:	f800283a 	ret
 2014930:	8009883a 	mov	r4,r16
 2014934:	2014e100 	call	2014e10 <alt_release_fd>
 2014938:	0005883a 	mov	r2,zero
 201493c:	003ff706 	br	201491c <_gp+0xffff585c>
 2014940:	d0a00a17 	ldw	r2,-32728(gp)
 2014944:	10000c26 	beq	r2,zero,2014978 <close+0xb0>
 2014948:	103ee83a 	callr	r2
 201494c:	0463c83a 	sub	r17,zero,r17
 2014950:	14400015 	stw	r17,0(r2)
 2014954:	00bfffc4 	movi	r2,-1
 2014958:	003ff006 	br	201491c <_gp+0xffff585c>
 201495c:	d0a00a17 	ldw	r2,-32728(gp)
 2014960:	10000726 	beq	r2,zero,2014980 <close+0xb8>
 2014964:	103ee83a 	callr	r2
 2014968:	00c01444 	movi	r3,81
 201496c:	10c00015 	stw	r3,0(r2)
 2014970:	00bfffc4 	movi	r2,-1
 2014974:	003fe906 	br	201491c <_gp+0xffff585c>
 2014978:	d0a29b04 	addi	r2,gp,-30100
 201497c:	003ff306 	br	201494c <_gp+0xffff588c>
 2014980:	d0a29b04 	addi	r2,gp,-30100
 2014984:	003ff806 	br	2014968 <_gp+0xffff58a8>

02014988 <alt_dev_null_write>:
 2014988:	3005883a 	mov	r2,r6
 201498c:	f800283a 	ret

02014990 <fstat>:
 2014990:	defffb04 	addi	sp,sp,-20
 2014994:	dfc00415 	stw	ra,16(sp)
 2014998:	dcc00315 	stw	r19,12(sp)
 201499c:	dc800215 	stw	r18,8(sp)
 20149a0:	dc400115 	stw	r17,4(sp)
 20149a4:	dc000015 	stw	r16,0(sp)
 20149a8:	20002216 	blt	r4,zero,2014a34 <fstat+0xa4>
 20149ac:	2827883a 	mov	r19,r5
 20149b0:	04008074 	movhi	r16,513
 20149b4:	01400304 	movi	r5,12
 20149b8:	2023883a 	mov	r17,r4
 20149bc:	841bbb04 	addi	r16,r16,28396
 20149c0:	2011c700 	call	2011c70 <__mulsi3>
 20149c4:	80a5883a 	add	r18,r16,r2
 20149c8:	90001a26 	beq	r18,zero,2014a34 <fstat+0xa4>
 20149cc:	01400304 	movi	r5,12
 20149d0:	8809883a 	mov	r4,r17
 20149d4:	2011c700 	call	2011c70 <__mulsi3>
 20149d8:	8085883a 	add	r2,r16,r2
 20149dc:	10800017 	ldw	r2,0(r2)
 20149e0:	10800817 	ldw	r2,32(r2)
 20149e4:	10000926 	beq	r2,zero,2014a0c <fstat+0x7c>
 20149e8:	980b883a 	mov	r5,r19
 20149ec:	9009883a 	mov	r4,r18
 20149f0:	dfc00417 	ldw	ra,16(sp)
 20149f4:	dcc00317 	ldw	r19,12(sp)
 20149f8:	dc800217 	ldw	r18,8(sp)
 20149fc:	dc400117 	ldw	r17,4(sp)
 2014a00:	dc000017 	ldw	r16,0(sp)
 2014a04:	dec00504 	addi	sp,sp,20
 2014a08:	1000683a 	jmp	r2
 2014a0c:	00880004 	movi	r2,8192
 2014a10:	98800115 	stw	r2,4(r19)
 2014a14:	0005883a 	mov	r2,zero
 2014a18:	dfc00417 	ldw	ra,16(sp)
 2014a1c:	dcc00317 	ldw	r19,12(sp)
 2014a20:	dc800217 	ldw	r18,8(sp)
 2014a24:	dc400117 	ldw	r17,4(sp)
 2014a28:	dc000017 	ldw	r16,0(sp)
 2014a2c:	dec00504 	addi	sp,sp,20
 2014a30:	f800283a 	ret
 2014a34:	d0a00a17 	ldw	r2,-32728(gp)
 2014a38:	10000526 	beq	r2,zero,2014a50 <fstat+0xc0>
 2014a3c:	103ee83a 	callr	r2
 2014a40:	00c01444 	movi	r3,81
 2014a44:	10c00015 	stw	r3,0(r2)
 2014a48:	00bfffc4 	movi	r2,-1
 2014a4c:	003ff206 	br	2014a18 <_gp+0xffff5958>
 2014a50:	d0a29b04 	addi	r2,gp,-30100
 2014a54:	003ffa06 	br	2014a40 <_gp+0xffff5980>

02014a58 <alt_getchar>:
 2014a58:	d0a00217 	ldw	r2,-32760(gp)
 2014a5c:	11000117 	ldw	r4,4(r2)
 2014a60:	20156fc1 	jmpi	20156fc <getc>

02014a64 <isatty>:
 2014a64:	deffef04 	addi	sp,sp,-68
 2014a68:	dfc01015 	stw	ra,64(sp)
 2014a6c:	dc000f15 	stw	r16,60(sp)
 2014a70:	20001816 	blt	r4,zero,2014ad4 <isatty+0x70>
 2014a74:	01400304 	movi	r5,12
 2014a78:	2021883a 	mov	r16,r4
 2014a7c:	2011c700 	call	2011c70 <__mulsi3>
 2014a80:	00c08074 	movhi	r3,513
 2014a84:	18dbbb04 	addi	r3,r3,28396
 2014a88:	1885883a 	add	r2,r3,r2
 2014a8c:	10001126 	beq	r2,zero,2014ad4 <isatty+0x70>
 2014a90:	10800017 	ldw	r2,0(r2)
 2014a94:	10800817 	ldw	r2,32(r2)
 2014a98:	10000926 	beq	r2,zero,2014ac0 <isatty+0x5c>
 2014a9c:	d80b883a 	mov	r5,sp
 2014aa0:	8009883a 	mov	r4,r16
 2014aa4:	20149900 	call	2014990 <fstat>
 2014aa8:	d8800117 	ldw	r2,4(sp)
 2014aac:	10880020 	cmpeqi	r2,r2,8192
 2014ab0:	dfc01017 	ldw	ra,64(sp)
 2014ab4:	dc000f17 	ldw	r16,60(sp)
 2014ab8:	dec01104 	addi	sp,sp,68
 2014abc:	f800283a 	ret
 2014ac0:	00800044 	movi	r2,1
 2014ac4:	dfc01017 	ldw	ra,64(sp)
 2014ac8:	dc000f17 	ldw	r16,60(sp)
 2014acc:	dec01104 	addi	sp,sp,68
 2014ad0:	f800283a 	ret
 2014ad4:	d0a00a17 	ldw	r2,-32728(gp)
 2014ad8:	10000826 	beq	r2,zero,2014afc <isatty+0x98>
 2014adc:	103ee83a 	callr	r2
 2014ae0:	00c01444 	movi	r3,81
 2014ae4:	10c00015 	stw	r3,0(r2)
 2014ae8:	0005883a 	mov	r2,zero
 2014aec:	dfc01017 	ldw	ra,64(sp)
 2014af0:	dc000f17 	ldw	r16,60(sp)
 2014af4:	dec01104 	addi	sp,sp,68
 2014af8:	f800283a 	ret
 2014afc:	d0a29b04 	addi	r2,gp,-30100
 2014b00:	003ff706 	br	2014ae0 <_gp+0xffff5a20>

02014b04 <alt_load>:
 2014b04:	deffff04 	addi	sp,sp,-4
 2014b08:	01008074 	movhi	r4,513
 2014b0c:	01408074 	movhi	r5,513
 2014b10:	dfc00015 	stw	ra,0(sp)
 2014b14:	2119b004 	addi	r4,r4,26304
 2014b18:	295c3c04 	addi	r5,r5,28912
 2014b1c:	21400a26 	beq	r4,r5,2014b48 <alt_load+0x44>
 2014b20:	00808074 	movhi	r2,513
 2014b24:	109c3c04 	addi	r2,r2,28912
 2014b28:	20800726 	beq	r4,r2,2014b48 <alt_load+0x44>
 2014b2c:	21800104 	addi	r6,r4,4
 2014b30:	118dc83a 	sub	r6,r2,r6
 2014b34:	300cd0ba 	srli	r6,r6,2
 2014b38:	31800044 	addi	r6,r6,1
 2014b3c:	318d883a 	add	r6,r6,r6
 2014b40:	318d883a 	add	r6,r6,r6
 2014b44:	20130f40 	call	20130f4 <memcpy>
 2014b48:	01008074 	movhi	r4,513
 2014b4c:	01408074 	movhi	r5,513
 2014b50:	21000804 	addi	r4,r4,32
 2014b54:	29400804 	addi	r5,r5,32
 2014b58:	21400a26 	beq	r4,r5,2014b84 <alt_load+0x80>
 2014b5c:	00808074 	movhi	r2,513
 2014b60:	10800804 	addi	r2,r2,32
 2014b64:	20800726 	beq	r4,r2,2014b84 <alt_load+0x80>
 2014b68:	21800104 	addi	r6,r4,4
 2014b6c:	118dc83a 	sub	r6,r2,r6
 2014b70:	300cd0ba 	srli	r6,r6,2
 2014b74:	31800044 	addi	r6,r6,1
 2014b78:	318d883a 	add	r6,r6,r6
 2014b7c:	318d883a 	add	r6,r6,r6
 2014b80:	20130f40 	call	20130f4 <memcpy>
 2014b84:	01008074 	movhi	r4,513
 2014b88:	01408074 	movhi	r5,513
 2014b8c:	2117b304 	addi	r4,r4,24268
 2014b90:	2957b304 	addi	r5,r5,24268
 2014b94:	21400a26 	beq	r4,r5,2014bc0 <alt_load+0xbc>
 2014b98:	00808074 	movhi	r2,513
 2014b9c:	1099b004 	addi	r2,r2,26304
 2014ba0:	20800726 	beq	r4,r2,2014bc0 <alt_load+0xbc>
 2014ba4:	21800104 	addi	r6,r4,4
 2014ba8:	118dc83a 	sub	r6,r2,r6
 2014bac:	300cd0ba 	srli	r6,r6,2
 2014bb0:	31800044 	addi	r6,r6,1
 2014bb4:	318d883a 	add	r6,r6,r6
 2014bb8:	318d883a 	add	r6,r6,r6
 2014bbc:	20130f40 	call	20130f4 <memcpy>
 2014bc0:	20151640 	call	2015164 <alt_dcache_flush_all>
 2014bc4:	dfc00017 	ldw	ra,0(sp)
 2014bc8:	dec00104 	addi	sp,sp,4
 2014bcc:	20151d41 	jmpi	20151d4 <alt_icache_flush_all>

02014bd0 <lseek>:
 2014bd0:	defffa04 	addi	sp,sp,-24
 2014bd4:	dfc00515 	stw	ra,20(sp)
 2014bd8:	dd000415 	stw	r20,16(sp)
 2014bdc:	dcc00315 	stw	r19,12(sp)
 2014be0:	dc800215 	stw	r18,8(sp)
 2014be4:	dc400115 	stw	r17,4(sp)
 2014be8:	dc000015 	stw	r16,0(sp)
 2014bec:	20001d16 	blt	r4,zero,2014c64 <lseek+0x94>
 2014bf0:	2827883a 	mov	r19,r5
 2014bf4:	04008074 	movhi	r16,513
 2014bf8:	01400304 	movi	r5,12
 2014bfc:	2023883a 	mov	r17,r4
 2014c00:	3029883a 	mov	r20,r6
 2014c04:	841bbb04 	addi	r16,r16,28396
 2014c08:	2011c700 	call	2011c70 <__mulsi3>
 2014c0c:	80a5883a 	add	r18,r16,r2
 2014c10:	90001426 	beq	r18,zero,2014c64 <lseek+0x94>
 2014c14:	01400304 	movi	r5,12
 2014c18:	8809883a 	mov	r4,r17
 2014c1c:	2011c700 	call	2011c70 <__mulsi3>
 2014c20:	8085883a 	add	r2,r16,r2
 2014c24:	10800017 	ldw	r2,0(r2)
 2014c28:	10800717 	ldw	r2,28(r2)
 2014c2c:	10001426 	beq	r2,zero,2014c80 <lseek+0xb0>
 2014c30:	a00d883a 	mov	r6,r20
 2014c34:	980b883a 	mov	r5,r19
 2014c38:	9009883a 	mov	r4,r18
 2014c3c:	103ee83a 	callr	r2
 2014c40:	10001316 	blt	r2,zero,2014c90 <lseek+0xc0>
 2014c44:	dfc00517 	ldw	ra,20(sp)
 2014c48:	dd000417 	ldw	r20,16(sp)
 2014c4c:	dcc00317 	ldw	r19,12(sp)
 2014c50:	dc800217 	ldw	r18,8(sp)
 2014c54:	dc400117 	ldw	r17,4(sp)
 2014c58:	dc000017 	ldw	r16,0(sp)
 2014c5c:	dec00604 	addi	sp,sp,24
 2014c60:	f800283a 	ret
 2014c64:	04001444 	movi	r16,81
 2014c68:	d0a00a17 	ldw	r2,-32728(gp)
 2014c6c:	10000626 	beq	r2,zero,2014c88 <lseek+0xb8>
 2014c70:	103ee83a 	callr	r2
 2014c74:	14000015 	stw	r16,0(r2)
 2014c78:	00bfffc4 	movi	r2,-1
 2014c7c:	003ff106 	br	2014c44 <_gp+0xffff5b84>
 2014c80:	04002184 	movi	r16,134
 2014c84:	003ff806 	br	2014c68 <_gp+0xffff5ba8>
 2014c88:	d0a29b04 	addi	r2,gp,-30100
 2014c8c:	003ff906 	br	2014c74 <_gp+0xffff5bb4>
 2014c90:	00a1c83a 	sub	r16,zero,r2
 2014c94:	003ff406 	br	2014c68 <_gp+0xffff5ba8>

02014c98 <alt_main>:
 2014c98:	defffe04 	addi	sp,sp,-8
 2014c9c:	0009883a 	mov	r4,zero
 2014ca0:	dfc00115 	stw	ra,4(sp)
 2014ca4:	dc000015 	stw	r16,0(sp)
 2014ca8:	2014fcc0 	call	2014fcc <alt_irq_init>
 2014cac:	2014fec0 	call	2014fec <alt_sys_init>
 2014cb0:	01808074 	movhi	r6,513
 2014cb4:	3199ac04 	addi	r6,r6,26288
 2014cb8:	300b883a 	mov	r5,r6
 2014cbc:	3009883a 	mov	r4,r6
 2014cc0:	20151d80 	call	20151d8 <alt_io_redirect>
 2014cc4:	d1a29c17 	ldw	r6,-30096(gp)
 2014cc8:	d1629d17 	ldw	r5,-30092(gp)
 2014ccc:	d1229e17 	ldw	r4,-30088(gp)
 2014cd0:	20111000 	call	2011100 <main>
 2014cd4:	01000044 	movi	r4,1
 2014cd8:	1021883a 	mov	r16,r2
 2014cdc:	20148c80 	call	20148c8 <close>
 2014ce0:	8009883a 	mov	r4,r16
 2014ce4:	20156540 	call	2015654 <exit>

02014ce8 <__malloc_lock>:
 2014ce8:	f800283a 	ret

02014cec <__malloc_unlock>:
 2014cec:	f800283a 	ret

02014cf0 <alt_putchar>:
 2014cf0:	d0a00217 	ldw	r2,-32760(gp)
 2014cf4:	11400217 	ldw	r5,8(r2)
 2014cf8:	20158a01 	jmpi	20158a0 <putc>

02014cfc <read>:
 2014cfc:	defffa04 	addi	sp,sp,-24
 2014d00:	dfc00515 	stw	ra,20(sp)
 2014d04:	dd000415 	stw	r20,16(sp)
 2014d08:	dcc00315 	stw	r19,12(sp)
 2014d0c:	dc800215 	stw	r18,8(sp)
 2014d10:	dc400115 	stw	r17,4(sp)
 2014d14:	dc000015 	stw	r16,0(sp)
 2014d18:	20003016 	blt	r4,zero,2014ddc <read+0xe0>
 2014d1c:	2827883a 	mov	r19,r5
 2014d20:	04008074 	movhi	r16,513
 2014d24:	01400304 	movi	r5,12
 2014d28:	2025883a 	mov	r18,r4
 2014d2c:	3029883a 	mov	r20,r6
 2014d30:	841bbb04 	addi	r16,r16,28396
 2014d34:	2011c700 	call	2011c70 <__mulsi3>
 2014d38:	80a3883a 	add	r17,r16,r2
 2014d3c:	88002726 	beq	r17,zero,2014ddc <read+0xe0>
 2014d40:	88800217 	ldw	r2,8(r17)
 2014d44:	00c00044 	movi	r3,1
 2014d48:	108000cc 	andi	r2,r2,3
 2014d4c:	10c01526 	beq	r2,r3,2014da4 <read+0xa8>
 2014d50:	01400304 	movi	r5,12
 2014d54:	9009883a 	mov	r4,r18
 2014d58:	2011c700 	call	2011c70 <__mulsi3>
 2014d5c:	8085883a 	add	r2,r16,r2
 2014d60:	10800017 	ldw	r2,0(r2)
 2014d64:	10800517 	ldw	r2,20(r2)
 2014d68:	10000e26 	beq	r2,zero,2014da4 <read+0xa8>
 2014d6c:	a00d883a 	mov	r6,r20
 2014d70:	980b883a 	mov	r5,r19
 2014d74:	8809883a 	mov	r4,r17
 2014d78:	103ee83a 	callr	r2
 2014d7c:	1021883a 	mov	r16,r2
 2014d80:	10000f16 	blt	r2,zero,2014dc0 <read+0xc4>
 2014d84:	dfc00517 	ldw	ra,20(sp)
 2014d88:	dd000417 	ldw	r20,16(sp)
 2014d8c:	dcc00317 	ldw	r19,12(sp)
 2014d90:	dc800217 	ldw	r18,8(sp)
 2014d94:	dc400117 	ldw	r17,4(sp)
 2014d98:	dc000017 	ldw	r16,0(sp)
 2014d9c:	dec00604 	addi	sp,sp,24
 2014da0:	f800283a 	ret
 2014da4:	d0a00a17 	ldw	r2,-32728(gp)
 2014da8:	10001326 	beq	r2,zero,2014df8 <read+0xfc>
 2014dac:	103ee83a 	callr	r2
 2014db0:	00c00344 	movi	r3,13
 2014db4:	10c00015 	stw	r3,0(r2)
 2014db8:	00bfffc4 	movi	r2,-1
 2014dbc:	003ff106 	br	2014d84 <_gp+0xffff5cc4>
 2014dc0:	d0a00a17 	ldw	r2,-32728(gp)
 2014dc4:	10000e26 	beq	r2,zero,2014e00 <read+0x104>
 2014dc8:	103ee83a 	callr	r2
 2014dcc:	0421c83a 	sub	r16,zero,r16
 2014dd0:	14000015 	stw	r16,0(r2)
 2014dd4:	00bfffc4 	movi	r2,-1
 2014dd8:	003fea06 	br	2014d84 <_gp+0xffff5cc4>
 2014ddc:	d0a00a17 	ldw	r2,-32728(gp)
 2014de0:	10000926 	beq	r2,zero,2014e08 <read+0x10c>
 2014de4:	103ee83a 	callr	r2
 2014de8:	00c01444 	movi	r3,81
 2014dec:	10c00015 	stw	r3,0(r2)
 2014df0:	00bfffc4 	movi	r2,-1
 2014df4:	003fe306 	br	2014d84 <_gp+0xffff5cc4>
 2014df8:	d0a29b04 	addi	r2,gp,-30100
 2014dfc:	003fec06 	br	2014db0 <_gp+0xffff5cf0>
 2014e00:	d0a29b04 	addi	r2,gp,-30100
 2014e04:	003ff106 	br	2014dcc <_gp+0xffff5d0c>
 2014e08:	d0a29b04 	addi	r2,gp,-30100
 2014e0c:	003ff606 	br	2014de8 <_gp+0xffff5d28>

02014e10 <alt_release_fd>:
 2014e10:	00c00084 	movi	r3,2
 2014e14:	1900140e 	bge	r3,r4,2014e68 <alt_release_fd+0x58>
 2014e18:	defffd04 	addi	sp,sp,-12
 2014e1c:	dc400115 	stw	r17,4(sp)
 2014e20:	01400304 	movi	r5,12
 2014e24:	04408074 	movhi	r17,513
 2014e28:	dfc00215 	stw	ra,8(sp)
 2014e2c:	dc000015 	stw	r16,0(sp)
 2014e30:	8c5bbb04 	addi	r17,r17,28396
 2014e34:	2021883a 	mov	r16,r4
 2014e38:	2011c700 	call	2011c70 <__mulsi3>
 2014e3c:	8885883a 	add	r2,r17,r2
 2014e40:	01400304 	movi	r5,12
 2014e44:	8009883a 	mov	r4,r16
 2014e48:	10000215 	stw	zero,8(r2)
 2014e4c:	2011c700 	call	2011c70 <__mulsi3>
 2014e50:	8885883a 	add	r2,r17,r2
 2014e54:	10000015 	stw	zero,0(r2)
 2014e58:	dfc00217 	ldw	ra,8(sp)
 2014e5c:	dc400117 	ldw	r17,4(sp)
 2014e60:	dc000017 	ldw	r16,0(sp)
 2014e64:	dec00304 	addi	sp,sp,12
 2014e68:	f800283a 	ret

02014e6c <sbrk>:
 2014e6c:	000b303a 	rdctl	r5,status
 2014e70:	00bfff84 	movi	r2,-2
 2014e74:	2884703a 	and	r2,r5,r2
 2014e78:	1001703a 	wrctl	status,r2
 2014e7c:	d0a00b17 	ldw	r2,-32724(gp)
 2014e80:	00ffff04 	movi	r3,-4
 2014e84:	108000c4 	addi	r2,r2,3
 2014e88:	10c4703a 	and	r2,r2,r3
 2014e8c:	00c080b4 	movhi	r3,514
 2014e90:	d0a00b15 	stw	r2,-32724(gp)
 2014e94:	1109883a 	add	r4,r2,r4
 2014e98:	18e80004 	addi	r3,r3,-24576
 2014e9c:	19000336 	bltu	r3,r4,2014eac <sbrk+0x40>
 2014ea0:	d1200b15 	stw	r4,-32724(gp)
 2014ea4:	2801703a 	wrctl	status,r5
 2014ea8:	f800283a 	ret
 2014eac:	2801703a 	wrctl	status,r5
 2014eb0:	00bfffc4 	movi	r2,-1
 2014eb4:	f800283a 	ret

02014eb8 <usleep>:
 2014eb8:	20150dc1 	jmpi	20150dc <alt_busy_sleep>

02014ebc <write>:
 2014ebc:	defffa04 	addi	sp,sp,-24
 2014ec0:	dfc00515 	stw	ra,20(sp)
 2014ec4:	dd000415 	stw	r20,16(sp)
 2014ec8:	dcc00315 	stw	r19,12(sp)
 2014ecc:	dc800215 	stw	r18,8(sp)
 2014ed0:	dc400115 	stw	r17,4(sp)
 2014ed4:	dc000015 	stw	r16,0(sp)
 2014ed8:	20003116 	blt	r4,zero,2014fa0 <write+0xe4>
 2014edc:	2827883a 	mov	r19,r5
 2014ee0:	04008074 	movhi	r16,513
 2014ee4:	01400304 	movi	r5,12
 2014ee8:	2025883a 	mov	r18,r4
 2014eec:	3029883a 	mov	r20,r6
 2014ef0:	841bbb04 	addi	r16,r16,28396
 2014ef4:	2011c700 	call	2011c70 <__mulsi3>
 2014ef8:	80a3883a 	add	r17,r16,r2
 2014efc:	88002826 	beq	r17,zero,2014fa0 <write+0xe4>
 2014f00:	88800217 	ldw	r2,8(r17)
 2014f04:	108000cc 	andi	r2,r2,3
 2014f08:	10001526 	beq	r2,zero,2014f60 <write+0xa4>
 2014f0c:	01400304 	movi	r5,12
 2014f10:	9009883a 	mov	r4,r18
 2014f14:	2011c700 	call	2011c70 <__mulsi3>
 2014f18:	8085883a 	add	r2,r16,r2
 2014f1c:	10800017 	ldw	r2,0(r2)
 2014f20:	10800617 	ldw	r2,24(r2)
 2014f24:	10000e26 	beq	r2,zero,2014f60 <write+0xa4>
 2014f28:	a00d883a 	mov	r6,r20
 2014f2c:	980b883a 	mov	r5,r19
 2014f30:	8809883a 	mov	r4,r17
 2014f34:	103ee83a 	callr	r2
 2014f38:	1021883a 	mov	r16,r2
 2014f3c:	10001116 	blt	r2,zero,2014f84 <write+0xc8>
 2014f40:	dfc00517 	ldw	ra,20(sp)
 2014f44:	dd000417 	ldw	r20,16(sp)
 2014f48:	dcc00317 	ldw	r19,12(sp)
 2014f4c:	dc800217 	ldw	r18,8(sp)
 2014f50:	dc400117 	ldw	r17,4(sp)
 2014f54:	dc000017 	ldw	r16,0(sp)
 2014f58:	dec00604 	addi	sp,sp,24
 2014f5c:	f800283a 	ret
 2014f60:	d0a00a17 	ldw	r2,-32728(gp)
 2014f64:	10000526 	beq	r2,zero,2014f7c <write+0xc0>
 2014f68:	103ee83a 	callr	r2
 2014f6c:	00c00344 	movi	r3,13
 2014f70:	10c00015 	stw	r3,0(r2)
 2014f74:	00bfffc4 	movi	r2,-1
 2014f78:	003ff106 	br	2014f40 <_gp+0xffff5e80>
 2014f7c:	d0a29b04 	addi	r2,gp,-30100
 2014f80:	003ffa06 	br	2014f6c <_gp+0xffff5eac>
 2014f84:	d0a00a17 	ldw	r2,-32728(gp)
 2014f88:	10000c26 	beq	r2,zero,2014fbc <write+0x100>
 2014f8c:	103ee83a 	callr	r2
 2014f90:	0421c83a 	sub	r16,zero,r16
 2014f94:	14000015 	stw	r16,0(r2)
 2014f98:	00bfffc4 	movi	r2,-1
 2014f9c:	003fe806 	br	2014f40 <_gp+0xffff5e80>
 2014fa0:	d0a00a17 	ldw	r2,-32728(gp)
 2014fa4:	10000726 	beq	r2,zero,2014fc4 <write+0x108>
 2014fa8:	103ee83a 	callr	r2
 2014fac:	00c01444 	movi	r3,81
 2014fb0:	10c00015 	stw	r3,0(r2)
 2014fb4:	00bfffc4 	movi	r2,-1
 2014fb8:	003fe106 	br	2014f40 <_gp+0xffff5e80>
 2014fbc:	d0a29b04 	addi	r2,gp,-30100
 2014fc0:	003ff306 	br	2014f90 <_gp+0xffff5ed0>
 2014fc4:	d0a29b04 	addi	r2,gp,-30100
 2014fc8:	003ff806 	br	2014fac <_gp+0xffff5eec>

02014fcc <alt_irq_init>:
 2014fcc:	deffff04 	addi	sp,sp,-4
 2014fd0:	dfc00015 	stw	ra,0(sp)
 2014fd4:	20154a00 	call	20154a0 <altera_nios2_gen2_irq_init>
 2014fd8:	00800044 	movi	r2,1
 2014fdc:	1001703a 	wrctl	status,r2
 2014fe0:	dfc00017 	ldw	ra,0(sp)
 2014fe4:	dec00104 	addi	sp,sp,4
 2014fe8:	f800283a 	ret

02014fec <alt_sys_init>:
 2014fec:	01008074 	movhi	r4,513
 2014ff0:	211c2504 	addi	r4,r4,28820
 2014ff4:	d1600604 	addi	r5,gp,-32744
 2014ff8:	20151681 	jmpi	2015168 <alt_dev_llist_insert>

02014ffc <altera_avalon_jtag_uart_read_fd>:
 2014ffc:	20800017 	ldw	r2,0(r4)
 2015000:	21c00217 	ldw	r7,8(r4)
 2015004:	11000a04 	addi	r4,r2,40
 2015008:	201501c1 	jmpi	201501c <altera_avalon_jtag_uart_read>

0201500c <altera_avalon_jtag_uart_write_fd>:
 201500c:	20800017 	ldw	r2,0(r4)
 2015010:	21c00217 	ldw	r7,8(r4)
 2015014:	11000a04 	addi	r4,r2,40
 2015018:	20150a81 	jmpi	20150a8 <altera_avalon_jtag_uart_write>

0201501c <altera_avalon_jtag_uart_read>:
 201501c:	298d883a 	add	r6,r5,r6
 2015020:	22000017 	ldw	r8,0(r4)
 2015024:	39d0000c 	andi	r7,r7,16384
 2015028:	29801d2e 	bgeu	r5,r6,20150a0 <altera_avalon_jtag_uart_read+0x84>
 201502c:	2807883a 	mov	r3,r5
 2015030:	38000c1e 	bne	r7,zero,2015064 <altera_avalon_jtag_uart_read+0x48>
 2015034:	41000037 	ldwio	r4,0(r8)
 2015038:	21e0000c 	andi	r7,r4,32768
 201503c:	18800044 	addi	r2,r3,1
 2015040:	3800041e 	bne	r7,zero,2015054 <altera_avalon_jtag_uart_read+0x38>
 2015044:	28fffb26 	beq	r5,r3,2015034 <_gp+0xffff5f74>
 2015048:	1805883a 	mov	r2,r3
 201504c:	1145c83a 	sub	r2,r2,r5
 2015050:	f800283a 	ret
 2015054:	19000005 	stb	r4,0(r3)
 2015058:	11800b2e 	bgeu	r2,r6,2015088 <altera_avalon_jtag_uart_read+0x6c>
 201505c:	1007883a 	mov	r3,r2
 2015060:	003ff406 	br	2015034 <_gp+0xffff5f74>
 2015064:	41000037 	ldwio	r4,0(r8)
 2015068:	21e0000c 	andi	r7,r4,32768
 201506c:	18800044 	addi	r2,r3,1
 2015070:	38000826 	beq	r7,zero,2015094 <altera_avalon_jtag_uart_read+0x78>
 2015074:	19000005 	stb	r4,0(r3)
 2015078:	1007883a 	mov	r3,r2
 201507c:	11bff91e 	bne	r2,r6,2015064 <_gp+0xffff5fa4>
 2015080:	29bff21e 	bne	r5,r6,201504c <_gp+0xffff5f8c>
 2015084:	00000406 	br	2015098 <altera_avalon_jtag_uart_read+0x7c>
 2015088:	28bff01e 	bne	r5,r2,201504c <_gp+0xffff5f8c>
 201508c:	00bffec4 	movi	r2,-5
 2015090:	f800283a 	ret
 2015094:	28ffec1e 	bne	r5,r3,2015048 <_gp+0xffff5f88>
 2015098:	00bffd44 	movi	r2,-11
 201509c:	f800283a 	ret
 20150a0:	383ffa26 	beq	r7,zero,201508c <_gp+0xffff5fcc>
 20150a4:	003ffc06 	br	2015098 <_gp+0xffff5fd8>

020150a8 <altera_avalon_jtag_uart_write>:
 20150a8:	21c00017 	ldw	r7,0(r4)
 20150ac:	3005883a 	mov	r2,r6
 20150b0:	298d883a 	add	r6,r5,r6
 20150b4:	39000104 	addi	r4,r7,4
 20150b8:	2980072e 	bgeu	r5,r6,20150d8 <altera_avalon_jtag_uart_write+0x30>
 20150bc:	20c00037 	ldwio	r3,0(r4)
 20150c0:	18ffffec 	andhi	r3,r3,65535
 20150c4:	183ffd26 	beq	r3,zero,20150bc <_gp+0xffff5ffc>
 20150c8:	28c00007 	ldb	r3,0(r5)
 20150cc:	38c00035 	stwio	r3,0(r7)
 20150d0:	29400044 	addi	r5,r5,1
 20150d4:	003ff806 	br	20150b8 <_gp+0xffff5ff8>
 20150d8:	f800283a 	ret

020150dc <alt_busy_sleep>:
 20150dc:	0142e8f4 	movhi	r5,2979
 20150e0:	defffe04 	addi	sp,sp,-8
 20150e4:	297a2e84 	addi	r5,r5,-5958
 20150e8:	dc000015 	stw	r16,0(sp)
 20150ec:	dfc00115 	stw	ra,4(sp)
 20150f0:	2021883a 	mov	r16,r4
 20150f4:	2011bb40 	call	2011bb4 <__udivsi3>
 20150f8:	10001426 	beq	r2,zero,201514c <alt_busy_sleep+0x70>
 20150fc:	01600034 	movhi	r5,32768
 2015100:	013d1774 	movhi	r4,62557
 2015104:	297fffc4 	addi	r5,r5,-1
 2015108:	2105d184 	addi	r4,r4,5958
 201510c:	0007883a 	mov	r3,zero
 2015110:	297fffc4 	addi	r5,r5,-1
 2015114:	283ffe1e 	bne	r5,zero,2015110 <_gp+0xffff6050>
 2015118:	18c00044 	addi	r3,r3,1
 201511c:	8121883a 	add	r16,r16,r4
 2015120:	18bffb16 	blt	r3,r2,2015110 <_gp+0xffff6050>
 2015124:	014002c4 	movi	r5,11
 2015128:	8009883a 	mov	r4,r16
 201512c:	2011c700 	call	2011c70 <__mulsi3>
 2015130:	10bfffc4 	addi	r2,r2,-1
 2015134:	103ffe1e 	bne	r2,zero,2015130 <_gp+0xffff6070>
 2015138:	0005883a 	mov	r2,zero
 201513c:	dfc00117 	ldw	ra,4(sp)
 2015140:	dc000017 	ldw	r16,0(sp)
 2015144:	dec00204 	addi	sp,sp,8
 2015148:	f800283a 	ret
 201514c:	014002c4 	movi	r5,11
 2015150:	8009883a 	mov	r4,r16
 2015154:	2011c700 	call	2011c70 <__mulsi3>
 2015158:	10bfffc4 	addi	r2,r2,-1
 201515c:	00bffe16 	blt	zero,r2,2015158 <_gp+0xffff6098>
 2015160:	003ff506 	br	2015138 <_gp+0xffff6078>

02015164 <alt_dcache_flush_all>:
 2015164:	f800283a 	ret

02015168 <alt_dev_llist_insert>:
 2015168:	20000a26 	beq	r4,zero,2015194 <alt_dev_llist_insert+0x2c>
 201516c:	20800217 	ldw	r2,8(r4)
 2015170:	10000826 	beq	r2,zero,2015194 <alt_dev_llist_insert+0x2c>
 2015174:	28c00017 	ldw	r3,0(r5)
 2015178:	21400115 	stw	r5,4(r4)
 201517c:	0005883a 	mov	r2,zero
 2015180:	20c00015 	stw	r3,0(r4)
 2015184:	28c00017 	ldw	r3,0(r5)
 2015188:	19000115 	stw	r4,4(r3)
 201518c:	29000015 	stw	r4,0(r5)
 2015190:	f800283a 	ret
 2015194:	d0a00a17 	ldw	r2,-32728(gp)
 2015198:	10000926 	beq	r2,zero,20151c0 <alt_dev_llist_insert+0x58>
 201519c:	deffff04 	addi	sp,sp,-4
 20151a0:	dfc00015 	stw	ra,0(sp)
 20151a4:	103ee83a 	callr	r2
 20151a8:	00c00584 	movi	r3,22
 20151ac:	10c00015 	stw	r3,0(r2)
 20151b0:	00bffa84 	movi	r2,-22
 20151b4:	dfc00017 	ldw	ra,0(sp)
 20151b8:	dec00104 	addi	sp,sp,4
 20151bc:	f800283a 	ret
 20151c0:	d0a29b04 	addi	r2,gp,-30100
 20151c4:	00c00584 	movi	r3,22
 20151c8:	10c00015 	stw	r3,0(r2)
 20151cc:	00bffa84 	movi	r2,-22
 20151d0:	f800283a 	ret

020151d4 <alt_icache_flush_all>:
 20151d4:	f800283a 	ret

020151d8 <alt_io_redirect>:
 20151d8:	defffb04 	addi	sp,sp,-20
 20151dc:	dcc00315 	stw	r19,12(sp)
 20151e0:	dc800215 	stw	r18,8(sp)
 20151e4:	2827883a 	mov	r19,r5
 20151e8:	3025883a 	mov	r18,r6
 20151ec:	01400044 	movi	r5,1
 20151f0:	01807fc4 	movi	r6,511
 20151f4:	dfc00415 	stw	ra,16(sp)
 20151f8:	dc400115 	stw	r17,4(sp)
 20151fc:	dc000015 	stw	r16,0(sp)
 2015200:	20153180 	call	2015318 <open>
 2015204:	10000f16 	blt	r2,zero,2015244 <alt_io_redirect+0x6c>
 2015208:	1009883a 	mov	r4,r2
 201520c:	01400304 	movi	r5,12
 2015210:	04408074 	movhi	r17,513
 2015214:	8c5bbb04 	addi	r17,r17,28396
 2015218:	1021883a 	mov	r16,r2
 201521c:	2011c700 	call	2011c70 <__mulsi3>
 2015220:	8885883a 	add	r2,r17,r2
 2015224:	11400017 	ldw	r5,0(r2)
 2015228:	10c00217 	ldw	r3,8(r2)
 201522c:	8009883a 	mov	r4,r16
 2015230:	89400315 	stw	r5,12(r17)
 2015234:	10800117 	ldw	r2,4(r2)
 2015238:	88c00515 	stw	r3,20(r17)
 201523c:	88800415 	stw	r2,16(r17)
 2015240:	2014e100 	call	2014e10 <alt_release_fd>
 2015244:	01807fc4 	movi	r6,511
 2015248:	000b883a 	mov	r5,zero
 201524c:	9809883a 	mov	r4,r19
 2015250:	20153180 	call	2015318 <open>
 2015254:	1021883a 	mov	r16,r2
 2015258:	10000e16 	blt	r2,zero,2015294 <alt_io_redirect+0xbc>
 201525c:	1009883a 	mov	r4,r2
 2015260:	01400304 	movi	r5,12
 2015264:	04408074 	movhi	r17,513
 2015268:	2011c700 	call	2011c70 <__mulsi3>
 201526c:	8c5bbb04 	addi	r17,r17,28396
 2015270:	8885883a 	add	r2,r17,r2
 2015274:	11400017 	ldw	r5,0(r2)
 2015278:	10c00217 	ldw	r3,8(r2)
 201527c:	8009883a 	mov	r4,r16
 2015280:	89400015 	stw	r5,0(r17)
 2015284:	10800117 	ldw	r2,4(r2)
 2015288:	88c00215 	stw	r3,8(r17)
 201528c:	88800115 	stw	r2,4(r17)
 2015290:	2014e100 	call	2014e10 <alt_release_fd>
 2015294:	01807fc4 	movi	r6,511
 2015298:	01400044 	movi	r5,1
 201529c:	9009883a 	mov	r4,r18
 20152a0:	20153180 	call	2015318 <open>
 20152a4:	1021883a 	mov	r16,r2
 20152a8:	10001416 	blt	r2,zero,20152fc <alt_io_redirect+0x124>
 20152ac:	1009883a 	mov	r4,r2
 20152b0:	01400304 	movi	r5,12
 20152b4:	04408074 	movhi	r17,513
 20152b8:	2011c700 	call	2011c70 <__mulsi3>
 20152bc:	8c5bbb04 	addi	r17,r17,28396
 20152c0:	8885883a 	add	r2,r17,r2
 20152c4:	11400017 	ldw	r5,0(r2)
 20152c8:	10c00217 	ldw	r3,8(r2)
 20152cc:	8009883a 	mov	r4,r16
 20152d0:	89400615 	stw	r5,24(r17)
 20152d4:	10800117 	ldw	r2,4(r2)
 20152d8:	88c00815 	stw	r3,32(r17)
 20152dc:	88800715 	stw	r2,28(r17)
 20152e0:	dfc00417 	ldw	ra,16(sp)
 20152e4:	dcc00317 	ldw	r19,12(sp)
 20152e8:	dc800217 	ldw	r18,8(sp)
 20152ec:	dc400117 	ldw	r17,4(sp)
 20152f0:	dc000017 	ldw	r16,0(sp)
 20152f4:	dec00504 	addi	sp,sp,20
 20152f8:	2014e101 	jmpi	2014e10 <alt_release_fd>
 20152fc:	dfc00417 	ldw	ra,16(sp)
 2015300:	dcc00317 	ldw	r19,12(sp)
 2015304:	dc800217 	ldw	r18,8(sp)
 2015308:	dc400117 	ldw	r17,4(sp)
 201530c:	dc000017 	ldw	r16,0(sp)
 2015310:	dec00504 	addi	sp,sp,20
 2015314:	f800283a 	ret

02015318 <open>:
 2015318:	defffa04 	addi	sp,sp,-24
 201531c:	dc000015 	stw	r16,0(sp)
 2015320:	2821883a 	mov	r16,r5
 2015324:	d1600604 	addi	r5,gp,-32744
 2015328:	dc800215 	stw	r18,8(sp)
 201532c:	dc400115 	stw	r17,4(sp)
 2015330:	dfc00515 	stw	ra,20(sp)
 2015334:	dd000415 	stw	r20,16(sp)
 2015338:	dcc00315 	stw	r19,12(sp)
 201533c:	2023883a 	mov	r17,r4
 2015340:	3025883a 	mov	r18,r6
 2015344:	20154a80 	call	20154a8 <alt_find_dev>
 2015348:	10004a26 	beq	r2,zero,2015474 <open+0x15c>
 201534c:	1009883a 	mov	r4,r2
 2015350:	1029883a 	mov	r20,r2
 2015354:	20155cc0 	call	20155cc <alt_get_fd>
 2015358:	1027883a 	mov	r19,r2
 201535c:	1000090e 	bge	r2,zero,2015384 <open+0x6c>
 2015360:	04e1c83a 	sub	r16,zero,r19
 2015364:	9809883a 	mov	r4,r19
 2015368:	2014e100 	call	2014e10 <alt_release_fd>
 201536c:	d0a00a17 	ldw	r2,-32728(gp)
 2015370:	10004726 	beq	r2,zero,2015490 <open+0x178>
 2015374:	103ee83a 	callr	r2
 2015378:	14000015 	stw	r16,0(r2)
 201537c:	00bfffc4 	movi	r2,-1
 2015380:	00003206 	br	201544c <open+0x134>
 2015384:	01400304 	movi	r5,12
 2015388:	9809883a 	mov	r4,r19
 201538c:	2011c700 	call	2011c70 <__mulsi3>
 2015390:	01500034 	movhi	r5,16384
 2015394:	00c08074 	movhi	r3,513
 2015398:	297fffc4 	addi	r5,r5,-1
 201539c:	18dbbb04 	addi	r3,r3,28396
 20153a0:	814a703a 	and	r5,r16,r5
 20153a4:	1889883a 	add	r4,r3,r2
 20153a8:	29500034 	orhi	r5,r5,16384
 20153ac:	d2600517 	ldw	r9,-32748(gp)
 20153b0:	22000017 	ldw	r8,0(r4)
 20153b4:	21400215 	stw	r5,8(r4)
 20153b8:	19800204 	addi	r6,r3,8
 20153bc:	000b883a 	mov	r5,zero
 20153c0:	00000306 	br	20153d0 <open+0xb8>
 20153c4:	18c00304 	addi	r3,r3,12
 20153c8:	31800304 	addi	r6,r6,12
 20153cc:	49401636 	bltu	r9,r5,2015428 <open+0x110>
 20153d0:	19c00017 	ldw	r7,0(r3)
 20153d4:	29400044 	addi	r5,r5,1
 20153d8:	3a3ffa1e 	bne	r7,r8,20153c4 <_gp+0xffff6304>
 20153dc:	30800017 	ldw	r2,0(r6)
 20153e0:	103ff80e 	bge	r2,zero,20153c4 <_gp+0xffff6304>
 20153e4:	20fff726 	beq	r4,r3,20153c4 <_gp+0xffff6304>
 20153e8:	04000344 	movi	r16,13
 20153ec:	003fdd06 	br	2015364 <_gp+0xffff62a4>
 20153f0:	1009883a 	mov	r4,r2
 20153f4:	20155cc0 	call	20155cc <alt_get_fd>
 20153f8:	1027883a 	mov	r19,r2
 20153fc:	103fd816 	blt	r2,zero,2015360 <_gp+0xffff62a0>
 2015400:	9809883a 	mov	r4,r19
 2015404:	01400304 	movi	r5,12
 2015408:	2011c700 	call	2011c70 <__mulsi3>
 201540c:	01008074 	movhi	r4,513
 2015410:	211bbb04 	addi	r4,r4,28396
 2015414:	2089883a 	add	r4,r4,r2
 2015418:	00900034 	movhi	r2,16384
 201541c:	10bfffc4 	addi	r2,r2,-1
 2015420:	8084703a 	and	r2,r16,r2
 2015424:	20800215 	stw	r2,8(r4)
 2015428:	a0800317 	ldw	r2,12(r20)
 201542c:	10000f26 	beq	r2,zero,201546c <open+0x154>
 2015430:	900f883a 	mov	r7,r18
 2015434:	800d883a 	mov	r6,r16
 2015438:	880b883a 	mov	r5,r17
 201543c:	103ee83a 	callr	r2
 2015440:	1007883a 	mov	r3,r2
 2015444:	9805883a 	mov	r2,r19
 2015448:	18001316 	blt	r3,zero,2015498 <open+0x180>
 201544c:	dfc00517 	ldw	ra,20(sp)
 2015450:	dd000417 	ldw	r20,16(sp)
 2015454:	dcc00317 	ldw	r19,12(sp)
 2015458:	dc800217 	ldw	r18,8(sp)
 201545c:	dc400117 	ldw	r17,4(sp)
 2015460:	dc000017 	ldw	r16,0(sp)
 2015464:	dec00604 	addi	sp,sp,24
 2015468:	f800283a 	ret
 201546c:	9805883a 	mov	r2,r19
 2015470:	003ff606 	br	201544c <_gp+0xffff638c>
 2015474:	8809883a 	mov	r4,r17
 2015478:	20155200 	call	2015520 <alt_find_file>
 201547c:	1029883a 	mov	r20,r2
 2015480:	103fdb1e 	bne	r2,zero,20153f0 <_gp+0xffff6330>
 2015484:	040004c4 	movi	r16,19
 2015488:	04ffffc4 	movi	r19,-1
 201548c:	003fb506 	br	2015364 <_gp+0xffff62a4>
 2015490:	d0a29b04 	addi	r2,gp,-30100
 2015494:	003fb806 	br	2015378 <_gp+0xffff62b8>
 2015498:	00e1c83a 	sub	r16,zero,r3
 201549c:	003fb106 	br	2015364 <_gp+0xffff62a4>

020154a0 <altera_nios2_gen2_irq_init>:
 20154a0:	000170fa 	wrctl	ienable,zero
 20154a4:	f800283a 	ret

020154a8 <alt_find_dev>:
 20154a8:	defffb04 	addi	sp,sp,-20
 20154ac:	dc000015 	stw	r16,0(sp)
 20154b0:	2c000017 	ldw	r16,0(r5)
 20154b4:	dc400115 	stw	r17,4(sp)
 20154b8:	2823883a 	mov	r17,r5
 20154bc:	dcc00315 	stw	r19,12(sp)
 20154c0:	dfc00415 	stw	ra,16(sp)
 20154c4:	dc800215 	stw	r18,8(sp)
 20154c8:	2027883a 	mov	r19,r4
 20154cc:	2011d6c0 	call	2011d6c <strlen>
 20154d0:	8c000b26 	beq	r17,r16,2015500 <alt_find_dev+0x58>
 20154d4:	14800044 	addi	r18,r2,1
 20154d8:	00000206 	br	20154e4 <alt_find_dev+0x3c>
 20154dc:	84000017 	ldw	r16,0(r16)
 20154e0:	8c000726 	beq	r17,r16,2015500 <alt_find_dev+0x58>
 20154e4:	81000217 	ldw	r4,8(r16)
 20154e8:	900d883a 	mov	r6,r18
 20154ec:	980b883a 	mov	r5,r19
 20154f0:	20157840 	call	2015784 <memcmp>
 20154f4:	103ff91e 	bne	r2,zero,20154dc <_gp+0xffff641c>
 20154f8:	8005883a 	mov	r2,r16
 20154fc:	00000106 	br	2015504 <alt_find_dev+0x5c>
 2015500:	0005883a 	mov	r2,zero
 2015504:	dfc00417 	ldw	ra,16(sp)
 2015508:	dcc00317 	ldw	r19,12(sp)
 201550c:	dc800217 	ldw	r18,8(sp)
 2015510:	dc400117 	ldw	r17,4(sp)
 2015514:	dc000017 	ldw	r16,0(sp)
 2015518:	dec00504 	addi	sp,sp,20
 201551c:	f800283a 	ret

02015520 <alt_find_file>:
 2015520:	defffa04 	addi	sp,sp,-24
 2015524:	dc000015 	stw	r16,0(sp)
 2015528:	d4200817 	ldw	r16,-32736(gp)
 201552c:	dd000415 	stw	r20,16(sp)
 2015530:	dfc00515 	stw	ra,20(sp)
 2015534:	dcc00315 	stw	r19,12(sp)
 2015538:	dc800215 	stw	r18,8(sp)
 201553c:	dc400115 	stw	r17,4(sp)
 2015540:	d5200804 	addi	r20,gp,-32736
 2015544:	85001626 	beq	r16,r20,20155a0 <alt_find_file+0x80>
 2015548:	2025883a 	mov	r18,r4
 201554c:	04c00bc4 	movi	r19,47
 2015550:	00000806 	br	2015574 <alt_find_file+0x54>
 2015554:	9185883a 	add	r2,r18,r6
 2015558:	10800007 	ldb	r2,0(r2)
 201555c:	14c00126 	beq	r2,r19,2015564 <alt_find_file+0x44>
 2015560:	1000021e 	bne	r2,zero,201556c <alt_find_file+0x4c>
 2015564:	20157840 	call	2015784 <memcmp>
 2015568:	10001626 	beq	r2,zero,20155c4 <alt_find_file+0xa4>
 201556c:	84000017 	ldw	r16,0(r16)
 2015570:	85000b26 	beq	r16,r20,20155a0 <alt_find_file+0x80>
 2015574:	84400217 	ldw	r17,8(r16)
 2015578:	8809883a 	mov	r4,r17
 201557c:	2011d6c0 	call	2011d6c <strlen>
 2015580:	100d883a 	mov	r6,r2
 2015584:	8885883a 	add	r2,r17,r2
 2015588:	10bfffc7 	ldb	r2,-1(r2)
 201558c:	900b883a 	mov	r5,r18
 2015590:	8809883a 	mov	r4,r17
 2015594:	14ffef1e 	bne	r2,r19,2015554 <_gp+0xffff6494>
 2015598:	31bfffc4 	addi	r6,r6,-1
 201559c:	003fed06 	br	2015554 <_gp+0xffff6494>
 20155a0:	0005883a 	mov	r2,zero
 20155a4:	dfc00517 	ldw	ra,20(sp)
 20155a8:	dd000417 	ldw	r20,16(sp)
 20155ac:	dcc00317 	ldw	r19,12(sp)
 20155b0:	dc800217 	ldw	r18,8(sp)
 20155b4:	dc400117 	ldw	r17,4(sp)
 20155b8:	dc000017 	ldw	r16,0(sp)
 20155bc:	dec00604 	addi	sp,sp,24
 20155c0:	f800283a 	ret
 20155c4:	8005883a 	mov	r2,r16
 20155c8:	003ff606 	br	20155a4 <_gp+0xffff64e4>

020155cc <alt_get_fd>:
 20155cc:	defffc04 	addi	sp,sp,-16
 20155d0:	dc400115 	stw	r17,4(sp)
 20155d4:	04408074 	movhi	r17,513
 20155d8:	8c5bbb04 	addi	r17,r17,28396
 20155dc:	dc000015 	stw	r16,0(sp)
 20155e0:	dfc00315 	stw	ra,12(sp)
 20155e4:	dc800215 	stw	r18,8(sp)
 20155e8:	0021883a 	mov	r16,zero
 20155ec:	8805883a 	mov	r2,r17
 20155f0:	01400804 	movi	r5,32
 20155f4:	00000206 	br	2015600 <alt_get_fd+0x34>
 20155f8:	84000044 	addi	r16,r16,1
 20155fc:	81401326 	beq	r16,r5,201564c <alt_get_fd+0x80>
 2015600:	10c00017 	ldw	r3,0(r2)
 2015604:	10800304 	addi	r2,r2,12
 2015608:	183ffb1e 	bne	r3,zero,20155f8 <_gp+0xffff6538>
 201560c:	2025883a 	mov	r18,r4
 2015610:	01400304 	movi	r5,12
 2015614:	8009883a 	mov	r4,r16
 2015618:	2011c700 	call	2011c70 <__mulsi3>
 201561c:	8885883a 	add	r2,r17,r2
 2015620:	14800015 	stw	r18,0(r2)
 2015624:	d0a00517 	ldw	r2,-32748(gp)
 2015628:	1400010e 	bge	r2,r16,2015630 <alt_get_fd+0x64>
 201562c:	d4200515 	stw	r16,-32748(gp)
 2015630:	8005883a 	mov	r2,r16
 2015634:	dfc00317 	ldw	ra,12(sp)
 2015638:	dc800217 	ldw	r18,8(sp)
 201563c:	dc400117 	ldw	r17,4(sp)
 2015640:	dc000017 	ldw	r16,0(sp)
 2015644:	dec00404 	addi	sp,sp,16
 2015648:	f800283a 	ret
 201564c:	043ffa04 	movi	r16,-24
 2015650:	003ff706 	br	2015630 <_gp+0xffff6570>

02015654 <exit>:
 2015654:	defffe04 	addi	sp,sp,-8
 2015658:	000b883a 	mov	r5,zero
 201565c:	dc000015 	stw	r16,0(sp)
 2015660:	dfc00115 	stw	ra,4(sp)
 2015664:	2021883a 	mov	r16,r4
 2015668:	2015b480 	call	2015b48 <__call_exitprocs>
 201566c:	00808074 	movhi	r2,513
 2015670:	109c3104 	addi	r2,r2,28868
 2015674:	11000017 	ldw	r4,0(r2)
 2015678:	20800f17 	ldw	r2,60(r4)
 201567c:	10000126 	beq	r2,zero,2015684 <exit+0x30>
 2015680:	103ee83a 	callr	r2
 2015684:	8009883a 	mov	r4,r16
 2015688:	2015eb80 	call	2015eb8 <_exit>

0201568c <_getc_r>:
 201568c:	defffd04 	addi	sp,sp,-12
 2015690:	dc000115 	stw	r16,4(sp)
 2015694:	dfc00215 	stw	ra,8(sp)
 2015698:	2021883a 	mov	r16,r4
 201569c:	20000226 	beq	r4,zero,20156a8 <_getc_r+0x1c>
 20156a0:	20800e17 	ldw	r2,56(r4)
 20156a4:	10000c26 	beq	r2,zero,20156d8 <_getc_r+0x4c>
 20156a8:	28800117 	ldw	r2,4(r5)
 20156ac:	10bfffc4 	addi	r2,r2,-1
 20156b0:	28800115 	stw	r2,4(r5)
 20156b4:	10000c16 	blt	r2,zero,20156e8 <_getc_r+0x5c>
 20156b8:	28800017 	ldw	r2,0(r5)
 20156bc:	10c00044 	addi	r3,r2,1
 20156c0:	28c00015 	stw	r3,0(r5)
 20156c4:	10800003 	ldbu	r2,0(r2)
 20156c8:	dfc00217 	ldw	ra,8(sp)
 20156cc:	dc000117 	ldw	r16,4(sp)
 20156d0:	dec00304 	addi	sp,sp,12
 20156d4:	f800283a 	ret
 20156d8:	d9400015 	stw	r5,0(sp)
 20156dc:	20121640 	call	2012164 <__sinit>
 20156e0:	d9400017 	ldw	r5,0(sp)
 20156e4:	003ff006 	br	20156a8 <_gp+0xffff65e8>
 20156e8:	8009883a 	mov	r4,r16
 20156ec:	dfc00217 	ldw	ra,8(sp)
 20156f0:	dc000117 	ldw	r16,4(sp)
 20156f4:	dec00304 	addi	sp,sp,12
 20156f8:	20159681 	jmpi	2015968 <__srget_r>

020156fc <getc>:
 20156fc:	00808074 	movhi	r2,513
 2015700:	defffd04 	addi	sp,sp,-12
 2015704:	109c3204 	addi	r2,r2,28872
 2015708:	dc400115 	stw	r17,4(sp)
 201570c:	14400017 	ldw	r17,0(r2)
 2015710:	dc000015 	stw	r16,0(sp)
 2015714:	dfc00215 	stw	ra,8(sp)
 2015718:	2021883a 	mov	r16,r4
 201571c:	88000226 	beq	r17,zero,2015728 <getc+0x2c>
 2015720:	88800e17 	ldw	r2,56(r17)
 2015724:	10000d26 	beq	r2,zero,201575c <getc+0x60>
 2015728:	80800117 	ldw	r2,4(r16)
 201572c:	10bfffc4 	addi	r2,r2,-1
 2015730:	80800115 	stw	r2,4(r16)
 2015734:	10000c16 	blt	r2,zero,2015768 <getc+0x6c>
 2015738:	80800017 	ldw	r2,0(r16)
 201573c:	10c00044 	addi	r3,r2,1
 2015740:	80c00015 	stw	r3,0(r16)
 2015744:	10800003 	ldbu	r2,0(r2)
 2015748:	dfc00217 	ldw	ra,8(sp)
 201574c:	dc400117 	ldw	r17,4(sp)
 2015750:	dc000017 	ldw	r16,0(sp)
 2015754:	dec00304 	addi	sp,sp,12
 2015758:	f800283a 	ret
 201575c:	8809883a 	mov	r4,r17
 2015760:	20121640 	call	2012164 <__sinit>
 2015764:	003ff006 	br	2015728 <_gp+0xffff6668>
 2015768:	800b883a 	mov	r5,r16
 201576c:	8809883a 	mov	r4,r17
 2015770:	dfc00217 	ldw	ra,8(sp)
 2015774:	dc400117 	ldw	r17,4(sp)
 2015778:	dc000017 	ldw	r16,0(sp)
 201577c:	dec00304 	addi	sp,sp,12
 2015780:	20159681 	jmpi	2015968 <__srget_r>

02015784 <memcmp>:
 2015784:	01c000c4 	movi	r7,3
 2015788:	3980192e 	bgeu	r7,r6,20157f0 <memcmp+0x6c>
 201578c:	2144b03a 	or	r2,r4,r5
 2015790:	11c4703a 	and	r2,r2,r7
 2015794:	10000f26 	beq	r2,zero,20157d4 <memcmp+0x50>
 2015798:	20800003 	ldbu	r2,0(r4)
 201579c:	28c00003 	ldbu	r3,0(r5)
 20157a0:	10c0151e 	bne	r2,r3,20157f8 <memcmp+0x74>
 20157a4:	31bfff84 	addi	r6,r6,-2
 20157a8:	01ffffc4 	movi	r7,-1
 20157ac:	00000406 	br	20157c0 <memcmp+0x3c>
 20157b0:	20800003 	ldbu	r2,0(r4)
 20157b4:	28c00003 	ldbu	r3,0(r5)
 20157b8:	31bfffc4 	addi	r6,r6,-1
 20157bc:	10c00e1e 	bne	r2,r3,20157f8 <memcmp+0x74>
 20157c0:	21000044 	addi	r4,r4,1
 20157c4:	29400044 	addi	r5,r5,1
 20157c8:	31fff91e 	bne	r6,r7,20157b0 <_gp+0xffff66f0>
 20157cc:	0005883a 	mov	r2,zero
 20157d0:	f800283a 	ret
 20157d4:	20c00017 	ldw	r3,0(r4)
 20157d8:	28800017 	ldw	r2,0(r5)
 20157dc:	18bfee1e 	bne	r3,r2,2015798 <_gp+0xffff66d8>
 20157e0:	31bfff04 	addi	r6,r6,-4
 20157e4:	21000104 	addi	r4,r4,4
 20157e8:	29400104 	addi	r5,r5,4
 20157ec:	39bff936 	bltu	r7,r6,20157d4 <_gp+0xffff6714>
 20157f0:	303fe91e 	bne	r6,zero,2015798 <_gp+0xffff66d8>
 20157f4:	003ff506 	br	20157cc <_gp+0xffff670c>
 20157f8:	10c5c83a 	sub	r2,r2,r3
 20157fc:	f800283a 	ret

02015800 <_putc_r>:
 2015800:	defffc04 	addi	sp,sp,-16
 2015804:	dc000215 	stw	r16,8(sp)
 2015808:	dfc00315 	stw	ra,12(sp)
 201580c:	2021883a 	mov	r16,r4
 2015810:	20000226 	beq	r4,zero,201581c <_putc_r+0x1c>
 2015814:	20800e17 	ldw	r2,56(r4)
 2015818:	10001b26 	beq	r2,zero,2015888 <_putc_r+0x88>
 201581c:	30800217 	ldw	r2,8(r6)
 2015820:	10bfffc4 	addi	r2,r2,-1
 2015824:	30800215 	stw	r2,8(r6)
 2015828:	10000a16 	blt	r2,zero,2015854 <_putc_r+0x54>
 201582c:	30800017 	ldw	r2,0(r6)
 2015830:	11400005 	stb	r5,0(r2)
 2015834:	30800017 	ldw	r2,0(r6)
 2015838:	10c00044 	addi	r3,r2,1
 201583c:	30c00015 	stw	r3,0(r6)
 2015840:	10800003 	ldbu	r2,0(r2)
 2015844:	dfc00317 	ldw	ra,12(sp)
 2015848:	dc000217 	ldw	r16,8(sp)
 201584c:	dec00404 	addi	sp,sp,16
 2015850:	f800283a 	ret
 2015854:	30c00617 	ldw	r3,24(r6)
 2015858:	10c00616 	blt	r2,r3,2015874 <_putc_r+0x74>
 201585c:	30800017 	ldw	r2,0(r6)
 2015860:	00c00284 	movi	r3,10
 2015864:	11400005 	stb	r5,0(r2)
 2015868:	30800017 	ldw	r2,0(r6)
 201586c:	11400003 	ldbu	r5,0(r2)
 2015870:	28fff11e 	bne	r5,r3,2015838 <_gp+0xffff6778>
 2015874:	8009883a 	mov	r4,r16
 2015878:	dfc00317 	ldw	ra,12(sp)
 201587c:	dc000217 	ldw	r16,8(sp)
 2015880:	dec00404 	addi	sp,sp,16
 2015884:	20159f01 	jmpi	20159f0 <__swbuf_r>
 2015888:	d9400015 	stw	r5,0(sp)
 201588c:	d9800115 	stw	r6,4(sp)
 2015890:	20121640 	call	2012164 <__sinit>
 2015894:	d9800117 	ldw	r6,4(sp)
 2015898:	d9400017 	ldw	r5,0(sp)
 201589c:	003fdf06 	br	201581c <_gp+0xffff675c>

020158a0 <putc>:
 20158a0:	00808074 	movhi	r2,513
 20158a4:	defffc04 	addi	sp,sp,-16
 20158a8:	109c3204 	addi	r2,r2,28872
 20158ac:	dc000115 	stw	r16,4(sp)
 20158b0:	14000017 	ldw	r16,0(r2)
 20158b4:	dc400215 	stw	r17,8(sp)
 20158b8:	dfc00315 	stw	ra,12(sp)
 20158bc:	2023883a 	mov	r17,r4
 20158c0:	80000226 	beq	r16,zero,20158cc <putc+0x2c>
 20158c4:	80800e17 	ldw	r2,56(r16)
 20158c8:	10001a26 	beq	r2,zero,2015934 <putc+0x94>
 20158cc:	28800217 	ldw	r2,8(r5)
 20158d0:	10bfffc4 	addi	r2,r2,-1
 20158d4:	28800215 	stw	r2,8(r5)
 20158d8:	10000b16 	blt	r2,zero,2015908 <putc+0x68>
 20158dc:	28800017 	ldw	r2,0(r5)
 20158e0:	14400005 	stb	r17,0(r2)
 20158e4:	28800017 	ldw	r2,0(r5)
 20158e8:	10c00044 	addi	r3,r2,1
 20158ec:	28c00015 	stw	r3,0(r5)
 20158f0:	10800003 	ldbu	r2,0(r2)
 20158f4:	dfc00317 	ldw	ra,12(sp)
 20158f8:	dc400217 	ldw	r17,8(sp)
 20158fc:	dc000117 	ldw	r16,4(sp)
 2015900:	dec00404 	addi	sp,sp,16
 2015904:	f800283a 	ret
 2015908:	28c00617 	ldw	r3,24(r5)
 201590c:	10c00e16 	blt	r2,r3,2015948 <putc+0xa8>
 2015910:	28800017 	ldw	r2,0(r5)
 2015914:	01000284 	movi	r4,10
 2015918:	14400005 	stb	r17,0(r2)
 201591c:	28800017 	ldw	r2,0(r5)
 2015920:	10c00003 	ldbu	r3,0(r2)
 2015924:	193ff01e 	bne	r3,r4,20158e8 <_gp+0xffff6828>
 2015928:	280d883a 	mov	r6,r5
 201592c:	180b883a 	mov	r5,r3
 2015930:	00000706 	br	2015950 <putc+0xb0>
 2015934:	8009883a 	mov	r4,r16
 2015938:	d9400015 	stw	r5,0(sp)
 201593c:	20121640 	call	2012164 <__sinit>
 2015940:	d9400017 	ldw	r5,0(sp)
 2015944:	003fe106 	br	20158cc <_gp+0xffff680c>
 2015948:	280d883a 	mov	r6,r5
 201594c:	880b883a 	mov	r5,r17
 2015950:	8009883a 	mov	r4,r16
 2015954:	dfc00317 	ldw	ra,12(sp)
 2015958:	dc400217 	ldw	r17,8(sp)
 201595c:	dc000117 	ldw	r16,4(sp)
 2015960:	dec00404 	addi	sp,sp,16
 2015964:	20159f01 	jmpi	20159f0 <__swbuf_r>

02015968 <__srget_r>:
 2015968:	defffd04 	addi	sp,sp,-12
 201596c:	dc400115 	stw	r17,4(sp)
 2015970:	dc000015 	stw	r16,0(sp)
 2015974:	dfc00215 	stw	ra,8(sp)
 2015978:	2023883a 	mov	r17,r4
 201597c:	2821883a 	mov	r16,r5
 2015980:	20000226 	beq	r4,zero,201598c <__srget_r+0x24>
 2015984:	20800e17 	ldw	r2,56(r4)
 2015988:	10001026 	beq	r2,zero,20159cc <__srget_r+0x64>
 201598c:	800b883a 	mov	r5,r16
 2015990:	8809883a 	mov	r4,r17
 2015994:	2015ce40 	call	2015ce4 <__srefill_r>
 2015998:	10000e1e 	bne	r2,zero,20159d4 <__srget_r+0x6c>
 201599c:	80c00017 	ldw	r3,0(r16)
 20159a0:	80800117 	ldw	r2,4(r16)
 20159a4:	19000044 	addi	r4,r3,1
 20159a8:	10bfffc4 	addi	r2,r2,-1
 20159ac:	80800115 	stw	r2,4(r16)
 20159b0:	81000015 	stw	r4,0(r16)
 20159b4:	18800003 	ldbu	r2,0(r3)
 20159b8:	dfc00217 	ldw	ra,8(sp)
 20159bc:	dc400117 	ldw	r17,4(sp)
 20159c0:	dc000017 	ldw	r16,0(sp)
 20159c4:	dec00304 	addi	sp,sp,12
 20159c8:	f800283a 	ret
 20159cc:	20121640 	call	2012164 <__sinit>
 20159d0:	003fee06 	br	201598c <_gp+0xffff68cc>
 20159d4:	00bfffc4 	movi	r2,-1
 20159d8:	003ff706 	br	20159b8 <_gp+0xffff68f8>

020159dc <__srget>:
 20159dc:	00808074 	movhi	r2,513
 20159e0:	109c3204 	addi	r2,r2,28872
 20159e4:	200b883a 	mov	r5,r4
 20159e8:	11000017 	ldw	r4,0(r2)
 20159ec:	20159681 	jmpi	2015968 <__srget_r>

020159f0 <__swbuf_r>:
 20159f0:	defffb04 	addi	sp,sp,-20
 20159f4:	dcc00315 	stw	r19,12(sp)
 20159f8:	dc800215 	stw	r18,8(sp)
 20159fc:	dc000015 	stw	r16,0(sp)
 2015a00:	dfc00415 	stw	ra,16(sp)
 2015a04:	dc400115 	stw	r17,4(sp)
 2015a08:	2025883a 	mov	r18,r4
 2015a0c:	2827883a 	mov	r19,r5
 2015a10:	3021883a 	mov	r16,r6
 2015a14:	20000226 	beq	r4,zero,2015a20 <__swbuf_r+0x30>
 2015a18:	20800e17 	ldw	r2,56(r4)
 2015a1c:	10004226 	beq	r2,zero,2015b28 <__swbuf_r+0x138>
 2015a20:	80800617 	ldw	r2,24(r16)
 2015a24:	8100030b 	ldhu	r4,12(r16)
 2015a28:	80800215 	stw	r2,8(r16)
 2015a2c:	2080020c 	andi	r2,r4,8
 2015a30:	10003626 	beq	r2,zero,2015b0c <__swbuf_r+0x11c>
 2015a34:	80c00417 	ldw	r3,16(r16)
 2015a38:	18003426 	beq	r3,zero,2015b0c <__swbuf_r+0x11c>
 2015a3c:	2088000c 	andi	r2,r4,8192
 2015a40:	9c403fcc 	andi	r17,r19,255
 2015a44:	10001a26 	beq	r2,zero,2015ab0 <__swbuf_r+0xc0>
 2015a48:	80800017 	ldw	r2,0(r16)
 2015a4c:	81000517 	ldw	r4,20(r16)
 2015a50:	10c7c83a 	sub	r3,r2,r3
 2015a54:	1900200e 	bge	r3,r4,2015ad8 <__swbuf_r+0xe8>
 2015a58:	18c00044 	addi	r3,r3,1
 2015a5c:	81000217 	ldw	r4,8(r16)
 2015a60:	11400044 	addi	r5,r2,1
 2015a64:	81400015 	stw	r5,0(r16)
 2015a68:	213fffc4 	addi	r4,r4,-1
 2015a6c:	81000215 	stw	r4,8(r16)
 2015a70:	14c00005 	stb	r19,0(r2)
 2015a74:	80800517 	ldw	r2,20(r16)
 2015a78:	10c01e26 	beq	r2,r3,2015af4 <__swbuf_r+0x104>
 2015a7c:	8080030b 	ldhu	r2,12(r16)
 2015a80:	1080004c 	andi	r2,r2,1
 2015a84:	10000226 	beq	r2,zero,2015a90 <__swbuf_r+0xa0>
 2015a88:	00800284 	movi	r2,10
 2015a8c:	88801926 	beq	r17,r2,2015af4 <__swbuf_r+0x104>
 2015a90:	8805883a 	mov	r2,r17
 2015a94:	dfc00417 	ldw	ra,16(sp)
 2015a98:	dcc00317 	ldw	r19,12(sp)
 2015a9c:	dc800217 	ldw	r18,8(sp)
 2015aa0:	dc400117 	ldw	r17,4(sp)
 2015aa4:	dc000017 	ldw	r16,0(sp)
 2015aa8:	dec00504 	addi	sp,sp,20
 2015aac:	f800283a 	ret
 2015ab0:	81401917 	ldw	r5,100(r16)
 2015ab4:	00b7ffc4 	movi	r2,-8193
 2015ab8:	21080014 	ori	r4,r4,8192
 2015abc:	2884703a 	and	r2,r5,r2
 2015ac0:	80801915 	stw	r2,100(r16)
 2015ac4:	80800017 	ldw	r2,0(r16)
 2015ac8:	8100030d 	sth	r4,12(r16)
 2015acc:	81000517 	ldw	r4,20(r16)
 2015ad0:	10c7c83a 	sub	r3,r2,r3
 2015ad4:	193fe016 	blt	r3,r4,2015a58 <_gp+0xffff6998>
 2015ad8:	800b883a 	mov	r5,r16
 2015adc:	9009883a 	mov	r4,r18
 2015ae0:	20140dc0 	call	20140dc <_fflush_r>
 2015ae4:	1000071e 	bne	r2,zero,2015b04 <__swbuf_r+0x114>
 2015ae8:	80800017 	ldw	r2,0(r16)
 2015aec:	00c00044 	movi	r3,1
 2015af0:	003fda06 	br	2015a5c <_gp+0xffff699c>
 2015af4:	800b883a 	mov	r5,r16
 2015af8:	9009883a 	mov	r4,r18
 2015afc:	20140dc0 	call	20140dc <_fflush_r>
 2015b00:	103fe326 	beq	r2,zero,2015a90 <_gp+0xffff69d0>
 2015b04:	00bfffc4 	movi	r2,-1
 2015b08:	003fe206 	br	2015a94 <_gp+0xffff69d4>
 2015b0c:	800b883a 	mov	r5,r16
 2015b10:	9009883a 	mov	r4,r18
 2015b14:	2013c140 	call	2013c14 <__swsetup_r>
 2015b18:	103ffa1e 	bne	r2,zero,2015b04 <_gp+0xffff6a44>
 2015b1c:	8100030b 	ldhu	r4,12(r16)
 2015b20:	80c00417 	ldw	r3,16(r16)
 2015b24:	003fc506 	br	2015a3c <_gp+0xffff697c>
 2015b28:	20121640 	call	2012164 <__sinit>
 2015b2c:	003fbc06 	br	2015a20 <_gp+0xffff6960>

02015b30 <__swbuf>:
 2015b30:	00808074 	movhi	r2,513
 2015b34:	109c3204 	addi	r2,r2,28872
 2015b38:	280d883a 	mov	r6,r5
 2015b3c:	200b883a 	mov	r5,r4
 2015b40:	11000017 	ldw	r4,0(r2)
 2015b44:	20159f01 	jmpi	20159f0 <__swbuf_r>

02015b48 <__call_exitprocs>:
 2015b48:	defff504 	addi	sp,sp,-44
 2015b4c:	df000915 	stw	fp,36(sp)
 2015b50:	dd400615 	stw	r21,24(sp)
 2015b54:	dc800315 	stw	r18,12(sp)
 2015b58:	dfc00a15 	stw	ra,40(sp)
 2015b5c:	ddc00815 	stw	r23,32(sp)
 2015b60:	dd800715 	stw	r22,28(sp)
 2015b64:	dd000515 	stw	r20,20(sp)
 2015b68:	dcc00415 	stw	r19,16(sp)
 2015b6c:	dc400215 	stw	r17,8(sp)
 2015b70:	dc000115 	stw	r16,4(sp)
 2015b74:	d9000015 	stw	r4,0(sp)
 2015b78:	2839883a 	mov	fp,r5
 2015b7c:	04800044 	movi	r18,1
 2015b80:	057fffc4 	movi	r21,-1
 2015b84:	00808074 	movhi	r2,513
 2015b88:	109c3104 	addi	r2,r2,28868
 2015b8c:	12000017 	ldw	r8,0(r2)
 2015b90:	45005217 	ldw	r20,328(r8)
 2015b94:	44c05204 	addi	r19,r8,328
 2015b98:	a0001c26 	beq	r20,zero,2015c0c <__call_exitprocs+0xc4>
 2015b9c:	a0800117 	ldw	r2,4(r20)
 2015ba0:	15ffffc4 	addi	r23,r2,-1
 2015ba4:	b8000d16 	blt	r23,zero,2015bdc <__call_exitprocs+0x94>
 2015ba8:	14000044 	addi	r16,r2,1
 2015bac:	8421883a 	add	r16,r16,r16
 2015bb0:	8421883a 	add	r16,r16,r16
 2015bb4:	84402004 	addi	r17,r16,128
 2015bb8:	a463883a 	add	r17,r20,r17
 2015bbc:	a421883a 	add	r16,r20,r16
 2015bc0:	e0001e26 	beq	fp,zero,2015c3c <__call_exitprocs+0xf4>
 2015bc4:	80804017 	ldw	r2,256(r16)
 2015bc8:	e0801c26 	beq	fp,r2,2015c3c <__call_exitprocs+0xf4>
 2015bcc:	bdffffc4 	addi	r23,r23,-1
 2015bd0:	843fff04 	addi	r16,r16,-4
 2015bd4:	8c7fff04 	addi	r17,r17,-4
 2015bd8:	bd7ff91e 	bne	r23,r21,2015bc0 <_gp+0xffff6b00>
 2015bdc:	00800034 	movhi	r2,0
 2015be0:	10800004 	addi	r2,r2,0
 2015be4:	10000926 	beq	r2,zero,2015c0c <__call_exitprocs+0xc4>
 2015be8:	a0800117 	ldw	r2,4(r20)
 2015bec:	1000301e 	bne	r2,zero,2015cb0 <__call_exitprocs+0x168>
 2015bf0:	a0800017 	ldw	r2,0(r20)
 2015bf4:	10003226 	beq	r2,zero,2015cc0 <__call_exitprocs+0x178>
 2015bf8:	a009883a 	mov	r4,r20
 2015bfc:	98800015 	stw	r2,0(r19)
 2015c00:	00000000 	call	0 <__alt_mem_sdram>
 2015c04:	9d000017 	ldw	r20,0(r19)
 2015c08:	a03fe41e 	bne	r20,zero,2015b9c <_gp+0xffff6adc>
 2015c0c:	dfc00a17 	ldw	ra,40(sp)
 2015c10:	df000917 	ldw	fp,36(sp)
 2015c14:	ddc00817 	ldw	r23,32(sp)
 2015c18:	dd800717 	ldw	r22,28(sp)
 2015c1c:	dd400617 	ldw	r21,24(sp)
 2015c20:	dd000517 	ldw	r20,20(sp)
 2015c24:	dcc00417 	ldw	r19,16(sp)
 2015c28:	dc800317 	ldw	r18,12(sp)
 2015c2c:	dc400217 	ldw	r17,8(sp)
 2015c30:	dc000117 	ldw	r16,4(sp)
 2015c34:	dec00b04 	addi	sp,sp,44
 2015c38:	f800283a 	ret
 2015c3c:	a0800117 	ldw	r2,4(r20)
 2015c40:	80c00017 	ldw	r3,0(r16)
 2015c44:	10bfffc4 	addi	r2,r2,-1
 2015c48:	15c01426 	beq	r2,r23,2015c9c <__call_exitprocs+0x154>
 2015c4c:	80000015 	stw	zero,0(r16)
 2015c50:	183fde26 	beq	r3,zero,2015bcc <_gp+0xffff6b0c>
 2015c54:	95c8983a 	sll	r4,r18,r23
 2015c58:	a0806217 	ldw	r2,392(r20)
 2015c5c:	a5800117 	ldw	r22,4(r20)
 2015c60:	2084703a 	and	r2,r4,r2
 2015c64:	10000b26 	beq	r2,zero,2015c94 <__call_exitprocs+0x14c>
 2015c68:	a0806317 	ldw	r2,396(r20)
 2015c6c:	2088703a 	and	r4,r4,r2
 2015c70:	20000c1e 	bne	r4,zero,2015ca4 <__call_exitprocs+0x15c>
 2015c74:	89400017 	ldw	r5,0(r17)
 2015c78:	d9000017 	ldw	r4,0(sp)
 2015c7c:	183ee83a 	callr	r3
 2015c80:	a0800117 	ldw	r2,4(r20)
 2015c84:	15bfbf1e 	bne	r2,r22,2015b84 <_gp+0xffff6ac4>
 2015c88:	98800017 	ldw	r2,0(r19)
 2015c8c:	153fcf26 	beq	r2,r20,2015bcc <_gp+0xffff6b0c>
 2015c90:	003fbc06 	br	2015b84 <_gp+0xffff6ac4>
 2015c94:	183ee83a 	callr	r3
 2015c98:	003ff906 	br	2015c80 <_gp+0xffff6bc0>
 2015c9c:	a5c00115 	stw	r23,4(r20)
 2015ca0:	003feb06 	br	2015c50 <_gp+0xffff6b90>
 2015ca4:	89000017 	ldw	r4,0(r17)
 2015ca8:	183ee83a 	callr	r3
 2015cac:	003ff406 	br	2015c80 <_gp+0xffff6bc0>
 2015cb0:	a0800017 	ldw	r2,0(r20)
 2015cb4:	a027883a 	mov	r19,r20
 2015cb8:	1029883a 	mov	r20,r2
 2015cbc:	003fb606 	br	2015b98 <_gp+0xffff6ad8>
 2015cc0:	0005883a 	mov	r2,zero
 2015cc4:	003ffb06 	br	2015cb4 <_gp+0xffff6bf4>

02015cc8 <lflush>:
 2015cc8:	2080030b 	ldhu	r2,12(r4)
 2015ccc:	00c00244 	movi	r3,9
 2015cd0:	1080024c 	andi	r2,r2,9
 2015cd4:	10c00226 	beq	r2,r3,2015ce0 <lflush+0x18>
 2015cd8:	0005883a 	mov	r2,zero
 2015cdc:	f800283a 	ret
 2015ce0:	20141381 	jmpi	2014138 <fflush>

02015ce4 <__srefill_r>:
 2015ce4:	defffc04 	addi	sp,sp,-16
 2015ce8:	dc400115 	stw	r17,4(sp)
 2015cec:	dc000015 	stw	r16,0(sp)
 2015cf0:	dfc00315 	stw	ra,12(sp)
 2015cf4:	dc800215 	stw	r18,8(sp)
 2015cf8:	2023883a 	mov	r17,r4
 2015cfc:	2821883a 	mov	r16,r5
 2015d00:	20000226 	beq	r4,zero,2015d0c <__srefill_r+0x28>
 2015d04:	20800e17 	ldw	r2,56(r4)
 2015d08:	10003c26 	beq	r2,zero,2015dfc <__srefill_r+0x118>
 2015d0c:	80c0030b 	ldhu	r3,12(r16)
 2015d10:	1908000c 	andi	r4,r3,8192
 2015d14:	1805883a 	mov	r2,r3
 2015d18:	2000071e 	bne	r4,zero,2015d38 <__srefill_r+0x54>
 2015d1c:	81001917 	ldw	r4,100(r16)
 2015d20:	18880014 	ori	r2,r3,8192
 2015d24:	00f7ffc4 	movi	r3,-8193
 2015d28:	20c8703a 	and	r4,r4,r3
 2015d2c:	8080030d 	sth	r2,12(r16)
 2015d30:	1007883a 	mov	r3,r2
 2015d34:	81001915 	stw	r4,100(r16)
 2015d38:	80000115 	stw	zero,4(r16)
 2015d3c:	1100080c 	andi	r4,r2,32
 2015d40:	2000571e 	bne	r4,zero,2015ea0 <__srefill_r+0x1bc>
 2015d44:	1100010c 	andi	r4,r2,4
 2015d48:	20001f26 	beq	r4,zero,2015dc8 <__srefill_r+0xe4>
 2015d4c:	81400c17 	ldw	r5,48(r16)
 2015d50:	28000826 	beq	r5,zero,2015d74 <__srefill_r+0x90>
 2015d54:	80801004 	addi	r2,r16,64
 2015d58:	28800226 	beq	r5,r2,2015d64 <__srefill_r+0x80>
 2015d5c:	8809883a 	mov	r4,r17
 2015d60:	201428c0 	call	201428c <_free_r>
 2015d64:	80800f17 	ldw	r2,60(r16)
 2015d68:	80000c15 	stw	zero,48(r16)
 2015d6c:	80800115 	stw	r2,4(r16)
 2015d70:	1000391e 	bne	r2,zero,2015e58 <__srefill_r+0x174>
 2015d74:	80800417 	ldw	r2,16(r16)
 2015d78:	10004b26 	beq	r2,zero,2015ea8 <__srefill_r+0x1c4>
 2015d7c:	8480030b 	ldhu	r18,12(r16)
 2015d80:	908000cc 	andi	r2,r18,3
 2015d84:	10001f1e 	bne	r2,zero,2015e04 <__srefill_r+0x120>
 2015d88:	81800417 	ldw	r6,16(r16)
 2015d8c:	80800817 	ldw	r2,32(r16)
 2015d90:	81c00517 	ldw	r7,20(r16)
 2015d94:	81400717 	ldw	r5,28(r16)
 2015d98:	81800015 	stw	r6,0(r16)
 2015d9c:	8809883a 	mov	r4,r17
 2015da0:	103ee83a 	callr	r2
 2015da4:	80800115 	stw	r2,4(r16)
 2015da8:	00800e0e 	bge	zero,r2,2015de4 <__srefill_r+0x100>
 2015dac:	0005883a 	mov	r2,zero
 2015db0:	dfc00317 	ldw	ra,12(sp)
 2015db4:	dc800217 	ldw	r18,8(sp)
 2015db8:	dc400117 	ldw	r17,4(sp)
 2015dbc:	dc000017 	ldw	r16,0(sp)
 2015dc0:	dec00404 	addi	sp,sp,16
 2015dc4:	f800283a 	ret
 2015dc8:	1100040c 	andi	r4,r2,16
 2015dcc:	20003026 	beq	r4,zero,2015e90 <__srefill_r+0x1ac>
 2015dd0:	1080020c 	andi	r2,r2,8
 2015dd4:	1000241e 	bne	r2,zero,2015e68 <__srefill_r+0x184>
 2015dd8:	18c00114 	ori	r3,r3,4
 2015ddc:	80c0030d 	sth	r3,12(r16)
 2015de0:	003fe406 	br	2015d74 <_gp+0xffff6cb4>
 2015de4:	80c0030b 	ldhu	r3,12(r16)
 2015de8:	1000161e 	bne	r2,zero,2015e44 <__srefill_r+0x160>
 2015dec:	18c00814 	ori	r3,r3,32
 2015df0:	00bfffc4 	movi	r2,-1
 2015df4:	80c0030d 	sth	r3,12(r16)
 2015df8:	003fed06 	br	2015db0 <_gp+0xffff6cf0>
 2015dfc:	20121640 	call	2012164 <__sinit>
 2015e00:	003fc206 	br	2015d0c <_gp+0xffff6c4c>
 2015e04:	00808074 	movhi	r2,513
 2015e08:	109c3104 	addi	r2,r2,28868
 2015e0c:	11000017 	ldw	r4,0(r2)
 2015e10:	01408074 	movhi	r5,513
 2015e14:	00800044 	movi	r2,1
 2015e18:	29573204 	addi	r5,r5,23752
 2015e1c:	8080030d 	sth	r2,12(r16)
 2015e20:	201267c0 	call	201267c <_fwalk>
 2015e24:	00800244 	movi	r2,9
 2015e28:	8480030d 	sth	r18,12(r16)
 2015e2c:	9480024c 	andi	r18,r18,9
 2015e30:	90bfd51e 	bne	r18,r2,2015d88 <_gp+0xffff6cc8>
 2015e34:	800b883a 	mov	r5,r16
 2015e38:	8809883a 	mov	r4,r17
 2015e3c:	2013ec00 	call	2013ec0 <__sflush_r>
 2015e40:	003fd106 	br	2015d88 <_gp+0xffff6cc8>
 2015e44:	18c01014 	ori	r3,r3,64
 2015e48:	80000115 	stw	zero,4(r16)
 2015e4c:	00bfffc4 	movi	r2,-1
 2015e50:	80c0030d 	sth	r3,12(r16)
 2015e54:	003fd606 	br	2015db0 <_gp+0xffff6cf0>
 2015e58:	80c00e17 	ldw	r3,56(r16)
 2015e5c:	0005883a 	mov	r2,zero
 2015e60:	80c00015 	stw	r3,0(r16)
 2015e64:	003fd206 	br	2015db0 <_gp+0xffff6cf0>
 2015e68:	800b883a 	mov	r5,r16
 2015e6c:	8809883a 	mov	r4,r17
 2015e70:	20140dc0 	call	20140dc <_fflush_r>
 2015e74:	10000a1e 	bne	r2,zero,2015ea0 <__srefill_r+0x1bc>
 2015e78:	8080030b 	ldhu	r2,12(r16)
 2015e7c:	00fffdc4 	movi	r3,-9
 2015e80:	80000215 	stw	zero,8(r16)
 2015e84:	1886703a 	and	r3,r3,r2
 2015e88:	80000615 	stw	zero,24(r16)
 2015e8c:	003fd206 	br	2015dd8 <_gp+0xffff6d18>
 2015e90:	00800244 	movi	r2,9
 2015e94:	88800015 	stw	r2,0(r17)
 2015e98:	18c01014 	ori	r3,r3,64
 2015e9c:	80c0030d 	sth	r3,12(r16)
 2015ea0:	00bfffc4 	movi	r2,-1
 2015ea4:	003fc206 	br	2015db0 <_gp+0xffff6cf0>
 2015ea8:	800b883a 	mov	r5,r16
 2015eac:	8809883a 	mov	r4,r17
 2015eb0:	20145fc0 	call	20145fc <__smakebuf_r>
 2015eb4:	003fb106 	br	2015d7c <_gp+0xffff6cbc>

02015eb8 <_exit>:
 2015eb8:	20000226 	beq	r4,zero,2015ec4 <_exit+0xc>
 2015ebc:	002af070 	cmpltui	zero,zero,43969
 2015ec0:	003fff06 	br	2015ec0 <_gp+0xffff6e00>
 2015ec4:	002af0b0 	cmpltui	zero,zero,43970
 2015ec8:	003ffd06 	br	2015ec0 <_gp+0xffff6e00>
